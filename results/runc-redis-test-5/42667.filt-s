 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_setsockopt() {
   __sys_setsockopt() {
     sockfd_lookup_light() {
       __fdget() {
         __fget_light() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
       }
     }
     security_socket_setsockopt() {
       apparmor_socket_setsockopt() {
         aa_sk_perm() {
           __cond_resched();
           aa_label_sk_perm.part.0() {
             aa_label_next_confined();
             aa_profile_af_perm() {
               aa_apply_modes_to_perms();
               aa_check_perms();
             }
             aa_label_next_confined();
           }
         }
       }
     }
     sock_common_setsockopt() {
       tcp_setsockopt() {
         do_tcp_setsockopt() {
           sockopt_lock_sock() {
             __cond_resched();
             _raw_spin_lock_bh();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           sockopt_release_sock() {
             release_sock() {
               _raw_spin_lock_bh();
               tcp_release_cb();
               _raw_spin_unlock_bh() {
                 __local_bh_enable_ip();
               }
             }
           }
         }
       }
     }
     kfree();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_epoll_ctl() {
   do_epoll_ctl() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     mutex_lock() {
       __cond_resched();
     }
     ep_insert() {
       kmem_cache_alloc() {
         __cond_resched();
         should_failslab();
         __rcu_read_lock();
         __get_obj_cgroup_from_memcg() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
         __rcu_read_unlock();
         obj_cgroup_charge() {
           consume_obj_stock();
         }
         ___slab_alloc();
         __rcu_read_lock();
         __rcu_read_unlock();
         mod_objcg_state();
         __rcu_read_lock();
         __rcu_read_unlock();
       }
       kmem_cache_alloc() {
         __cond_resched();
         should_failslab();
         __rcu_read_lock();
         __get_obj_cgroup_from_memcg() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
         __rcu_read_unlock();
         obj_cgroup_charge() {
           consume_obj_stock();
         }
         __rcu_read_lock();
         __rcu_read_unlock();
         mod_objcg_state();
         __rcu_read_lock();
         __rcu_read_unlock();
       }
       _raw_spin_lock();
       _raw_spin_unlock();
       ep_item_poll.isra.0() {
         sock_poll() {
           tcp_poll() {
             ep_ptable_queue_proc() {
               kmem_cache_alloc() {
                 __cond_resched();
                 should_failslab();
                 __rcu_read_lock();
                 __get_obj_cgroup_from_memcg() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_unlock();
                 obj_cgroup_charge() {
                   consume_obj_stock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 mod_objcg_state();
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               add_wait_queue() {
                 _raw_spin_lock_irqsave();
                 _raw_spin_unlock_irqrestore();
               }
             }
             tcp_stream_memory_free();
           }
         }
       }
       _raw_write_lock_irq();
       _raw_write_unlock_irq();
     }
     mutex_unlock();
     fput();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_accept() {
   __sys_accept4() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     get_unused_fd_flags() {
       alloc_fd() {
         _raw_spin_lock();
         expand_files();
         _raw_spin_unlock();
       }
     }
     do_accept() {
       sock_alloc() {
         new_inode_pseudo() {
           alloc_inode() {
             sock_alloc_inode() {
               kmem_cache_alloc_lru() {
                 __cond_resched();
                 should_failslab();
                 __rcu_read_lock();
                 __get_obj_cgroup_from_memcg() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_unlock();
                 __rcu_read_lock();
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 __rcu_read_unlock();
                 memcg_list_lru_alloc() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 obj_cgroup_charge() {
                   consume_obj_stock();
                   __rcu_read_lock();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   __rcu_read_unlock();
                   try_charge_memcg() {
                     consume_stock();
                   }
                   memcg_account_kmem() {
                     __mod_memcg_state() {
                       cgroup_rstat_updated();
                     }
                   }
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   refill_obj_stock();
                 }
                 ___slab_alloc();
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 mod_objcg_state();
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               __init_waitqueue_head();
             }
             inode_init_always() {
               make_kuid() {
                 map_id_range_down();
               }
               make_kgid() {
                 map_id_range_down();
               }
               __init_rwsem();
               __init_rwsem();
               security_inode_alloc() {
                 kmem_cache_alloc() {
                   __cond_resched();
                   should_failslab();
                 }
                 apparmor_inode_alloc_security();
               }
             }
           }
           _raw_spin_lock();
           _raw_spin_unlock();
         }
         get_next_ino();
       }
       __module_get();
       sock_alloc_file() {
         alloc_file_pseudo() {
           d_alloc_pseudo() {
             __d_alloc() {
               kmem_cache_alloc_lru() {
                 __cond_resched();
                 should_failslab();
                 __rcu_read_lock();
                 __get_obj_cgroup_from_memcg() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_unlock();
                 __rcu_read_lock();
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 __rcu_read_unlock();
                 memcg_list_lru_alloc() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 obj_cgroup_charge() {
                   consume_obj_stock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 mod_objcg_state();
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               d_set_d_op();
             }
           }
           mntget();
           d_instantiate() {
             security_d_instantiate() {
               apparmor_d_instantiate() {
                 _raw_spin_lock();
                 _raw_spin_unlock();
               }
             }
             _raw_spin_lock();
             __d_instantiate() {
               d_flags_for_inode();
               _raw_spin_lock();
               _raw_spin_unlock();
             }
             _raw_spin_unlock();
           }
           alloc_file() {
             alloc_empty_file() {
               __alloc_file() {
                 kmem_cache_alloc() {
                   __cond_resched();
                   should_failslab();
                   __rcu_read_lock();
                   __get_obj_cgroup_from_memcg() {
                     __rcu_read_lock();
                     __rcu_read_unlock();
                   }
                   __rcu_read_unlock();
                   obj_cgroup_charge() {
                     consume_obj_stock();
                   }
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   mod_objcg_state();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 security_file_alloc() {
                   kmem_cache_alloc() {
                     __cond_resched();
                     should_failslab();
                   }
                   hook_file_alloc_security();
                   apparmor_file_alloc_security() {
                     __cond_resched();
                   }
                 }
                 __mutex_init();
               }
             }
           }
         }
         stream_open();
       }
       security_socket_accept() {
         apparmor_socket_accept() {
           aa_sk_perm() {
             __cond_resched();
             aa_label_sk_perm.part.0() {
               aa_label_next_confined();
               aa_profile_af_perm() {
                 aa_apply_modes_to_perms();
                 aa_check_perms();
               }
               aa_label_next_confined();
             }
           }
         }
       }
       inet_accept() {
         inet_csk_accept() {
           lock_sock_nested() {
             __cond_resched();
             _raw_spin_lock_bh();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           release_sock() {
             _raw_spin_lock_bh();
             tcp_release_cb();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
         }
       }
       fput() {
         task_work_add() {
           kick_process();
         }
       }
     }
     put_unused_fd() {
       _raw_spin_lock();
       _raw_spin_unlock();
     }
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   exit_to_user_mode_loop() {
     task_work_run() {
       _raw_spin_lock_irq();
       _raw_spin_unlock_irq();
       ____fput() {
         __fput() {
           __cond_resched();
           locks_remove_file();
           ima_file_free();
           sock_close() {
             __sock_release() {
               down_write() {
                 __cond_resched();
               }
               inet_release();
               up_write();
               module_put();
             }
           }
           module_put();
           put_pid();
           dput() {
             __cond_resched();
             __rcu_read_lock();
             _raw_spin_lock();
             __rcu_read_unlock();
             _raw_spin_trylock();
             __dentry_kill() {
               dentry_unlink_inode() {
                 _raw_spin_unlock();
                 _raw_spin_unlock();
                 iput() {
                   _raw_spin_lock();
                   _raw_spin_unlock();
                   evict() {
                     inode_wait_for_writeback() {
                       _raw_spin_lock();
                       __inode_wait_for_writeback() {
                         bit_waitqueue();
                       }
                       _raw_spin_unlock();
                     }
                     truncate_inode_pages_final() {
                       truncate_inode_pages_range();
                     }
                     clear_inode() {
                       _raw_spin_lock_irq();
                       _raw_spin_unlock_irq();
                     }
                     _raw_spin_lock();
                     wake_up_bit();
                     _raw_spin_unlock();
                     destroy_inode() {
                       __destroy_inode() {
                         inode_has_buffers();
                         security_inode_free() {
                           integrity_inode_free();
                           hook_inode_free_security();
                           apparmor_inode_free_security();
                           call_rcu() {
                             __call_rcu_common.constprop.0() {
                               rcu_segcblist_enqueue();
                             }
                           }
                         }
                         __fsnotify_inode_delete() {
                           fsnotify_destroy_marks() {
                             fsnotify_grab_connector() {
                               __srcu_read_lock();
                               __srcu_read_unlock();
                             }
                           }
                         }
                         locks_free_lock_context();
                       }
                       call_rcu() {
                         __call_rcu_common.constprop.0() {
                           rcu_segcblist_enqueue();
                         }
                       }
                     }
                   }
                 }
               }
               _raw_spin_lock();
               _raw_spin_unlock();
               dentry_free() {
                 kmem_cache_free() {
                   obj_cgroup_uncharge() {
                     refill_obj_stock();
                   }
                   mod_objcg_state();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
               }
               __cond_resched();
             }
           }
           mntput() {
             mntput_no_expire() {
               __rcu_read_lock();
               __rcu_read_unlock();
             }
           }
           security_file_free() {
             apparmor_file_free_security();
             kmem_cache_free();
           }
           call_rcu() {
             __call_rcu_common.constprop.0() {
               rcu_segcblist_enqueue();
             }
           }
         }
       }
       __cond_resched();
     }
     mem_cgroup_handle_over_high();
     blkcg_maybe_throttle_current();
   }
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_epoll_wait() {
   ktime_get_ts64();
   timespec64_add_safe();
   do_epoll_wait() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     ep_poll() {
       select_estimate_accuracy() {
         ktime_get_ts64();
         set_normalized_timespec64();
       }
       ep_send_events() {
         mutex_lock() {
           __cond_resched();
         }
         _raw_write_lock_irq();
         _raw_write_unlock_irq();
         ep_item_poll.isra.0() {
           sock_poll() {
             tcp_poll();
           }
         }
         ep_done_scan() {
           _raw_write_lock_irq();
           __pm_relax();
           _raw_write_unlock_irq();
         }
         mutex_unlock();
       }
       _raw_write_lock_irq();
       _raw_write_unlock_irq();
       schedule_hrtimeout_range() {
         schedule_hrtimeout_range_clock() {
           hrtimer_init_sleeper() {
             __hrtimer_init();
           }
           hrtimer_start_range_ns() {
             _raw_spin_lock_irqsave();
             __hrtimer_start_range_ns() {
               get_nohz_timer_target();
               enqueue_hrtimer();
             }
             _raw_spin_unlock_irqrestore();
           }
           schedule() {
             rcu_note_context_switch();
             raw_spin_rq_lock_nested() {
               _raw_spin_lock();
             }
             update_rq_clock();
             dequeue_task_fair() {
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                   cpuacct_charge();
                   __cgroup_account_cputime() {
                     cgroup_rstat_updated();
                   }
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group();
                 update_min_vruntime();
               }
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group() {
                   reweight_entity();
                 }
                 update_min_vruntime();
               }
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group() {
                   reweight_entity();
                 }
                 update_min_vruntime();
               }
               hrtick_update();
             }
             pick_next_task() {
               pick_next_task_fair() {
                 check_cfs_rq_runtime();
                 pick_next_entity();
                 pick_next_entity();
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 set_next_entity() {
                   clear_buddies();
                   __update_load_avg_se();
                   _raw_spin_lock();
                   _raw_spin_unlock();
                   __update_load_avg_cfs_rq();
                 }
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 set_next_entity() {
                   clear_buddies();
                   __update_load_avg_se();
                   __update_load_avg_cfs_rq();
                 }
               }
             }
             psi_task_switch() {
               psi_flags_change();
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_flags_change();
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
             }
             __traceiter_sched_switch() {
               _raw_spin_lock_irqsave();
               _raw_spin_unlock_irqrestore();
             }
             finish_task_switch.isra.0() {
               raw_spin_rq_unlock() {
                 _raw_spin_unlock();
               }
             }
           }
           hrtimer_active();
           hrtimer_try_to_cancel.part.0() {
             _raw_spin_lock_irqsave();
             __remove_hrtimer();
             _raw_spin_unlock_irqrestore();
           }
         }
       }
       ep_send_events() {
         mutex_lock() {
           __cond_resched();
         }
         _raw_write_lock_irq();
         _raw_write_unlock_irq();
         ep_item_poll.isra.0() {
           sock_poll() {
             tcp_poll() {
               tcp_stream_memory_free();
             }
           }
         }
         ep_done_scan() {
           _raw_write_lock_irq();
           __pm_relax();
           _raw_write_unlock_irq();
         }
         mutex_unlock();
       }
     }
     fput();
   } /* do_epoll_wait */
 } /* __x64_sys_epoll_wait */
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_read() {
   ksys_read() {
     __fdget_pos() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     vfs_read() {
       rw_verify_area() {
         security_file_permission() {
           apparmor_file_permission() {
             aa_file_perm() {
               __rcu_read_lock();
               __rcu_read_unlock();
               aa_sock_file_perm() {
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
               aa_sock_file_perm() {
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
               update_file_ctx() {
                 _raw_spin_lock();
                 aa_label_merge();
                 _raw_spin_unlock();
               }
             }
           }
         }
       }
       __get_task_ioprio();
       sock_read_iter() {
         sock_recvmsg() {
           security_socket_recvmsg() {
             apparmor_socket_recvmsg() {
               aa_sk_perm() {
                 __cond_resched();
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
             }
           }
           inet_recvmsg() {
             tcp_recvmsg() {
               lock_sock_nested() {
                 __cond_resched();
                 _raw_spin_lock_bh();
                 _raw_spin_unlock_bh() {
                   __local_bh_enable_ip();
                 }
               }
               tcp_recvmsg_locked() {
                 skb_copy_datagram_iter() {
                   __skb_datagram_iter() {
                     __cond_resched();
                     simple_copy_to_iter() {
                       __check_object_size() {
                         __check_object_size.part.0() {
                           check_stack_object();
                           is_vmalloc_addr();
                           __virt_addr_valid();
                         }
                       }
                     }
                   }
                 }
                 tcp_rcv_space_adjust() {
                   tcp_mstamp_refresh() {
                     ktime_get();
                   }
                 }
                 sock_rfree() {
                   __sk_mem_reduce_allocated() {
                     mem_cgroup_uncharge_skmem() {
                       __mod_memcg_state() {
                         cgroup_rstat_updated();
                       }
                       refill_stock() {
                         __refill_stock() {
                           drain_stock() {
                             page_counter_uncharge() {
                               page_counter_cancel() {
                                 propagate_protected_usage();
                               }
                               page_counter_cancel() {
                                 propagate_protected_usage();
                               }
                               page_counter_cancel() {
                                 propagate_protected_usage();
                               }
                               page_counter_cancel() {
                                 propagate_protected_usage();
                               }
                               page_counter_cancel() {
                                 propagate_protected_usage();
                               }
                               page_counter_cancel() {
                                 propagate_protected_usage();
                               }
                               page_counter_cancel() {
                                 propagate_protected_usage();
                               }
                             }
                             __rcu_read_lock();
                             __rcu_read_unlock();
                           }
                           __rcu_read_lock();
                           __rcu_read_unlock();
                         }
                       }
                     }
                   }
                 }
                 skb_attempt_defer_free() {
                   skb_release_head_state();
                   skb_release_data() {
                     skb_free_head() {
                       kfree() {
                         __kmem_cache_free();
                       }
                     }
                   }
                   kfree_skbmem() {
                     kmem_cache_free();
                   }
                 }
                 tcp_cleanup_rbuf() {
                   __tcp_cleanup_rbuf();
                 }
               }
               release_sock() {
                 _raw_spin_lock_bh();
                 tcp_release_cb();
                 _raw_spin_unlock_bh() {
                   __local_bh_enable_ip();
                 }
               }
             }
           }
         }
       }
     }
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_write() {
   ksys_write() {
     __fdget_pos() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     vfs_write() {
       rw_verify_area() {
         security_file_permission() {
           apparmor_file_permission() {
             aa_file_perm() {
               __rcu_read_lock();
               __rcu_read_unlock();
               aa_sock_file_perm() {
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
               aa_sock_file_perm() {
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
               update_file_ctx() {
                 _raw_spin_lock();
                 aa_label_merge();
                 _raw_spin_unlock();
               }
             }
           }
         }
       }
       __get_task_ioprio();
       sock_write_iter() {
         sock_sendmsg() {
           security_socket_sendmsg() {
             apparmor_socket_sendmsg() {
               aa_sk_perm() {
                 __cond_resched();
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
             }
           }
           inet_sendmsg() {
             inet_send_prepare();
             tcp_sendmsg() {
               lock_sock_nested() {
                 __cond_resched();
                 _raw_spin_lock_bh();
                 _raw_spin_unlock_bh() {
                   __local_bh_enable_ip();
                 }
               }
               tcp_sendmsg_locked() {
                 tcp_rate_check_app_limited();
                 tcp_send_mss() {
                   tcp_current_mss() {
                     ipv4_mtu();
                     tcp_established_options();
                   }
                 }
                 tcp_stream_memory_free();
                 tcp_stream_alloc_skb() {
                   __alloc_skb() {
                     kmem_cache_alloc_node() {
                       __cond_resched();
                       should_failslab();
                     }
                     kmalloc_reserve() {
                       kmalloc_size_roundup() {
                         kmalloc_slab();
                       }
                       __kmalloc_node_track_caller() {
                         kmalloc_slab();
                         __kmem_cache_alloc_node() {
                           __cond_resched();
                           should_failslab();
                         }
                       }
                     }
                     __build_skb_around();
                   }
                   sk_forced_mem_schedule() {
                     mem_cgroup_charge_skmem() {
                       try_charge_memcg() {
                         consume_stock();
                       }
                       __mod_memcg_state() {
                         cgroup_rstat_updated();
                       }
                     }
                   }
                 }
                 tcp_skb_entail() {
                   tcp_chrono_start();
                 }
                 sk_page_frag_refill() {
                   skb_page_frag_refill();
                 }
                 tcp_wmem_schedule();
                 __check_object_size() {
                   __check_object_size.part.0() {
                     check_stack_object();
                     is_vmalloc_addr();
                     __virt_addr_valid();
                   }
                 }
                 tcp_tx_timestamp();
                 tcp_push() {
                   __tcp_push_pending_frames() {
                     tcp_write_xmit() {
                       ktime_get();
                       tcp_mtu_probe();
                       tcp_tso_segs();
                       tcp_small_queue_check.isra.0();
                       __tcp_transmit_skb() {
                         skb_clone() {
                           __skb_clone() {
                             __copy_skb_header();
                           }
                         }
                         tcp_established_options();
                         skb_push();
                         __tcp_select_window();
                         tcp_options_write();
                         bpf_skops_write_hdr_opt.isra.0();
                         tcp_v4_send_check();
                         cubictcp_cwnd_event();
                         ip_queue_xmit() {
                           __ip_queue_xmit() {
                             __rcu_read_lock();
                             __sk_dst_check() {
                               ipv4_dst_check();
                             }
                             skb_push();
                             ip_local_out() {
                               __ip_local_out() {
                                 ip_send_check();
                                 __rcu_read_lock();
                                 __rcu_read_unlock();
                               }
                               ip_output() {
                                 __rcu_read_lock();
                                 nf_hook_slow() {
                                   apparmor_ip_postroute();
                                 }
                                 __rcu_read_unlock();
                                 ip_finish_output() {
                                   __ip_finish_output() {
                                     ip_finish_output2() {
                                       __dev_queue_xmit() {
                                         qdisc_pkt_len_init();
                                         netdev_core_pick_tx();
                                         validate_xmit_skb() {
                                           netif_skb_features() {
                                             passthru_features_check();
                                             skb_network_protocol();
                                           }
                                           skb_csum_hwoffload_help();
                                           validate_xmit_xfrm();
                                         }
                                         dev_hard_start_xmit() {
                                           veth_xmit [veth]() {
                                             __rcu_read_lock();
                                             skb_clone_tx_timestamp();
                                             __dev_forward_skb() {
                                               __dev_forward_skb2() {
                                                 skb_scrub_packet();
                                                 eth_type_trans();
                                               }
                                             }
                                             __netif_rx() {
                                               netif_rx_internal() {
                                                 enqueue_to_backlog() {
                                                   _raw_spin_lock_irqsave();
                                                   __raise_softirq_irqoff();
                                                   _raw_spin_unlock_irqrestore();
                                                 }
                                               }
                                             }
                                             __rcu_read_unlock();
                                           }
                                         }
                                         __local_bh_enable_ip();
                                       }
                                       __local_bh_enable_ip() {
                                         do_softirq.part.0() {
                                           __do_softirq() {
                                             net_rx_action() {
                                               __usecs_to_jiffies();
                                               __napi_poll() {
                                                 process_backlog() {
                                                   _raw_spin_lock_irq();
                                                   _raw_spin_unlock_irq();
                                                   __rcu_read_lock();
                                                   __netif_receive_skb() {
                                                     __netif_receive_skb_one_core() {
                                                       __netif_receive_skb_core.constprop.0() {
                                                         br_handle_frame [bridge]() {
                                                           br_nf_pre_routing [br_netfilter]() {
                                                             __rcu_read_lock();
                                                             __rcu_read_unlock();
                                                             __rcu_read_lock();
                                                             __rcu_read_unlock();
                                                             __rcu_read_lock();
                                                             __rcu_read_unlock();
                                                             skb_pull_rcsum();
                                                             br_validate_ipv4 [br_netfilter]();
                                                             skb_ext_add() {
                                                               __skb_ext_alloc() {
                                                                 kmem_cache_alloc() {
                                                                   should_failslab();
                                                                 }
                                                               }
                                                             }
                                                             setup_pre_routing [br_netfilter]() {
                                                               brnf_get_logical_dev [br_netfilter]() {
                                                                 __rcu_read_lock();
                                                                 __rcu_read_unlock();
                                                               }
                                                               tcp_wfree() {
                                                                 sk_free();
                                                               }
                                                             }
                                                             __rcu_read_lock();
                                                             nf_hook_slow() {
                                                               ip_sabotage_in [br_netfilter]();
                                                               ipv4_conntrack_defrag [nf_defrag_ipv4]();
                                                               ipv4_conntrack_in [nf_conntrack]() {
                                                                 nf_conntrack_in [nf_conntrack]() {
                                                                   get_l4proto [nf_conntrack]();
                                                                   resolve_normal_ct [nf_conntrack]() {
                                                                     nf_ct_get_tuple [nf_conntrack]();
                                                                     hash_conntrack_raw [nf_conntrack]();
                                                                     __nf_conntrack_find_get [nf_conntrack]() {
                                                                       __rcu_read_lock();
                                                                       __rcu_read_unlock();
                                                                     }
                                                                   }
                                                                   nf_conntrack_handle_packet [nf_conntrack]() {
                                                                     nf_conntrack_tcp_packet [nf_conntrack]() {
                                                                       nf_checksum() {
                                                                         nf_ip_checksum();
                                                                       }
                                                                       _raw_spin_lock_bh();
                                                                       tcp_in_window [nf_conntrack]() {
                                                                         nf_ct_seq_offset [nf_conntrack]();
                                                                       }
                                                                       _raw_spin_unlock_bh() {
                                                                         __local_bh_enable_ip();
                                                                       }
                                                                       __nf_ct_refresh_acct [nf_conntrack]() {
                                                                         nf_ct_acct_add [nf_conntrack]();
                                                                       }
                                                                     }
                                                                   }
                                                                 }
                                                               }
                                                               nf_nat_ipv4_pre_routing [nf_nat]() {
                                                                 nf_nat_inet_fn [nf_nat]();
                                                               }
                                                             }
                                                             __rcu_read_unlock();
                                                             br_nf_pre_routing_finish [br_netfilter]() {
                                                               skb_push();
                                                               br_nf_hook_thresh [br_netfilter]() {
                                                                 nf_hook_slow();
                                                                 br_handle_frame_finish [bridge]() {
                                                                   br_allowed_ingress [bridge]();
                                                                   nbp_switchdev_frame_mark [bridge]();
                                                                   br_fdb_update [bridge]() {
                                                                     fdb_find_rcu [bridge]();
                                                                   }
                                                                   br_fdb_find_rcu [bridge]() {
                                                                     fdb_find_rcu [bridge]();
                                                                   }
                                                                   br_pass_frame_up [bridge]() {
                                                                     br_allowed_egress [bridge]();
                                                                     br_handle_vlan [bridge]();
                                                                     br_multicast_count [bridge]();
                                                                     netif_receive_skb() {
                                                                       skb_defer_rx_timestamp();
                                                                       __rcu_read_lock();
                                                                       __netif_receive_skb() {
                                                                         __netif_receive_skb_one_core() {
                                                                           __netif_receive_skb_core.constprop.0();
                                                                           ip_rcv() {
                                                                             ip_rcv_core();
                                                                             __rcu_read_lock();
                                                                             nf_hook_slow() {
                                                                               ip_sabotage_in [br_netfilter]() {
                                                                                 ip_rcv_finish() {
                                                                                   ip_rcv_finish_core.constprop.0() {
                                                                                     tcp_v4_early_demux() {
                                                                                       __inet_lookup_established() {
                                                                                         inet_ehashfn();
                                                                                       }
                                                                                     }
                                                                                     ip_route_input_noref() {
                                                                                       __rcu_read_lock();
                                                                                       ip_route_input_slow() {
                                                                                         make_kuid() {
                                                                                           map_id_range_down();
                                                                                         }
                                                                                         __rcu_read_lock();
                                                                                         fib_table_lookup() {
                                                                                           fib_lookup_good_nhc();
                                                                                         }
                                                                                         __rcu_read_unlock();
                                                                                         fib_validate_source() {
                                                                                           __fib_validate_source() {
                                                                                             l3mdev_master_ifindex_rcu();
                                                                                             make_kuid() {
                                                                                               map_id_range_down();
                                                                                             }
                                                                                             __rcu_read_lock();
                                                                                             fib_table_lookup() {
                                                                                               fib_lookup_good_nhc();
                                                                                             }
                                                                                             __rcu_read_unlock();
                                                                                             fib_info_nh_uses_dev();
                                                                                           }
                                                                                         }
                                                                                       }
                                                                                       __rcu_read_unlock();
                                                                                     }
                                                                                   }
                                                                                   ip_local_deliver() {
                                                                                     __rcu_read_lock();
                                                                                     nf_hook_slow() {
                                                                                       nft_do_chain_ipv4 [nf_tables]() {
                                                                                         nft_do_chain [nf_tables]() {
                                                                                           expr_call_ops_eval [nf_tables]() {
                                                                                             nft_counter_eval [nf_tables]() {
                                                                                               __local_bh_enable_ip();
                                                                                             }
                                                                                           }
                                                                                           expr_call_ops_eval [nf_tables]() {
                                                                                             nft_immediate_eval [nf_tables]();
                                                                                           }
                                                                                           expr_call_ops_eval [nf_tables]() {
                                                                                             nft_meta_get_eval [nf_tables]();
                                                                                           }
                                                                                           expr_call_ops_eval [nf_tables]() {
                                                                                             nft_meta_get_eval [nf_tables]();
                                                                                           }
                                                                                           expr_call_ops_eval [nf_tables]() {
                                                                                             nft_meta_get_eval [nf_tables]();
                                                                                           }
                                                                                           expr_call_ops_eval [nf_tables]() {
                                                                                             nft_meta_get_eval [nf_tables]();
                                                                                           }
                                                                                         }
                                                                                       }
                                                                                       nf_nat_ipv4_local_in [nf_nat]() {
                                                                                         nf_nat_inet_fn [nf_nat]();
                                                                                       }
                                                                                       nf_confirm [nf_conntrack]();
                                                                                     }
                                                                                     __rcu_read_unlock();
                                                                                     ip_local_deliver_finish() {
                                                                                       __rcu_read_lock();
                                                                                       ip_protocol_deliver_rcu() {
                                                                                         raw_local_deliver() {
                                                                                           raw_v4_input() {
                                                                                             __rcu_read_lock();
                                                                                             __rcu_read_unlock();
                                                                                           }
                                                                                         }
                                                                                         tcp_v4_rcv() {
                                                                                           tcp_inbound_md5_hash() {
                                                                                             tcp_parse_md5sig_option();
                                                                                           }
                                                                                           tcp_filter() {
                                                                                             sk_filter_trim_cap() {
                                                                                               security_sock_rcv_skb() {
                                                                                                 apparmor_socket_sock_rcv_skb();
                                                                                               }
                                                                                               __rcu_read_lock();
                                                                                               __rcu_read_unlock();
                                                                                             }
                                                                                           }
                                                                                           tcp_v4_fill_cb();
                                                                                           _raw_spin_lock();
                                                                                           tcp_v4_do_rcv() {
                                                                                             tcp_rcv_established() {
                                                                                               tcp_mstamp_refresh() {
                                                                                                 ktime_get();
                                                                                               }
                                                                                               inet_sk_rx_dst_set();
                                                                                               tcp_ack() {
                                                                                                 ktime_get_seconds();
                                                                                               }
                                                                                               tcp_urg();
                                                                                               tcp_data_queue() {
                                                                                                 sk_forced_mem_schedule() {
                                                                                                   mem_cgroup_charge_skmem();
                                                                                                 }
                                                                                                 tcp_queue_rcv();
                                                                                                 tcp_event_data_recv();
                                                                                                 tcp_data_ready() {
                                                                                                   sock_def_readable();
                                                                                                 }
                                                                                               }
                                                                                               tcp_check_space();
                                                                                               __tcp_ack_snd_check() {
                                                                                                 tcp_send_ack() {
                                                                                                   __tcp_send_ack.part.0();
                                                                                                 }
                                                                                               }
                                                                                             }
                                                                                           }
                                                                                           _raw_spin_unlock();
                                                                                         }
                                                                                       }
                                                                                       __rcu_read_unlock();
                                                                                     }
                                                                                   }
                                                                                 }
                                                                               }
                                                                             }
                                                                             __rcu_read_unlock();
                                                                           }
                                                                         }
                                                                       }
                                                                       __rcu_read_unlock();
                                                                     }
                                                                   }
                                                                 }
                                                               }
                                                             }
                                                           }
                                                         }
                                                       }
                                                     }
                                                   }
                                                   __rcu_read_unlock();
                                                   _raw_spin_lock_irq();
                                                   _raw_spin_unlock_irq();
                                                   __rcu_read_lock();
                                                   __netif_receive_skb() {
                                                     __netif_receive_skb_one_core() {
                                                       __netif_receive_skb_core.constprop.0();
                                                       ip_rcv() {
                                                         ip_rcv_core() {
                                                           __sock_wfree();
                                                         }
                                                         __rcu_read_lock();
                                                         __rcu_read_unlock();
                                                         ip_rcv_finish_core.constprop.0() {
                                                           tcp_v4_early_demux() {
                                                             __inet_lookup_established() {
                                                               inet_ehashfn();
                                                             }
                                                             ipv4_dst_check();
                                                           }
                                                         }
                                                         ip_local_deliver() {
                                                           __rcu_read_lock();
                                                           __rcu_read_unlock();
                                                           ip_local_deliver_finish() {
                                                             __rcu_read_lock();
                                                             ip_protocol_deliver_rcu() {
                                                               raw_local_deliver() {
                                                                 raw_v4_input() {
                                                                   __rcu_read_lock();
                                                                   __rcu_read_unlock();
                                                                 }
                                                               }
                                                               tcp_v4_rcv() {
                                                                 tcp_inbound_md5_hash() {
                                                                   tcp_parse_md5sig_option();
                                                                 }
                                                                 tcp_filter() {
                                                                   sk_filter_trim_cap() {
                                                                     security_sock_rcv_skb() {
                                                                       apparmor_socket_sock_rcv_skb();
                                                                     }
                                                                     __rcu_read_lock();
                                                                     __rcu_read_unlock();
                                                                   }
                                                                 }
                                                                 tcp_v4_fill_cb();
                                                                 _raw_spin_lock();
                                                                 tcp_add_backlog() {
                                                                   skb_condense();
                                                                 }
                                                                 _raw_spin_unlock();
                                                               }
                                                             }
                                                             __rcu_read_unlock();
                                                           }
                                                         }
                                                       }
                                                     }
                                                   }
                                                   __rcu_read_unlock();
                                                   _raw_spin_lock_irq();
                                                   _raw_spin_unlock_irq();
                                                 }
                                               }
                                             }
                                           }
                                         }
                                       }
                                     }
                                   }
                                 }
                               }
                             }
                             __rcu_read_unlock();
                           }
                         }
                         tcp_update_skb_after_send();
                         tcp_rate_skb_sent();
                       }
                       tcp_event_new_data_sent() {
                         tcp_rbtree_insert();
                         tcp_rearm_rto() {
                           sk_reset_timer() {
                             mod_timer() {
                               lock_timer_base() {
                                 _raw_spin_lock_irqsave();
                               }
                               detach_if_pending();
                               get_nohz_timer_target();
                               calc_wheel_index();
                               enqueue_timer();
                               _raw_spin_unlock_irqrestore();
                             }
                           }
                         }
                         tcp_check_space();
                       }
                       tcp_chrono_stop();
                       tcp_cwnd_validate();
                       tcp_schedule_loss_probe.part.0() {
                         __usecs_to_jiffies();
                         jiffies_to_usecs();
                         __usecs_to_jiffies();
                         sk_reset_timer() {
                           mod_timer();
                         }
                       }
                     }
                   }
                 }
               }
               release_sock() {
                 _raw_spin_lock_bh();
                 __release_sock() {
                   _raw_spin_unlock_bh() {
                     __local_bh_enable_ip();
                   }
                   tcp_v4_do_rcv() {
                     ipv4_dst_check();
                     tcp_rcv_established() {
                       tcp_mstamp_refresh() {
                         ktime_get();
                       }
                       ktime_get_seconds();
                       tcp_ack() {
                         tcp_clean_rtx_queue.constprop.0() {
                           tcp_rack_advance();
                           tcp_rate_skb_delivered();
                           tcp_ack_tstamp();
                           __sk_mem_reclaim() {
                             __sk_mem_reduce_allocated() {
                               mem_cgroup_uncharge_skmem() {
                                 __mod_memcg_state() {
                                   cgroup_rstat_updated();
                                 }
                                 refill_stock() {
                                   __refill_stock() {
                                     drain_stock() {
                                       page_counter_uncharge() {
                                         page_counter_cancel() {
                                           propagate_protected_usage();
                                         }
                                         page_counter_cancel() {
                                           propagate_protected_usage();
                                         }
                                         page_counter_cancel() {
                                           propagate_protected_usage();
                                         }
                                         page_counter_cancel() {
                                           propagate_protected_usage();
                                         }
                                         page_counter_cancel() {
                                           propagate_protected_usage();
                                         }
                                         page_counter_cancel() {
                                           propagate_protected_usage();
                                         }
                                         page_counter_cancel() {
                                           propagate_protected_usage();
                                         }
                                       }
                                       __rcu_read_lock();
                                       __rcu_read_unlock();
                                     }
                                     __rcu_read_lock();
                                     __rcu_read_unlock();
                                   }
                                 }
                               }
                             }
                           }
                           __kfree_skb() {
                             skb_release_head_state();
                             skb_release_data();
                             kfree_skbmem();
                           }
                           tcp_chrono_stop();
                           tcp_ack_update_rtt() {
                             tcp_rtt_estimator() {
                               jiffies_to_usecs();
                             }
                             __usecs_to_jiffies();
                           }
                           cubictcp_acked();
                         }
                         tcp_rack_update_reo_wnd();
                         tcp_schedule_loss_probe() {
                           tcp_schedule_loss_probe.part.0();
                         }
                         tcp_rearm_rto();
                         tcp_newly_delivered();
                         tcp_rate_gen();
                         cubictcp_cong_avoid();
                         tcp_update_pacing_rate();
                         tcp_xmit_recovery();
                       }
                       __kfree_skb() {
                         skb_release_head_state();
                         skb_release_data() {
                           skb_free_head() {
                             kfree() {
                               __kmem_cache_free();
                             }
                           }
                         }
                         kfree_skbmem() {
                           kmem_cache_free();
                         }
                       }
                       tcp_check_space();
                     }
                   }
                   __cond_resched();
                   _raw_spin_lock_bh();
                 }
                 tcp_release_cb();
                 _raw_spin_unlock_bh() {
                   __local_bh_enable_ip();
                 }
               }
             }
           }
         }
       }
     }
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_epoll_wait() {
   ktime_get_ts64();
   timespec64_add_safe();
   do_epoll_wait() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     ep_poll() {
       select_estimate_accuracy() {
         ktime_get_ts64();
         set_normalized_timespec64();
       }
       ep_send_events() {
         mutex_lock() {
           __cond_resched();
         }
         _raw_write_lock_irq();
         _raw_write_unlock_irq();
         ep_item_poll.isra.0() {
           sock_poll() {
             tcp_poll() {
               tcp_stream_memory_free();
             }
           }
         }
         ep_done_scan() {
           _raw_write_lock_irq();
           __pm_relax();
           _raw_write_unlock_irq();
         }
         mutex_unlock();
       }
       _raw_write_lock_irq();
       _raw_write_unlock_irq();
       schedule_hrtimeout_range() {
         schedule_hrtimeout_range_clock() {
           hrtimer_init_sleeper() {
             __hrtimer_init();
           }
           hrtimer_start_range_ns() {
             _raw_spin_lock_irqsave();
             __hrtimer_start_range_ns() {
               get_nohz_timer_target();
               enqueue_hrtimer();
             }
             _raw_spin_unlock_irqrestore();
           }
           schedule() {
             rcu_note_context_switch();
             raw_spin_rq_lock_nested() {
               _raw_spin_lock();
             }
             update_rq_clock();
             dequeue_task_fair() {
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                   cpuacct_charge();
                   __cgroup_account_cputime() {
                     cgroup_rstat_updated();
                   }
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group();
                 update_min_vruntime();
               }
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group() {
                   reweight_entity();
                 }
                 update_min_vruntime();
               }
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group() {
                   reweight_entity();
                 }
                 update_min_vruntime();
               }
               hrtick_update();
             }
             pick_next_task() {
               pick_next_task_fair() {
                 check_cfs_rq_runtime();
                 pick_next_entity();
                 pick_next_entity();
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 set_next_entity() {
                   clear_buddies();
                   __update_load_avg_se();
                   __update_load_avg_cfs_rq();
                 }
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 set_next_entity() {
                   clear_buddies();
                   __update_load_avg_se();
                   __update_load_avg_cfs_rq();
                 }
               }
             }
             psi_task_switch() {
               psi_flags_change();
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_flags_change();
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
             }
             __traceiter_sched_switch() {
               _raw_spin_lock_irqsave();
               _raw_spin_unlock_irqrestore();
             }
             finish_task_switch.isra.0() {
               raw_spin_rq_unlock() {
                 _raw_spin_unlock();
               }
               __mmdrop() {
                 pgd_free() {
                   _raw_spin_lock();
                   _raw_spin_unlock();
                   free_pages() {
                     __free_pages() {
                       free_unref_page() {
                         free_pcp_prepare() {
                           __memcg_kmem_uncharge_page() {
                             obj_cgroup_uncharge_pages() {
                               __rcu_read_lock();
                               __rcu_read_lock();
                               __rcu_read_unlock();
                               __rcu_read_unlock();
                               memcg_account_kmem() {
                                 __mod_memcg_state() {
                                   cgroup_rstat_updated();
                                 }
                               }
                               refill_stock() {
                                 __refill_stock() {
                                   drain_stock() {
                                     page_counter_uncharge() {
                                       page_counter_cancel() {
                                         propagate_protected_usage();
                                       }
                                       page_counter_cancel() {
                                         propagate_protected_usage();
                                       }
                                       page_counter_cancel() {
                                         propagate_protected_usage();
                                       }
                                     }
                                     __rcu_read_lock();
                                     __rcu_read_unlock();
                                   }
                                   __rcu_read_lock();
                                   __rcu_read_unlock();
                                 }
                               }
                               __rcu_read_lock();
                               __rcu_read_unlock();
                             }
                             __rcu_read_lock();
                             __rcu_read_unlock();
                           }
                         }
                         _raw_spin_trylock();
                         free_unref_page_commit();
                         _raw_spin_unlock();
                       }
                     }
                   }
                 }
                 destroy_context_ldt();
                 _raw_spin_lock_irqsave();
                 _raw_spin_unlock_irqrestore();
                 _raw_spin_lock_irqsave();
                 _raw_spin_unlock_irqrestore();
                 _raw_spin_lock_irqsave();
                 _raw_spin_unlock_irqrestore();
                 _raw_spin_lock_irqsave();
                 _raw_spin_unlock_irqrestore();
                 _raw_spin_lock_irqsave();
                 _raw_spin_unlock_irqrestore();
                 free_percpu() {
                   free_percpu.part.0() {
                     _raw_spin_lock_irqsave();
                     vmalloc_to_page();
                     pcpu_free_area() {
                       pcpu_block_update_hint_free() {
                         pcpu_block_update();
                         pcpu_block_update();
                       }
                       pcpu_chunk_relocate();
                     }
                     obj_cgroup_uncharge() {
                       refill_obj_stock();
                     }
                     __rcu_read_lock();
                     __mod_memcg_state() {
                       cgroup_rstat_updated();
                     }
                     __rcu_read_unlock();
                     __rcu_read_lock();
                     __rcu_read_unlock();
                     _raw_spin_unlock_irqrestore();
                   }
                 }
                 _raw_spin_lock_irqsave();
                 _raw_spin_unlock_irqrestore();
                 free_percpu() {
                   free_percpu.part.0() {
                     _raw_spin_lock_irqsave();
                     vmalloc_to_page();
                     pcpu_free_area() {
                       pcpu_block_update_hint_free() {
                         pcpu_block_update();
                         pcpu_block_update();
                       }
                       pcpu_chunk_relocate();
                     }
                     obj_cgroup_uncharge() {
                       refill_obj_stock();
                     }
                     __rcu_read_lock();
                     __mod_memcg_state() {
                       cgroup_rstat_updated();
                     }
                     __rcu_read_unlock();
                     __rcu_read_lock();
                     __rcu_read_unlock();
                     _raw_spin_unlock_irqrestore();
                   }
                 }
                 _raw_spin_lock_irqsave();
                 _raw_spin_unlock_irqrestore();
                 free_percpu() {
                   free_percpu.part.0() {
                     _raw_spin_lock_irqsave();
                     vmalloc_to_page();
                     pcpu_free_area() {
                       pcpu_block_update_hint_free() {
                         pcpu_block_update();
                         pcpu_block_update();
                       }
                       pcpu_chunk_relocate();
                     }
                     obj_cgroup_uncharge() {
                       refill_obj_stock();
                     }
                     __rcu_read_lock();
                     __mod_memcg_state() {
                       cgroup_rstat_updated();
                     }
                     __rcu_read_unlock();
                     __rcu_read_lock();
                     __rcu_read_unlock();
                     _raw_spin_unlock_irqrestore();
                   }
                 }
                 _raw_spin_lock_irqsave();
                 _raw_spin_unlock_irqrestore();
                 free_percpu() {
                   free_percpu.part.0() {
                     _raw_spin_lock_irqsave();
                     vmalloc_to_page();
                     pcpu_free_area() {
                       pcpu_block_update_hint_free() {
                         pcpu_block_update();
                         pcpu_block_update();
                       }
                       pcpu_chunk_relocate();
                     }
                     obj_cgroup_uncharge() {
                       refill_obj_stock();
                     }
                     __rcu_read_lock();
                     __mod_memcg_state() {
                       cgroup_rstat_updated();
                     }
                     __rcu_read_unlock();
                     __rcu_read_lock();
                     __rcu_read_unlock();
                     _raw_spin_unlock_irqrestore();
                   }
                 }
                 kmem_cache_free() {
                   obj_cgroup_uncharge() {
                     refill_obj_stock();
                   }
                   mod_objcg_state();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
               }
             }
           }
           hrtimer_active();
           hrtimer_try_to_cancel.part.0() {
             _raw_spin_lock_irqsave();
             __remove_hrtimer();
             _raw_spin_unlock_irqrestore();
           }
         }
       }
       ep_send_events() {
         mutex_lock() {
           __cond_resched();
         }
         _raw_write_lock_irq();
         _raw_write_unlock_irq();
         ep_item_poll.isra.0() {
           sock_poll() {
             tcp_poll() {
               tcp_stream_memory_free();
             }
           }
         }
         ep_done_scan() {
           _raw_write_lock_irq();
           __pm_relax();
           _raw_write_unlock_irq();
         }
         mutex_unlock();
       }
     }
     fput();
   } /* do_epoll_wait */
 } /* __x64_sys_epoll_wait */
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_read() {
   ksys_read() {
     __fdget_pos() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     vfs_read() {
       rw_verify_area() {
         security_file_permission() {
           apparmor_file_permission() {
             aa_file_perm() {
               __rcu_read_lock();
               aa_label_is_subset();
               __rcu_read_unlock();
             }
           }
         }
       }
       __get_task_ioprio();
       sock_read_iter() {
         sock_recvmsg() {
           security_socket_recvmsg() {
             apparmor_socket_recvmsg() {
               aa_sk_perm() {
                 __cond_resched();
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
             }
           }
           inet_recvmsg() {
             tcp_recvmsg() {
               lock_sock_nested() {
                 __cond_resched();
                 _raw_spin_lock_bh();
                 _raw_spin_unlock_bh() {
                   __local_bh_enable_ip() {
                     do_softirq.part.0() {
                       __kthread_should_park();
                     }
                   }
                 }
               }
               tcp_recvmsg_locked() {
                 sock_rfree() {
                   __sk_mem_reduce_allocated() {
                     mem_cgroup_uncharge_skmem() {
                       __mod_memcg_state() {
                         cgroup_rstat_updated();
                       }
                       refill_stock() {
                         __refill_stock() {
                           drain_stock() {
                             page_counter_uncharge() {
                               page_counter_cancel() {
                                 propagate_protected_usage();
                               }
                               page_counter_cancel() {
                                 propagate_protected_usage();
                               }
                               page_counter_cancel() {
                                 propagate_protected_usage();
                               }
                               page_counter_cancel() {
                                 propagate_protected_usage();
                               }
                               page_counter_cancel() {
                                 propagate_protected_usage();
                               }
                               page_counter_cancel() {
                                 propagate_protected_usage();
                               }
                               page_counter_cancel() {
                                 propagate_protected_usage();
                               }
                             }
                             __rcu_read_lock();
                             __rcu_read_unlock();
                           }
                           __rcu_read_lock();
                           __rcu_read_unlock();
                         }
                       }
                     }
                   }
                 }
                 skb_attempt_defer_free() {
                   skb_release_head_state();
                   skb_release_data();
                   kfree_skbmem();
                 }
                 tcp_cleanup_rbuf() {
                   __tcp_cleanup_rbuf();
                 }
               }
               release_sock() {
                 _raw_spin_lock_bh();
                 tcp_release_cb();
                 _raw_spin_unlock_bh() {
                   __local_bh_enable_ip() {
                     do_softirq.part.0() {
                       __kthread_should_park();
                     }
                   }
                 }
               }
             }
           }
         }
       }
     }
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_epoll_ctl() {
   do_epoll_ctl() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     mutex_lock() {
       __cond_resched();
     }
     ep_remove() {
       __rcu_read_lock();
       remove_wait_queue() {
         _raw_spin_lock_irqsave();
         _raw_spin_unlock_irqrestore();
       }
       __rcu_read_unlock();
       kmem_cache_free() {
         obj_cgroup_uncharge() {
           refill_obj_stock() {
             drain_obj_stock() {
               __rcu_read_lock();
               __mod_memcg_lruvec_state() {
                 cgroup_rstat_updated();
               }
               __rcu_read_unlock();
             }
             __rcu_read_lock();
             __rcu_read_unlock();
             __rcu_read_lock();
             __rcu_read_unlock();
           }
         }
         mod_objcg_state();
         __rcu_read_lock();
         __rcu_read_unlock();
       }
       _raw_spin_lock();
       _raw_spin_unlock();
       kmem_cache_free() {
         obj_cgroup_uncharge() {
           refill_obj_stock();
         }
         mod_objcg_state();
         __rcu_read_lock();
         __rcu_read_unlock();
       }
       _raw_write_lock_irq();
       _raw_write_unlock_irq();
       wakeup_source_unregister();
       call_rcu() {
         __call_rcu_common.constprop.0() {
           rcu_segcblist_enqueue();
         }
       }
     }
     mutex_unlock();
     fput();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_close() {
   close_fd() {
     _raw_spin_lock();
     pick_file();
     _raw_spin_unlock();
     filp_close() {
       dnotify_flush();
       locks_remove_posix();
       fput() {
         task_work_add() {
           kick_process();
         }
       }
     }
   }
 }
 exit_to_user_mode_prepare() {
   exit_to_user_mode_loop() {
     task_work_run() {
       _raw_spin_lock_irq();
       _raw_spin_unlock_irq();
       ____fput() {
         __fput() {
           __cond_resched();
           locks_remove_file();
           ima_file_free();
           sock_close() {
             __sock_release() {
               down_write() {
                 __cond_resched();
               }
               inet_release() {
                 ip_mc_drop_socket();
                 tcp_close() {
                   lock_sock_nested() {
                     __cond_resched();
                     _raw_spin_lock_bh();
                     _raw_spin_unlock_bh() {
                       __local_bh_enable_ip() {
                         do_softirq.part.0() {
                           __kthread_should_park();
                         }
                       }
                     }
                   }
                   __tcp_close() {
                     tcp_set_state() {
                       inet_sk_state_store();
                     }
                     tcp_send_fin() {
                       __alloc_skb() {
                         kmem_cache_alloc_node() {
                           __cond_resched();
                           should_failslab();
                         }
                         kmalloc_reserve() {
                           kmalloc_size_roundup() {
                             kmalloc_slab();
                           }
                           __kmalloc_node_track_caller() {
                             kmalloc_slab();
                             __kmem_cache_alloc_node() {
                               __cond_resched();
                               should_failslab();
                             }
                           }
                         }
                         __build_skb_around();
                       }
                       sk_forced_mem_schedule() {
                         mem_cgroup_charge_skmem() {
                           try_charge_memcg() {
                             consume_stock();
                           }
                           __mod_memcg_state() {
                             cgroup_rstat_updated();
                           }
                         }
                       }
                       tcp_current_mss() {
                         ipv4_mtu();
                         tcp_established_options();
                       }
                       __tcp_push_pending_frames() {
                         tcp_write_xmit() {
                           ktime_get();
                           tcp_mtu_probe();
                           tcp_tso_segs();
                           tcp_small_queue_check.isra.0();
                           __tcp_transmit_skb() {
                             skb_clone() {
                               __skb_clone() {
                                 __copy_skb_header();
                               }
                             }
                             tcp_established_options();
                             skb_push();
                             __tcp_select_window();
                             tcp_options_write();
                             bpf_skops_write_hdr_opt.isra.0();
                             tcp_v4_send_check();
                             ip_queue_xmit() {
                               __ip_queue_xmit() {
                                 __rcu_read_lock();
                                 __sk_dst_check() {
                                   ipv4_dst_check();
                                 }
                                 skb_push();
                                 ip_local_out() {
                                   __ip_local_out() {
                                     ip_send_check();
                                     __rcu_read_lock();
                                     __rcu_read_unlock();
                                   }
                                   ip_output() {
                                     __rcu_read_lock();
                                     nf_hook_slow() {
                                       apparmor_ip_postroute();
                                     }
                                     __rcu_read_unlock();
                                     ip_finish_output() {
                                       __ip_finish_output() {
                                         ip_finish_output2() {
                                           __dev_queue_xmit() {
                                             qdisc_pkt_len_init();
                                             netdev_core_pick_tx();
                                             validate_xmit_skb() {
                                               netif_skb_features() {
                                                 passthru_features_check();
                                                 skb_network_protocol();
                                               }
                                               skb_csum_hwoffload_help();
                                               validate_xmit_xfrm();
                                             }
                                             dev_hard_start_xmit() {
                                               veth_xmit [veth]() {
                                                 __rcu_read_lock();
                                                 skb_clone_tx_timestamp();
                                                 __dev_forward_skb() {
                                                   __dev_forward_skb2() {
                                                     skb_scrub_packet();
                                                     eth_type_trans();
                                                   }
                                                 }
                                                 __netif_rx() {
                                                   netif_rx_internal() {
                                                     enqueue_to_backlog() {
                                                       _raw_spin_lock_irqsave();
                                                       __raise_softirq_irqoff();
                                                       _raw_spin_unlock_irqrestore();
                                                     }
                                                   }
                                                 }
                                                 __rcu_read_unlock();
                                               }
                                             }
                                             __local_bh_enable_ip();
                                           }
                                           __local_bh_enable_ip() {
                                             do_softirq.part.0() {
                                               __kthread_should_park();
                                             }
                                           }
                                         }
                                       }
                                     }
                                   }
                                 }
                                 __rcu_read_unlock();
                               }
                             }
                             tcp_update_skb_after_send();
                             tcp_rate_skb_sent();
                           }
                           tcp_event_new_data_sent() {
                             tcp_rbtree_insert();
                             tcp_rearm_rto() {
                               sk_reset_timer() {
                                 mod_timer() {
                                   lock_timer_base() {
                                     _raw_spin_lock_irqsave();
                                   }
                                   calc_wheel_index();
                                   detach_if_pending();
                                   get_nohz_timer_target();
                                   enqueue_timer();
                                   _raw_spin_unlock_irqrestore();
                                 }
                               }
                             }
                             tcp_check_space();
                           }
                           tcp_chrono_stop();
                           tcp_cwnd_validate();
                           tcp_schedule_loss_probe.part.0() {
                             __usecs_to_jiffies();
                             jiffies_to_usecs();
                             __usecs_to_jiffies();
                             sk_reset_timer() {
                               mod_timer();
                             }
                           }
                         }
                       }
                     }
                     sk_stream_wait_close();
                     _raw_write_lock_bh();
                     _raw_write_unlock_bh() {
                       __local_bh_enable_ip() {
                         do_softirq.part.0() {
                           __kthread_should_park();
                         }
                       }
                     }
                     _raw_spin_lock();
                     __release_sock();
                     tcp_check_oom();
                     _raw_spin_unlock();
                     __local_bh_enable_ip() {
                       do_softirq.part.0() {
                         __kthread_should_park();
                       }
                     }
                   }
                   release_sock() {
                     _raw_spin_lock_bh();
                     tcp_release_cb();
                     _raw_spin_unlock_bh() {
                       __local_bh_enable_ip() {
                         do_softirq.part.0() {
                           __kthread_should_park();
                         }
                       }
                     }
                   }
                 }
               }
               up_write();
               module_put();
             }
           }
           module_put();
           put_pid();
           dput() {
             __cond_resched();
             __rcu_read_lock();
             _raw_spin_lock();
             __rcu_read_unlock();
             _raw_spin_trylock();
             __dentry_kill() {
               dentry_unlink_inode() {
                 _raw_spin_unlock();
                 _raw_spin_unlock();
                 iput() {
                   _raw_spin_lock();
                   _raw_spin_unlock();
                   evict() {
                     inode_wait_for_writeback() {
                       _raw_spin_lock();
                       __inode_wait_for_writeback() {
                         bit_waitqueue();
                       }
                       _raw_spin_unlock();
                     }
                     truncate_inode_pages_final() {
                       truncate_inode_pages_range();
                     }
                     clear_inode() {
                       _raw_spin_lock_irq();
                       _raw_spin_unlock_irq();
                     }
                     _raw_spin_lock();
                     wake_up_bit();
                     _raw_spin_unlock();
                     destroy_inode() {
                       __destroy_inode() {
                         inode_has_buffers();
                         security_inode_free() {
                           integrity_inode_free();
                           hook_inode_free_security();
                           apparmor_inode_free_security();
                           call_rcu() {
                             __call_rcu_common.constprop.0() {
                               rcu_segcblist_enqueue();
                             }
                           }
                         }
                         __fsnotify_inode_delete() {
                           fsnotify_destroy_marks() {
                             fsnotify_grab_connector() {
                               __srcu_read_lock();
                               __srcu_read_unlock();
                             }
                           }
                         }
                         locks_free_lock_context();
                       }
                       call_rcu() {
                         __call_rcu_common.constprop.0() {
                           rcu_segcblist_enqueue();
                         }
                       }
                     }
                   }
                 }
               }
               _raw_spin_lock();
               _raw_spin_unlock();
               dentry_free() {
                 kmem_cache_free() {
                   obj_cgroup_uncharge() {
                     refill_obj_stock();
                   }
                   mod_objcg_state();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
               }
               __cond_resched();
             }
           }
           mntput() {
             mntput_no_expire() {
               __rcu_read_lock();
               __rcu_read_unlock();
             }
           }
           security_file_free() {
             apparmor_file_free_security();
             kmem_cache_free();
           }
           call_rcu() {
             __call_rcu_common.constprop.0() {
               rcu_segcblist_enqueue();
             }
           }
         }
       }
       __cond_resched();
     }
     mem_cgroup_handle_over_high();
     blkcg_maybe_throttle_current();
   }
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_epoll_wait() {
   ktime_get_ts64();
   timespec64_add_safe();
   do_epoll_wait() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     ep_poll() {
       select_estimate_accuracy() {
         ktime_get_ts64();
         set_normalized_timespec64();
       }
       _raw_write_lock_irq();
       _raw_write_unlock_irq();
       schedule_hrtimeout_range() {
         schedule_hrtimeout_range_clock() {
           hrtimer_init_sleeper() {
             __hrtimer_init();
           }
           hrtimer_start_range_ns() {
             _raw_spin_lock_irqsave();
             __hrtimer_start_range_ns() {
               get_nohz_timer_target();
               enqueue_hrtimer();
             }
             _raw_spin_unlock_irqrestore();
           }
           schedule() {
             rcu_note_context_switch();
             raw_spin_rq_lock_nested() {
               _raw_spin_lock();
             }
             update_rq_clock();
             dequeue_task_fair() {
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                   cpuacct_charge();
                   __cgroup_account_cputime() {
                     cgroup_rstat_updated();
                   }
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group();
                 update_min_vruntime();
               }
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group() {
                   reweight_entity();
                 }
                 update_min_vruntime();
               }
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group() {
                   reweight_entity();
                 }
                 update_min_vruntime();
               }
               hrtick_update();
             }
             pick_next_task() {
               pick_next_task_fair() {
                 check_cfs_rq_runtime();
                 pick_next_entity();
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 set_next_entity() {
                   clear_buddies();
                   __update_load_avg_se();
                   __update_load_avg_cfs_rq();
                 }
               }
             }
             psi_task_switch() {
               psi_flags_change();
               psi_flags_change();
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
             }
             __traceiter_sched_switch() {
               _raw_spin_lock_irqsave();
               _raw_spin_unlock_irqrestore();
             }
             finish_task_switch.isra.0() {
               raw_spin_rq_unlock() {
                 _raw_spin_unlock();
               }
             }
           }
           hrtimer_active();
         }
       }
       _raw_write_lock_irq();
       _raw_write_unlock_irq();
     }
     fput();
   } /* do_epoll_wait */
 } /* __x64_sys_epoll_wait */
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_open() {
   do_sys_openat2() {
     getname() {
       getname_flags.part.0() {
         kmem_cache_alloc() {
           __cond_resched();
           should_failslab();
         }
         __check_object_size() {
           __check_object_size.part.0() {
             check_stack_object();
             is_vmalloc_addr();
             __virt_addr_valid();
             __check_heap_object();
           }
         }
       }
     }
     get_unused_fd_flags() {
       alloc_fd() {
         _raw_spin_lock();
         expand_files();
         _raw_spin_unlock();
       }
     }
     do_filp_open() {
       path_openat() {
         alloc_empty_file() {
           __alloc_file() {
             kmem_cache_alloc() {
               __cond_resched();
               should_failslab();
               __rcu_read_lock();
               __get_obj_cgroup_from_memcg() {
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               __rcu_read_unlock();
               obj_cgroup_charge() {
                 consume_obj_stock();
                 __rcu_read_lock();
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 __rcu_read_unlock();
                 try_charge_memcg() {
                   consume_stock();
                   page_counter_try_charge() {
                     propagate_protected_usage();
                     propagate_protected_usage();
                     propagate_protected_usage();
                   }
                   refill_stock() {
                     __refill_stock() {
                       drain_stock() {
                         page_counter_uncharge() {
                           page_counter_cancel() {
                             propagate_protected_usage();
                           }
                           page_counter_cancel() {
                             propagate_protected_usage();
                           }
                           page_counter_cancel() {
                             propagate_protected_usage();
                           }
                           page_counter_cancel() {
                             propagate_protected_usage();
                           }
                           page_counter_cancel() {
                             propagate_protected_usage();
                           }
                           page_counter_cancel() {
                             propagate_protected_usage();
                           }
                         }
                         __rcu_read_lock();
                         __rcu_read_unlock();
                       }
                       __rcu_read_lock();
                       __rcu_read_unlock();
                     }
                   }
                 }
                 memcg_account_kmem() {
                   __mod_memcg_state() {
                     cgroup_rstat_updated() {
                       _raw_spin_lock_irqsave();
                       _raw_spin_unlock_irqrestore();
                     }
                   }
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 refill_obj_stock() {
                   drain_obj_stock() {
                     __rcu_read_lock();
                     __mod_memcg_lruvec_state() {
                       cgroup_rstat_updated();
                     }
                     __rcu_read_unlock();
                   }
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   obj_cgroup_uncharge_pages() {
                     __rcu_read_lock();
                     __rcu_read_lock();
                     __rcu_read_unlock();
                     __rcu_read_unlock();
                     memcg_account_kmem() {
                       __mod_memcg_state() {
                         cgroup_rstat_updated();
                       }
                     }
                     refill_stock() {
                       __refill_stock();
                     }
                     __rcu_read_lock();
                     __rcu_read_unlock();
                   }
                 }
               }
               __rcu_read_lock();
               __rcu_read_unlock();
               mod_objcg_state();
               __rcu_read_lock();
               __rcu_read_unlock();
             }
             security_file_alloc() {
               kmem_cache_alloc() {
                 __cond_resched();
                 should_failslab();
               }
               hook_file_alloc_security();
               apparmor_file_alloc_security() {
                 __cond_resched();
               }
             }
             __mutex_init();
           }
         }
         path_init() {
           __rcu_read_lock();
           nd_jump_root() {
             set_root();
           }
         }
         link_path_walk.part.0.constprop.0() {
           mnt_user_ns();
           inode_permission() {
             ovl_permission [overlay]() {
               ovl_inode_upper [overlay]();
               ovl_i_path_real [overlay]();
               generic_permission() {
                 get_cached_acl_rcu() {
                   do_ovl_get_acl [overlay]() {
                     ovl_i_path_real [overlay]();
                     get_cached_acl_rcu();
                   }
                 }
               }
               ovl_override_creds [overlay]() {
                 override_creds();
               }
               mnt_user_ns();
               inode_permission() {
                 generic_permission();
                 security_inode_permission();
               }
               revert_creds();
             }
             security_inode_permission();
           }
           walk_component() {
             lookup_fast() {
               __d_lookup_rcu();
             }
             step_into() {
               __lookup_mnt();
             }
           }
           mnt_user_ns();
           inode_permission() {
             generic_permission();
             security_inode_permission();
           }
           walk_component() {
             lookup_fast() {
               __d_lookup_rcu();
               pid_revalidate() {
                 __rcu_read_lock();
                 pid_task();
                 task_dump_owner() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 security_task_to_inode();
                 __rcu_read_unlock();
               }
             }
             step_into();
           }
           mnt_user_ns();
           inode_permission() {
             proc_pid_permission() {
               get_pid_task() {
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               generic_permission();
             }
             security_inode_permission();
           }
         }
         open_last_lookups() {
           lookup_fast() {
             __d_lookup_rcu();
             pid_revalidate() {
               __rcu_read_lock();
               pid_task();
               task_dump_owner() {
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 _raw_spin_lock();
                 _raw_spin_unlock();
               }
               security_task_to_inode();
               __rcu_read_unlock();
             }
           }
           step_into();
         }
         do_open() {
           complete_walk() {
             try_to_unlazy() {
               legitimize_links();
               __legitimize_path() {
                 __legitimize_mnt();
               }
               __rcu_read_unlock();
             }
           }
           mnt_user_ns();
           may_open() {
             inode_permission() {
               generic_permission();
               security_inode_permission();
             }
           }
           vfs_open() {
             do_dentry_open() {
               path_get() {
                 mntget();
               }
               try_module_get();
               security_file_open() {
                 hook_file_open();
                 apparmor_file_open() {
                   mnt_user_ns();
                   aa_path_perm() {
                     aa_get_buffer() {
                       _raw_spin_trylock();
                       _raw_spin_unlock();
                     }
                     aa_label_next_confined();
                     profile_path_perm.part.0() {
                       path_name() {
                         aa_path_name() {
                           d_namespace_path.constprop.0() {
                             d_absolute_path() {
                               prepend_path() {
                                 __rcu_read_lock();
                                 __rcu_read_lock();
                                 prepend() {
                                   prepend_copy() {
                                     copy_from_kernel_nofault() {
                                       copy_from_kernel_nofault_allowed();
                                     }
                                   }
                                 }
                                 prepend() {
                                   prepend_copy() {
                                     copy_from_kernel_nofault() {
                                       copy_from_kernel_nofault_allowed();
                                     }
                                   }
                                 }
                                 prepend() {
                                   prepend_copy() {
                                     copy_from_kernel_nofault() {
                                       copy_from_kernel_nofault_allowed();
                                     }
                                   }
                                 }
                                 __rcu_read_unlock();
                                 __rcu_read_unlock();
                               }
                             }
                             our_mnt();
                             our_mnt();
                           }
                         }
                       }
                       __aa_path_perm() {
                         aa_str_perms() {
                           aa_dfa_match();
                         }
                         aa_audit_file();
                       }
                     }
                     aa_label_next_confined();
                     aa_put_buffer() {
                       _raw_spin_trylock();
                       _raw_spin_unlock();
                     }
                   }
                 }
               }
               proc_single_open() {
                 single_open() {
                   kmalloc_trace() {
                     __kmem_cache_alloc_node() {
                       __cond_resched();
                       should_failslab();
                       __rcu_read_lock();
                       __get_obj_cgroup_from_memcg() {
                         __rcu_read_lock();
                         __rcu_read_unlock();
                       }
                       __rcu_read_unlock();
                       obj_cgroup_charge() {
                         consume_obj_stock();
                       }
                       __rcu_read_lock();
                       __rcu_read_unlock();
                       mod_objcg_state();
                       __rcu_read_lock();
                       __rcu_read_unlock();
                     }
                   }
                   seq_open() {
                     kmem_cache_alloc() {
                       __cond_resched();
                       should_failslab();
                       __rcu_read_lock();
                       __get_obj_cgroup_from_memcg() {
                         __rcu_read_lock();
                         __rcu_read_unlock();
                       }
                       __rcu_read_unlock();
                       obj_cgroup_charge() {
                         consume_obj_stock();
                       }
                       __rcu_read_lock();
                       __rcu_read_unlock();
                       mod_objcg_state();
                       __rcu_read_lock();
                       __rcu_read_unlock();
                     }
                     __mutex_init();
                   }
                 }
               }
               file_ra_state_init() {
                 inode_to_bdi();
               }
             }
           }
           ima_file_check() {
             security_current_getsecid_subj() {
               apparmor_current_getsecid_subj();
             }
             process_measurement() {
               mnt_user_ns();
               ima_get_action() {
                 ima_match_policy() {
                   ima_template_desc_current();
                   __rcu_read_lock();
                   ima_match_rules();
                   ima_match_rules();
                   __rcu_read_unlock();
                 }
               }
               down_write() {
                 __cond_resched();
               }
               up_write();
             }
           }
         }
         terminate_walk() {
           dput() {
             __cond_resched();
             __rcu_read_lock();
             __rcu_read_unlock();
           }
           mntput() {
             mntput_no_expire() {
               __rcu_read_lock();
               __rcu_read_unlock();
             }
           }
         }
       }
     }
     fd_install();
     putname() {
       kmem_cache_free();
     }
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_read() {
   ksys_read() {
     __fdget_pos() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
       mutex_lock() {
         __cond_resched();
       }
     }
     vfs_read() {
       rw_verify_area() {
         security_file_permission() {
           apparmor_file_permission() {
             aa_file_perm() {
               __rcu_read_lock();
               aa_label_is_subset();
               __rcu_read_unlock();
             }
           }
         }
       }
       seq_read() {
         __get_task_ioprio();
         seq_read_iter() {
           mutex_lock() {
             __cond_resched();
           }
           kvmalloc_node() {
             __kmalloc_node() {
               kmalloc_slab();
               __kmem_cache_alloc_node() {
                 __cond_resched();
                 should_failslab();
                 __rcu_read_lock();
                 __get_obj_cgroup_from_memcg() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_unlock();
                 obj_cgroup_charge() {
                   consume_obj_stock();
                   __rcu_read_lock();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   __rcu_read_unlock();
                   try_charge_memcg() {
                     consume_stock();
                   }
                   memcg_account_kmem() {
                     __mod_memcg_state() {
                       cgroup_rstat_updated();
                     }
                   }
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   refill_obj_stock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 mod_objcg_state() {
                   __rcu_read_lock();
                   __mod_memcg_lruvec_state() {
                     cgroup_rstat_updated();
                   }
                   __rcu_read_unlock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
             }
           }
           single_start();
           proc_single_show() {
             get_pid_task() {
               __rcu_read_lock();
               __rcu_read_unlock();
             }
             proc_tgid_stat() {
               do_task_stat() {
                 ptrace_may_access() {
                   _raw_spin_lock();
                   __ptrace_may_access();
                   _raw_spin_unlock();
                 }
                 get_task_mm() {
                   _raw_spin_lock();
                   _raw_spin_unlock();
                 }
                 task_vsize();
                 __lock_task_sighand() {
                   __rcu_read_lock();
                   _raw_spin_lock_irqsave();
                   __rcu_read_unlock();
                 }
                 collect_sigign_sigcatch.constprop.0.isra.0();
                 thread_group_cputime_adjusted() {
                   thread_group_cputime() {
                     task_sched_runtime() {
                       task_rq_lock() {
                         _raw_spin_lock_irqsave();
                         raw_spin_rq_lock_nested() {
                           _raw_spin_lock();
                         }
                       }
                       update_rq_clock();
                       update_curr_fair() {
                         update_curr() {
                           update_min_vruntime();
                           cpuacct_charge();
                           __cgroup_account_cputime() {
                             cgroup_rstat_updated();
                           }
                         }
                       }
                       raw_spin_rq_unlock() {
                         _raw_spin_unlock();
                       }
                       _raw_spin_unlock_irqrestore();
                     }
                     __rcu_read_lock();
                     __rcu_read_unlock();
                   }
                   cputime_adjust() {
                     _raw_spin_lock_irqsave();
                     _raw_spin_unlock_irqrestore();
                   }
                 }
                 __task_pid_nr_ns() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __task_pid_nr_ns() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __task_pid_nr_ns() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 _raw_spin_unlock_irqrestore();
                 task_prio();
                 nsec_to_clock_t();
                 pid_nr_ns();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_puts();
                 proc_task_name() {
                   __get_task_comm() {
                     _raw_spin_lock();
                     _raw_spin_unlock();
                   }
                   seq_printf();
                 }
                 seq_puts();
                 seq_putc();
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 nsec_to_clock_t();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 nsec_to_clock_t();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 nsec_to_clock_t();
                 seq_put_decimal_ll();
                 nsec_to_clock_t();
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 nsec_to_clock_t();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 nsec_to_clock_t();
                 seq_put_decimal_ll();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ll();
                 seq_putc();
                 mmput() {
                   __cond_resched();
                 }
               }
             }
           }
           single_next();
           single_stop();
           __check_object_size() {
             __check_object_size.part.0() {
               check_stack_object();
               is_vmalloc_addr();
               __virt_addr_valid();
               __check_heap_object();
             }
           }
           mutex_unlock();
         }
       }
     }
     __f_unlock_pos() {
       mutex_unlock();
     }
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_close() {
   close_fd() {
     _raw_spin_lock();
     pick_file();
     _raw_spin_unlock();
     filp_close() {
       dnotify_flush();
       locks_remove_posix();
       fput() {
         task_work_add() {
           kick_process();
         }
       }
     }
   }
 }
 exit_to_user_mode_prepare() {
   exit_to_user_mode_loop() {
     task_work_run() {
       _raw_spin_lock_irq();
       _raw_spin_unlock_irq();
       ____fput() {
         __fput() {
           __cond_resched();
           locks_remove_file();
           ima_file_free() {
             integrity_iint_find();
           }
           single_release() {
             kvfree() {
               is_vmalloc_addr();
               kfree() {
                 __kmem_cache_free() {
                   obj_cgroup_uncharge() {
                     refill_obj_stock() {
                       obj_cgroup_uncharge_pages() {
                         __rcu_read_lock();
                         __rcu_read_lock();
                         __rcu_read_unlock();
                         __rcu_read_unlock();
                         memcg_account_kmem() {
                           __mod_memcg_state() {
                             cgroup_rstat_updated();
                           }
                         }
                         refill_stock() {
                           __refill_stock();
                         }
                         __rcu_read_lock();
                         __rcu_read_unlock();
                       }
                     }
                   }
                   mod_objcg_state();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
               }
             }
             kmem_cache_free() {
               obj_cgroup_uncharge() {
                 refill_obj_stock();
               }
               mod_objcg_state() {
                 __rcu_read_lock();
                 __mod_memcg_lruvec_state() {
                   cgroup_rstat_updated();
                 }
                 __rcu_read_unlock();
               }
               __rcu_read_lock();
               __rcu_read_unlock();
             }
             kfree() {
               __kmem_cache_free() {
                 obj_cgroup_uncharge() {
                   refill_obj_stock();
                 }
                 mod_objcg_state();
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
             }
           }
           module_put();
           put_pid();
           dput() {
             __cond_resched();
             __rcu_read_lock();
             _raw_spin_lock();
             __rcu_read_unlock();
             pid_delete_dentry();
             _raw_spin_unlock();
           }
           mntput() {
             mntput_no_expire() {
               __rcu_read_lock();
               __rcu_read_unlock();
             }
           }
           security_file_free() {
             apparmor_file_free_security();
             kmem_cache_free();
           }
           call_rcu() {
             __call_rcu_common.constprop.0() {
               rcu_segcblist_enqueue();
             }
           }
         }
       }
       __cond_resched();
     }
     mem_cgroup_handle_over_high();
     blkcg_maybe_throttle_current();
   }
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_epoll_wait() {
   ktime_get_ts64();
   timespec64_add_safe();
   do_epoll_wait() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     ep_poll() {
       select_estimate_accuracy() {
         ktime_get_ts64();
         set_normalized_timespec64();
       }
       _raw_write_lock_irq();
       _raw_write_unlock_irq();
       schedule_hrtimeout_range() {
         schedule_hrtimeout_range_clock() {
           hrtimer_init_sleeper() {
             __hrtimer_init();
           }
           hrtimer_start_range_ns() {
             _raw_spin_lock_irqsave();
             __hrtimer_start_range_ns() {
               get_nohz_timer_target();
               enqueue_hrtimer();
             }
             _raw_spin_unlock_irqrestore();
           }
           schedule() {
             rcu_note_context_switch();
             raw_spin_rq_lock_nested() {
               _raw_spin_lock();
             }
             update_rq_clock();
             dequeue_task_fair() {
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                   cpuacct_charge();
                   __cgroup_account_cputime() {
                     cgroup_rstat_updated();
                   }
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group();
                 update_min_vruntime();
               }
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group() {
                   reweight_entity();
                 }
                 update_min_vruntime();
               }
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group() {
                   reweight_entity();
                 }
                 update_min_vruntime();
               }
               hrtick_update();
             }
             pick_next_task() {
               pick_next_task_fair() {
                 newidle_balance() {
                   __rcu_read_lock();
                   __msecs_to_jiffies();
                   __rcu_read_unlock();
                 }
               }
               put_prev_task_fair() {
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
               }
               pick_next_task_idle() {
                 __update_idle_core() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
               }
             }
             psi_task_switch() {
               psi_flags_change();
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
             }
             __traceiter_sched_switch() {
               _raw_spin_lock_irqsave();
               _raw_spin_unlock_irqrestore();
             }
             finish_task_switch.isra.0() {
               raw_spin_rq_unlock() {
                 _raw_spin_unlock();
               }
             }
           }
           hrtimer_active();
           hrtimer_try_to_cancel.part.0() {
             _raw_spin_lock_irqsave();
             __remove_hrtimer();
             _raw_spin_unlock_irqrestore();
           }
         }
       }
       ep_send_events() {
         mutex_lock() {
           __cond_resched();
         }
         _raw_write_lock_irq();
         _raw_write_unlock_irq();
         ep_item_poll.isra.0() {
           sock_poll() {
             tcp_poll();
           }
         }
         ep_done_scan() {
           _raw_write_lock_irq();
           __pm_relax();
           _raw_write_unlock_irq();
         }
         mutex_unlock();
       }
     }
     fput();
   } /* do_epoll_wait */
 } /* __x64_sys_epoll_wait */
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_accept() {
   __sys_accept4() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     get_unused_fd_flags() {
       alloc_fd() {
         _raw_spin_lock();
         expand_files();
         _raw_spin_unlock();
       }
     }
     do_accept() {
       sock_alloc() {
         new_inode_pseudo() {
           alloc_inode() {
             sock_alloc_inode() {
               kmem_cache_alloc_lru() {
                 __cond_resched();
                 should_failslab();
                 __rcu_read_lock();
                 __get_obj_cgroup_from_memcg() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_unlock();
                 __rcu_read_lock();
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 __rcu_read_unlock();
                 memcg_list_lru_alloc() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 obj_cgroup_charge() {
                   consume_obj_stock();
                   __rcu_read_lock();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   __rcu_read_unlock();
                   try_charge_memcg() {
                     consume_stock();
                     page_counter_try_charge() {
                       propagate_protected_usage();
                       propagate_protected_usage();
                       propagate_protected_usage();
                     }
                     refill_stock() {
                       __refill_stock() {
                         drain_stock() {
                           page_counter_uncharge() {
                             page_counter_cancel() {
                               propagate_protected_usage();
                             }
                             page_counter_cancel() {
                               propagate_protected_usage();
                             }
                             page_counter_cancel() {
                               propagate_protected_usage();
                             }
                             page_counter_cancel() {
                               propagate_protected_usage();
                             }
                             page_counter_cancel() {
                               propagate_protected_usage();
                             }
                             page_counter_cancel() {
                               propagate_protected_usage();
                             }
                           }
                           __rcu_read_lock();
                           __rcu_read_unlock();
                         }
                         __rcu_read_lock();
                         __rcu_read_unlock();
                       }
                     }
                   }
                   memcg_account_kmem() {
                     __mod_memcg_state() {
                       cgroup_rstat_updated();
                     }
                   }
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   refill_obj_stock() {
                     drain_obj_stock() {
                       __rcu_read_lock();
                       __mod_memcg_lruvec_state() {
                         cgroup_rstat_updated();
                       }
                       __rcu_read_unlock();
                     }
                     __rcu_read_lock();
                     __rcu_read_unlock();
                     __rcu_read_lock();
                     __rcu_read_unlock();
                     obj_cgroup_uncharge_pages() {
                       __rcu_read_lock();
                       __rcu_read_lock();
                       __rcu_read_unlock();
                       __rcu_read_unlock();
                       memcg_account_kmem() {
                         __mod_memcg_state() {
                           cgroup_rstat_updated();
                         }
                       }
                       refill_stock() {
                         __refill_stock();
                       }
                       __rcu_read_lock();
                       __rcu_read_unlock();
                     }
                   }
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 mod_objcg_state();
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               __init_waitqueue_head();
             }
             inode_init_always() {
               make_kuid() {
                 map_id_range_down();
               }
               make_kgid() {
                 map_id_range_down();
               }
               __init_rwsem();
               __init_rwsem();
               security_inode_alloc() {
                 kmem_cache_alloc() {
                   __cond_resched();
                   should_failslab();
                 }
                 apparmor_inode_alloc_security();
               }
             }
           }
           _raw_spin_lock();
           _raw_spin_unlock();
         }
         get_next_ino();
       }
       __module_get();
       sock_alloc_file() {
         alloc_file_pseudo() {
           d_alloc_pseudo() {
             __d_alloc() {
               kmem_cache_alloc_lru() {
                 __cond_resched();
                 should_failslab();
                 __rcu_read_lock();
                 __get_obj_cgroup_from_memcg() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_unlock();
                 __rcu_read_lock();
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 __rcu_read_unlock();
                 memcg_list_lru_alloc() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 obj_cgroup_charge() {
                   consume_obj_stock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 mod_objcg_state();
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               d_set_d_op();
             }
           }
           mntget();
           d_instantiate() {
             security_d_instantiate() {
               apparmor_d_instantiate() {
                 _raw_spin_lock();
                 _raw_spin_unlock();
               }
             }
             _raw_spin_lock();
             __d_instantiate() {
               d_flags_for_inode();
               _raw_spin_lock();
               _raw_spin_unlock();
             }
             _raw_spin_unlock();
           }
           alloc_file() {
             alloc_empty_file() {
               __alloc_file() {
                 kmem_cache_alloc() {
                   __cond_resched();
                   should_failslab();
                   __rcu_read_lock();
                   __get_obj_cgroup_from_memcg() {
                     __rcu_read_lock();
                     __rcu_read_unlock();
                   }
                   __rcu_read_unlock();
                   obj_cgroup_charge() {
                     consume_obj_stock();
                   }
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   mod_objcg_state();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 security_file_alloc() {
                   kmem_cache_alloc() {
                     __cond_resched();
                     should_failslab();
                   }
                   hook_file_alloc_security();
                   apparmor_file_alloc_security() {
                     __cond_resched();
                   }
                 }
                 __mutex_init();
               }
             }
           }
         }
         stream_open();
       }
       security_socket_accept() {
         apparmor_socket_accept() {
           aa_sk_perm() {
             __cond_resched();
             aa_label_sk_perm.part.0() {
               aa_label_next_confined();
               aa_profile_af_perm() {
                 aa_apply_modes_to_perms();
                 aa_check_perms();
               }
               aa_label_next_confined();
             }
           }
         }
       }
       inet_accept() {
         inet_csk_accept() {
           lock_sock_nested() {
             __cond_resched();
             _raw_spin_lock_bh();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           _raw_spin_lock_bh();
           _raw_spin_unlock_bh() {
             __local_bh_enable_ip();
           }
           release_sock() {
             _raw_spin_lock_bh();
             tcp_release_cb();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           lock_sock_nested() {
             __cond_resched();
             _raw_spin_lock_bh();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           mem_cgroup_sk_alloc() {
             __rcu_read_lock();
             __rcu_read_lock();
             __rcu_read_unlock();
             __rcu_read_unlock();
           }
           mem_cgroup_charge_skmem() {
             try_charge_memcg() {
               consume_stock();
             }
             __mod_memcg_state() {
               cgroup_rstat_updated();
             }
           }
           release_sock() {
             _raw_spin_lock_bh();
             tcp_release_cb();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           tcp_v4_reqsk_destructor() {
             kfree();
           }
           kfree();
           kmem_cache_free() {
             __slab_free();
           }
         }
         lock_sock_nested() {
           __cond_resched();
           _raw_spin_lock_bh();
           _raw_spin_unlock_bh() {
             __local_bh_enable_ip();
           }
         }
         _raw_write_lock_bh();
         security_sock_graft() {
           apparmor_sock_graft();
         }
         _raw_write_unlock_bh() {
           __local_bh_enable_ip();
         }
         release_sock() {
           _raw_spin_lock_bh();
           tcp_release_cb();
           _raw_spin_unlock_bh() {
             __local_bh_enable_ip();
           }
         }
       }
       inet_getname() {
         lock_sock_nested() {
           __cond_resched();
           _raw_spin_lock_bh();
           _raw_spin_unlock_bh() {
             __local_bh_enable_ip();
           }
         }
         release_sock() {
           _raw_spin_lock_bh();
           tcp_release_cb();
           _raw_spin_unlock_bh() {
             __local_bh_enable_ip();
           }
         }
       }
       move_addr_to_user() {
         __check_object_size() {
           __check_object_size.part.0() {
             check_stack_object();
           }
         }
       }
     }
     fd_install();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_fcntl() {
   __fdget_raw() {
     __fget_light() {
       __rcu_read_lock();
       __rcu_read_unlock();
     }
   }
   security_file_fcntl();
   do_fcntl();
   fput();
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_fcntl() {
   __fdget_raw() {
     __fget_light() {
       __rcu_read_lock();
       __rcu_read_unlock();
     }
   }
   security_file_fcntl();
   do_fcntl() {
     setfl() {
       _raw_spin_lock();
       _raw_spin_unlock();
     }
   }
   fput();
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_setsockopt() {
   __sys_setsockopt() {
     sockfd_lookup_light() {
       __fdget() {
         __fget_light() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
       }
     }
     security_socket_setsockopt() {
       apparmor_socket_setsockopt() {
         aa_sk_perm() {
           __cond_resched();
           aa_label_sk_perm.part.0() {
             aa_label_next_confined();
             aa_profile_af_perm() {
               aa_apply_modes_to_perms();
               aa_check_perms();
             }
             aa_label_next_confined();
           }
         }
       }
     }
     sock_common_setsockopt() {
       tcp_setsockopt() {
         do_tcp_setsockopt() {
           sockopt_lock_sock() {
             __cond_resched();
             _raw_spin_lock_bh();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           sockopt_release_sock() {
             release_sock() {
               _raw_spin_lock_bh();
               tcp_release_cb();
               _raw_spin_unlock_bh() {
                 __local_bh_enable_ip();
               }
             }
           }
         }
       }
     }
     kfree();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_setsockopt() {
   __sys_setsockopt() {
     sockfd_lookup_light() {
       __fdget() {
         __fget_light() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
       }
     }
     security_socket_setsockopt() {
       apparmor_socket_setsockopt() {
         aa_sk_perm() {
           __cond_resched();
           aa_label_sk_perm.part.0() {
             aa_label_next_confined();
             aa_profile_af_perm() {
               aa_apply_modes_to_perms();
               aa_check_perms();
             }
             aa_label_next_confined();
           }
         }
       }
     }
     sock_setsockopt() {
       sk_setsockopt() {
         __cond_resched();
         _raw_spin_lock_bh();
         _raw_spin_unlock_bh() {
           __local_bh_enable_ip();
         }
         tcp_set_keepalive() {
           inet_csk_reset_keepalive_timer() {
             sk_reset_timer() {
               mod_timer() {
                 lock_timer_base() {
                   _raw_spin_lock_irqsave();
                 }
                 detach_if_pending();
                 get_nohz_timer_target();
                 _raw_spin_unlock();
                 _raw_spin_lock();
                 calc_wheel_index();
                 enqueue_timer();
                 _raw_spin_unlock_irqrestore();
               }
             }
           }
         }
         release_sock() {
           _raw_spin_lock_bh();
           tcp_release_cb();
           _raw_spin_unlock_bh() {
             __local_bh_enable_ip();
           }
         }
       }
     }
     kfree();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_setsockopt() {
   __sys_setsockopt() {
     sockfd_lookup_light() {
       __fdget() {
         __fget_light() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
       }
     }
     security_socket_setsockopt() {
       apparmor_socket_setsockopt() {
         aa_sk_perm() {
           __cond_resched();
           aa_label_sk_perm.part.0() {
             aa_label_next_confined();
             aa_profile_af_perm() {
               aa_apply_modes_to_perms();
               aa_check_perms();
             }
             aa_label_next_confined();
           }
         }
       }
     }
     sock_common_setsockopt() {
       tcp_setsockopt() {
         do_tcp_setsockopt() {
           sockopt_lock_sock() {
             __cond_resched();
             _raw_spin_lock_bh();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           tcp_sock_set_keepidle_locked() {
             inet_csk_reset_keepalive_timer() {
               sk_reset_timer() {
                 mod_timer() {
                   lock_timer_base() {
                     _raw_spin_lock_irqsave();
                   }
                   calc_wheel_index();
                   detach_if_pending();
                   get_nohz_timer_target();
                   enqueue_timer();
                   _raw_spin_unlock_irqrestore();
                 }
               }
             }
           }
           sockopt_release_sock() {
             release_sock() {
               _raw_spin_lock_bh();
               tcp_release_cb();
               _raw_spin_unlock_bh() {
                 __local_bh_enable_ip();
               }
             }
           }
         }
       }
     }
     kfree();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_setsockopt() {
   __sys_setsockopt() {
     sockfd_lookup_light() {
       __fdget() {
         __fget_light() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
       }
     }
     security_socket_setsockopt() {
       apparmor_socket_setsockopt() {
         aa_sk_perm() {
           __cond_resched();
           aa_label_sk_perm.part.0() {
             aa_label_next_confined();
             aa_profile_af_perm() {
               aa_apply_modes_to_perms();
               aa_check_perms();
             }
             aa_label_next_confined();
           }
         }
       }
     }
     sock_common_setsockopt() {
       tcp_setsockopt() {
         do_tcp_setsockopt() {
           sockopt_lock_sock() {
             __cond_resched();
             _raw_spin_lock_bh();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           sockopt_release_sock() {
             release_sock() {
               _raw_spin_lock_bh();
               tcp_release_cb();
               _raw_spin_unlock_bh() {
                 __local_bh_enable_ip();
               }
             }
           }
         }
       }
     }
     kfree();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_setsockopt() {
   __sys_setsockopt() {
     sockfd_lookup_light() {
       __fdget() {
         __fget_light() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
       }
     }
     security_socket_setsockopt() {
       apparmor_socket_setsockopt() {
         aa_sk_perm() {
           __cond_resched();
           aa_label_sk_perm.part.0() {
             aa_label_next_confined();
             aa_profile_af_perm() {
               aa_apply_modes_to_perms();
               aa_check_perms();
             }
             aa_label_next_confined();
           }
         }
       }
     }
     sock_common_setsockopt() {
       tcp_setsockopt() {
         do_tcp_setsockopt() {
           sockopt_lock_sock() {
             __cond_resched();
             _raw_spin_lock_bh();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           sockopt_release_sock() {
             release_sock() {
               _raw_spin_lock_bh();
               tcp_release_cb();
               _raw_spin_unlock_bh() {
                 __local_bh_enable_ip();
               }
             }
           }
         }
       }
     }
     kfree();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_epoll_ctl() {
   do_epoll_ctl() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     mutex_lock() {
       __cond_resched();
     }
     ep_insert() {
       kmem_cache_alloc() {
         __cond_resched();
         should_failslab();
         __rcu_read_lock();
         __get_obj_cgroup_from_memcg() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
         __rcu_read_unlock();
         obj_cgroup_charge() {
           consume_obj_stock();
         }
         __rcu_read_lock();
         __rcu_read_unlock();
         mod_objcg_state();
         __rcu_read_lock();
         __rcu_read_unlock();
       }
       kmem_cache_alloc() {
         __cond_resched();
         should_failslab();
         __rcu_read_lock();
         __get_obj_cgroup_from_memcg() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
         __rcu_read_unlock();
         obj_cgroup_charge() {
           consume_obj_stock();
         }
         __rcu_read_lock();
         __rcu_read_unlock();
         mod_objcg_state();
         __rcu_read_lock();
         __rcu_read_unlock();
       }
       _raw_spin_lock();
       _raw_spin_unlock();
       ep_item_poll.isra.0() {
         sock_poll() {
           tcp_poll() {
             ep_ptable_queue_proc() {
               kmem_cache_alloc() {
                 __cond_resched();
                 should_failslab();
                 __rcu_read_lock();
                 __get_obj_cgroup_from_memcg() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_unlock();
                 obj_cgroup_charge() {
                   consume_obj_stock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 mod_objcg_state();
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               add_wait_queue() {
                 _raw_spin_lock_irqsave();
                 _raw_spin_unlock_irqrestore();
               }
             }
             tcp_stream_memory_free();
           }
         }
       }
       _raw_write_lock_irq();
       _raw_write_unlock_irq();
     }
     mutex_unlock();
     fput();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_accept() {
   __sys_accept4() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     get_unused_fd_flags() {
       alloc_fd() {
         _raw_spin_lock();
         expand_files();
         _raw_spin_unlock();
       }
     }
     do_accept() {
       sock_alloc() {
         new_inode_pseudo() {
           alloc_inode() {
             sock_alloc_inode() {
               kmem_cache_alloc_lru() {
                 __cond_resched();
                 should_failslab();
                 __rcu_read_lock();
                 __get_obj_cgroup_from_memcg() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_unlock();
                 __rcu_read_lock();
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 __rcu_read_unlock();
                 memcg_list_lru_alloc() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 obj_cgroup_charge() {
                   consume_obj_stock();
                   __rcu_read_lock();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   __rcu_read_unlock();
                   try_charge_memcg() {
                     consume_stock();
                   }
                   memcg_account_kmem() {
                     __mod_memcg_state() {
                       cgroup_rstat_updated();
                     }
                   }
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   refill_obj_stock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 mod_objcg_state();
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               __init_waitqueue_head();
             }
             inode_init_always() {
               make_kuid() {
                 map_id_range_down();
               }
               make_kgid() {
                 map_id_range_down();
               }
               __init_rwsem();
               __init_rwsem();
               security_inode_alloc() {
                 kmem_cache_alloc() {
                   __cond_resched();
                   should_failslab();
                 }
                 apparmor_inode_alloc_security();
               }
             }
           }
           _raw_spin_lock();
           _raw_spin_unlock();
         }
         get_next_ino();
       }
       __module_get();
       sock_alloc_file() {
         alloc_file_pseudo() {
           d_alloc_pseudo() {
             __d_alloc() {
               kmem_cache_alloc_lru() {
                 __cond_resched();
                 should_failslab();
                 __rcu_read_lock();
                 __get_obj_cgroup_from_memcg() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_unlock();
                 __rcu_read_lock();
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 __rcu_read_unlock();
                 memcg_list_lru_alloc() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 obj_cgroup_charge() {
                   consume_obj_stock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 mod_objcg_state();
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               d_set_d_op();
             }
           }
           mntget();
           d_instantiate() {
             security_d_instantiate() {
               apparmor_d_instantiate() {
                 _raw_spin_lock();
                 _raw_spin_unlock();
               }
             }
             _raw_spin_lock();
             __d_instantiate() {
               d_flags_for_inode();
               _raw_spin_lock();
               _raw_spin_unlock();
             }
             _raw_spin_unlock();
           }
           alloc_file() {
             alloc_empty_file() {
               __alloc_file() {
                 kmem_cache_alloc() {
                   __cond_resched();
                   should_failslab();
                   __rcu_read_lock();
                   __get_obj_cgroup_from_memcg() {
                     __rcu_read_lock();
                     __rcu_read_unlock();
                   }
                   __rcu_read_unlock();
                   obj_cgroup_charge() {
                     consume_obj_stock();
                   }
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   mod_objcg_state();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 security_file_alloc() {
                   kmem_cache_alloc() {
                     __cond_resched();
                     should_failslab();
                   }
                   hook_file_alloc_security();
                   apparmor_file_alloc_security() {
                     __cond_resched();
                   }
                 }
                 __mutex_init();
               }
             }
           }
         }
         stream_open();
       }
       security_socket_accept() {
         apparmor_socket_accept() {
           aa_sk_perm() {
             __cond_resched();
             aa_label_sk_perm.part.0() {
               aa_label_next_confined();
               aa_profile_af_perm() {
                 aa_apply_modes_to_perms();
                 aa_check_perms();
               }
               aa_label_next_confined();
             }
           }
         }
       }
       inet_accept() {
         inet_csk_accept() {
           lock_sock_nested() {
             __cond_resched();
             _raw_spin_lock_bh();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           release_sock() {
             _raw_spin_lock_bh();
             tcp_release_cb();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
         }
       }
       fput() {
         task_work_add() {
           kick_process();
         }
       }
     }
     put_unused_fd() {
       _raw_spin_lock();
       _raw_spin_unlock();
     }
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   exit_to_user_mode_loop() {
     task_work_run() {
       _raw_spin_lock_irq();
       _raw_spin_unlock_irq();
       ____fput() {
         __fput() {
           __cond_resched();
           locks_remove_file();
           ima_file_free();
           sock_close() {
             __sock_release() {
               down_write() {
                 __cond_resched();
               }
               inet_release();
               up_write();
               module_put();
             }
           }
           module_put();
           put_pid();
           dput() {
             __cond_resched();
             __rcu_read_lock();
             _raw_spin_lock();
             __rcu_read_unlock();
             _raw_spin_trylock();
             __dentry_kill() {
               dentry_unlink_inode() {
                 _raw_spin_unlock();
                 _raw_spin_unlock();
                 iput() {
                   _raw_spin_lock();
                   _raw_spin_unlock();
                   evict() {
                     inode_wait_for_writeback() {
                       _raw_spin_lock();
                       __inode_wait_for_writeback() {
                         bit_waitqueue();
                       }
                       _raw_spin_unlock();
                     }
                     truncate_inode_pages_final() {
                       truncate_inode_pages_range();
                     }
                     clear_inode() {
                       _raw_spin_lock_irq();
                       _raw_spin_unlock_irq();
                     }
                     _raw_spin_lock();
                     wake_up_bit();
                     _raw_spin_unlock();
                     destroy_inode() {
                       __destroy_inode() {
                         inode_has_buffers();
                         security_inode_free() {
                           integrity_inode_free();
                           hook_inode_free_security();
                           apparmor_inode_free_security();
                           call_rcu() {
                             __call_rcu_common.constprop.0() {
                               rcu_segcblist_enqueue();
                             }
                           }
                         }
                         __fsnotify_inode_delete() {
                           fsnotify_destroy_marks() {
                             fsnotify_grab_connector() {
                               __srcu_read_lock();
                               __srcu_read_unlock();
                             }
                           }
                         }
                         locks_free_lock_context();
                       }
                       call_rcu() {
                         __call_rcu_common.constprop.0() {
                           rcu_segcblist_enqueue();
                         }
                       }
                     }
                   }
                 }
               }
               _raw_spin_lock();
               _raw_spin_unlock();
               dentry_free() {
                 kmem_cache_free() {
                   obj_cgroup_uncharge() {
                     refill_obj_stock();
                   }
                   mod_objcg_state();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
               }
               __cond_resched();
             }
           }
           mntput() {
             mntput_no_expire() {
               __rcu_read_lock();
               __rcu_read_unlock();
             }
           }
           security_file_free() {
             apparmor_file_free_security();
             kmem_cache_free();
           }
           call_rcu() {
             __call_rcu_common.constprop.0() {
               rcu_segcblist_enqueue();
             }
           }
         }
       }
       __cond_resched();
     }
     mem_cgroup_handle_over_high();
     blkcg_maybe_throttle_current();
   }
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_epoll_wait() {
   ktime_get_ts64();
   timespec64_add_safe();
   do_epoll_wait() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     ep_poll() {
       select_estimate_accuracy() {
         ktime_get_ts64();
         set_normalized_timespec64();
       }
       ep_send_events() {
         mutex_lock() {
           __cond_resched();
         }
         _raw_write_lock_irq();
         _raw_write_unlock_irq();
         ep_item_poll.isra.0() {
           sock_poll() {
             tcp_poll();
           }
         }
         ep_item_poll.isra.0() {
           sock_poll() {
             tcp_poll() {
               tcp_stream_memory_free();
             }
           }
         }
         ep_done_scan() {
           _raw_write_lock_irq();
           __pm_relax();
           _raw_write_unlock_irq();
         }
         mutex_unlock();
       }
     }
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_read() {
   ksys_read() {
     __fdget_pos() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     vfs_read() {
       rw_verify_area() {
         security_file_permission() {
           apparmor_file_permission() {
             aa_file_perm() {
               __rcu_read_lock();
               __rcu_read_unlock();
               aa_sock_file_perm() {
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
               aa_sock_file_perm() {
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
               update_file_ctx() {
                 _raw_spin_lock();
                 aa_label_merge();
                 _raw_spin_unlock();
               }
             }
           }
         }
       }
       __get_task_ioprio();
       sock_read_iter() {
         sock_recvmsg() {
           security_socket_recvmsg() {
             apparmor_socket_recvmsg() {
               aa_sk_perm() {
                 __cond_resched();
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
             }
           }
           inet_recvmsg() {
             tcp_recvmsg() {
               lock_sock_nested() {
                 __cond_resched();
                 _raw_spin_lock_bh();
                 _raw_spin_unlock_bh() {
                   __local_bh_enable_ip();
                 }
               }
               tcp_recvmsg_locked() {
                 skb_copy_datagram_iter() {
                   __skb_datagram_iter() {
                     __cond_resched();
                     simple_copy_to_iter() {
                       __check_object_size() {
                         __check_object_size.part.0() {
                           check_stack_object();
                           is_vmalloc_addr();
                           __virt_addr_valid();
                         }
                       }
                     }
                   }
                 }
                 tcp_rcv_space_adjust() {
                   tcp_mstamp_refresh() {
                     ktime_get();
                   }
                 }
                 sock_rfree() {
                   __sk_mem_reduce_allocated() {
                     mem_cgroup_uncharge_skmem() {
                       __mod_memcg_state() {
                         cgroup_rstat_updated();
                       }
                       refill_stock() {
                         __refill_stock();
                       }
                     }
                   }
                 }
                 skb_attempt_defer_free() {
                   _raw_spin_lock_irqsave();
                   _raw_spin_unlock_irqrestore();
                 }
                 tcp_cleanup_rbuf() {
                   __tcp_cleanup_rbuf();
                 }
               }
               release_sock() {
                 _raw_spin_lock_bh();
                 tcp_release_cb();
                 _raw_spin_unlock_bh() {
                   __local_bh_enable_ip();
                 }
               }
             }
           }
         }
       }
     }
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_write() {
   ksys_write() {
     __fdget_pos() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     vfs_write() {
       rw_verify_area() {
         security_file_permission() {
           apparmor_file_permission() {
             aa_file_perm() {
               __rcu_read_lock();
               __rcu_read_unlock();
               aa_sock_file_perm() {
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
               aa_sock_file_perm() {
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
               update_file_ctx() {
                 _raw_spin_lock();
                 aa_label_merge();
                 _raw_spin_unlock();
               }
             }
           }
         }
       }
       __get_task_ioprio();
       sock_write_iter() {
         sock_sendmsg() {
           security_socket_sendmsg() {
             apparmor_socket_sendmsg() {
               aa_sk_perm() {
                 __cond_resched();
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
             }
           }
           inet_sendmsg() {
             inet_send_prepare();
             tcp_sendmsg() {
               lock_sock_nested() {
                 __cond_resched();
                 _raw_spin_lock_bh();
                 _raw_spin_unlock_bh() {
                   __local_bh_enable_ip();
                 }
               }
               tcp_sendmsg_locked() {
                 tcp_rate_check_app_limited();
                 tcp_send_mss() {
                   tcp_current_mss() {
                     ipv4_mtu();
                     tcp_established_options();
                   }
                 }
                 tcp_stream_memory_free();
                 tcp_stream_alloc_skb() {
                   __alloc_skb() {
                     kmem_cache_alloc_node() {
                       __cond_resched();
                       should_failslab();
                     }
                     kmalloc_reserve() {
                       kmalloc_size_roundup() {
                         kmalloc_slab();
                       }
                       __kmalloc_node_track_caller() {
                         kmalloc_slab();
                         __kmem_cache_alloc_node() {
                           __cond_resched();
                           should_failslab();
                         }
                       }
                     }
                     __build_skb_around();
                   }
                   sk_forced_mem_schedule() {
                     mem_cgroup_charge_skmem() {
                       try_charge_memcg() {
                         consume_stock();
                       }
                       __mod_memcg_state() {
                         cgroup_rstat_updated();
                       }
                     }
                   }
                 }
                 tcp_skb_entail() {
                   tcp_chrono_start();
                 }
                 sk_page_frag_refill() {
                   skb_page_frag_refill();
                 }
                 tcp_wmem_schedule();
                 __check_object_size() {
                   __check_object_size.part.0() {
                     check_stack_object();
                     is_vmalloc_addr();
                     __virt_addr_valid();
                   }
                 }
                 tcp_tx_timestamp();
                 tcp_push() {
                   __tcp_push_pending_frames() {
                     tcp_write_xmit() {
                       ktime_get();
                       tcp_mtu_probe();
                       tcp_tso_segs();
                       tcp_small_queue_check.isra.0();
                       __tcp_transmit_skb() {
                         skb_clone() {
                           __skb_clone() {
                             __copy_skb_header();
                           }
                         }
                         tcp_established_options();
                         skb_push();
                         __tcp_select_window();
                         tcp_options_write();
                         bpf_skops_write_hdr_opt.isra.0();
                         tcp_v4_send_check();
                         cubictcp_cwnd_event();
                         ip_queue_xmit() {
                           __ip_queue_xmit() {
                             __rcu_read_lock();
                             __sk_dst_check() {
                               ipv4_dst_check();
                             }
                             skb_push();
                             ip_local_out() {
                               __ip_local_out() {
                                 ip_send_check();
                                 __rcu_read_lock();
                                 __rcu_read_unlock();
                               }
                               ip_output() {
                                 __rcu_read_lock();
                                 nf_hook_slow() {
                                   apparmor_ip_postroute();
                                 }
                                 __rcu_read_unlock();
                                 ip_finish_output() {
                                   __ip_finish_output() {
                                     ip_finish_output2() {
                                       __dev_queue_xmit() {
                                         qdisc_pkt_len_init();
                                         netdev_core_pick_tx();
                                         validate_xmit_skb() {
                                           netif_skb_features() {
                                             passthru_features_check();
                                             skb_network_protocol();
                                           }
                                           skb_csum_hwoffload_help();
                                           validate_xmit_xfrm();
                                         }
                                         dev_hard_start_xmit() {
                                           veth_xmit [veth]() {
                                             __rcu_read_lock();
                                             skb_clone_tx_timestamp();
                                             __dev_forward_skb() {
                                               __dev_forward_skb2() {
                                                 skb_scrub_packet();
                                                 eth_type_trans();
                                               }
                                             }
                                             __netif_rx() {
                                               netif_rx_internal() {
                                                 enqueue_to_backlog() {
                                                   _raw_spin_lock_irqsave();
                                                   __raise_softirq_irqoff();
                                                   _raw_spin_unlock_irqrestore();
                                                 }
                                               }
                                             }
                                             __rcu_read_unlock();
                                           }
                                         }
                                         __local_bh_enable_ip();
                                       }
                                       __local_bh_enable_ip() {
                                         do_softirq.part.0() {
                                           __do_softirq() {
                                             net_rx_action() {
                                               __usecs_to_jiffies();
                                               __napi_poll() {
                                                 process_backlog() {
                                                   _raw_spin_lock_irq();
                                                   _raw_spin_unlock_irq();
                                                   __rcu_read_lock();
                                                   __netif_receive_skb() {
                                                     __netif_receive_skb_one_core() {
                                                       __netif_receive_skb_core.constprop.0() {
                                                         br_handle_frame [bridge]() {
                                                           br_nf_pre_routing [br_netfilter]() {
                                                             __rcu_read_lock();
                                                             __rcu_read_unlock();
                                                             __rcu_read_lock();
                                                             __rcu_read_unlock();
                                                             __rcu_read_lock();
                                                             __rcu_read_unlock();
                                                             skb_pull_rcsum();
                                                             br_validate_ipv4 [br_netfilter]();
                                                             skb_ext_add() {
                                                               __skb_ext_alloc() {
                                                                 kmem_cache_alloc() {
                                                                   should_failslab();
                                                                 }
                                                               }
                                                             }
                                                             setup_pre_routing [br_netfilter]() {
                                                               brnf_get_logical_dev [br_netfilter]() {
                                                                 __rcu_read_lock();
                                                                 __rcu_read_unlock();
                                                               }
                                                               tcp_wfree() {
                                                                 sk_free();
                                                               }
                                                             }
                                                             __rcu_read_lock();
                                                             nf_hook_slow() {
                                                               ip_sabotage_in [br_netfilter]();
                                                               ipv4_conntrack_defrag [nf_defrag_ipv4]();
                                                               ipv4_conntrack_in [nf_conntrack]() {
                                                                 nf_conntrack_in [nf_conntrack]() {
                                                                   get_l4proto [nf_conntrack]();
                                                                   resolve_normal_ct [nf_conntrack]() {
                                                                     nf_ct_get_tuple [nf_conntrack]();
                                                                     hash_conntrack_raw [nf_conntrack]();
                                                                     __nf_conntrack_find_get [nf_conntrack]() {
                                                                       __rcu_read_lock();
                                                                       __rcu_read_unlock();
                                                                     }
                                                                   }
                                                                   nf_conntrack_handle_packet [nf_conntrack]() {
                                                                     nf_conntrack_tcp_packet [nf_conntrack]() {
                                                                       nf_checksum() {
                                                                         nf_ip_checksum();
                                                                       }
                                                                       _raw_spin_lock_bh();
                                                                       tcp_in_window [nf_conntrack]() {
                                                                         nf_ct_seq_offset [nf_conntrack]();
                                                                       }
                                                                       _raw_spin_unlock_bh() {
                                                                         __local_bh_enable_ip();
                                                                       }
                                                                       __nf_ct_refresh_acct [nf_conntrack]() {
                                                                         nf_ct_acct_add [nf_conntrack]();
                                                                       }
                                                                     }
                                                                   }
                                                                 }
                                                               }
                                                               nf_nat_ipv4_pre_routing [nf_nat]() {
                                                                 nf_nat_inet_fn [nf_nat]();
                                                               }
                                                             }
                                                             __rcu_read_unlock();
                                                             br_nf_pre_routing_finish [br_netfilter]() {
                                                               skb_push();
                                                               br_nf_hook_thresh [br_netfilter]() {
                                                                 nf_hook_slow();
                                                                 br_handle_frame_finish [bridge]() {
                                                                   br_allowed_ingress [bridge]();
                                                                   nbp_switchdev_frame_mark [bridge]();
                                                                   br_fdb_update [bridge]() {
                                                                     fdb_find_rcu [bridge]();
                                                                   }
                                                                   br_fdb_find_rcu [bridge]() {
                                                                     fdb_find_rcu [bridge]();
                                                                   }
                                                                   br_pass_frame_up [bridge]() {
                                                                     br_allowed_egress [bridge]();
                                                                     br_handle_vlan [bridge]();
                                                                     br_multicast_count [bridge]();
                                                                     netif_receive_skb() {
                                                                       skb_defer_rx_timestamp();
                                                                       __rcu_read_lock();
                                                                       __netif_receive_skb() {
                                                                         __netif_receive_skb_one_core() {
                                                                           __netif_receive_skb_core.constprop.0();
                                                                           ip_rcv() {
                                                                             ip_rcv_core();
                                                                             __rcu_read_lock();
                                                                             nf_hook_slow() {
                                                                               ip_sabotage_in [br_netfilter]() {
                                                                                 ip_rcv_finish() {
                                                                                   ip_rcv_finish_core.constprop.0() {
                                                                                     tcp_v4_early_demux() {
                                                                                       __inet_lookup_established() {
                                                                                         inet_ehashfn();
                                                                                       }
                                                                                     }
                                                                                     ip_route_input_noref() {
                                                                                       __rcu_read_lock();
                                                                                       ip_route_input_slow() {
                                                                                         make_kuid() {
                                                                                           map_id_range_down();
                                                                                         }
                                                                                         __rcu_read_lock();
                                                                                         fib_table_lookup() {
                                                                                           fib_lookup_good_nhc();
                                                                                         }
                                                                                         __rcu_read_unlock();
                                                                                         fib_validate_source() {
                                                                                           __fib_validate_source() {
                                                                                             l3mdev_master_ifindex_rcu();
                                                                                             make_kuid() {
                                                                                               map_id_range_down();
                                                                                             }
                                                                                             __rcu_read_lock();
                                                                                             fib_table_lookup() {
                                                                                               fib_lookup_good_nhc();
                                                                                             }
                                                                                             __rcu_read_unlock();
                                                                                             fib_info_nh_uses_dev();
                                                                                           }
                                                                                         }
                                                                                       }
                                                                                       __rcu_read_unlock();
                                                                                     }
                                                                                   }
                                                                                   ip_local_deliver() {
                                                                                     __rcu_read_lock();
                                                                                     nf_hook_slow() {
                                                                                       nft_do_chain_ipv4 [nf_tables]() {
                                                                                         nft_do_chain [nf_tables]() {
                                                                                           expr_call_ops_eval [nf_tables]() {
                                                                                             nft_counter_eval [nf_tables]() {
                                                                                               __local_bh_enable_ip();
                                                                                             }
                                                                                           }
                                                                                           expr_call_ops_eval [nf_tables]() {
                                                                                             nft_immediate_eval [nf_tables]();
                                                                                           }
                                                                                           expr_call_ops_eval [nf_tables]() {
                                                                                             nft_meta_get_eval [nf_tables]();
                                                                                           }
                                                                                           expr_call_ops_eval [nf_tables]() {
                                                                                             nft_meta_get_eval [nf_tables]();
                                                                                           }
                                                                                           expr_call_ops_eval [nf_tables]() {
                                                                                             nft_meta_get_eval [nf_tables]();
                                                                                           }
                                                                                           expr_call_ops_eval [nf_tables]() {
                                                                                             nft_meta_get_eval [nf_tables]();
                                                                                           }
                                                                                         }
                                                                                       }
                                                                                       nf_nat_ipv4_local_in [nf_nat]() {
                                                                                         nf_nat_inet_fn [nf_nat]();
                                                                                       }
                                                                                       nf_confirm [nf_conntrack]();
                                                                                     }
                                                                                     __rcu_read_unlock();
                                                                                     ip_local_deliver_finish() {
                                                                                       __rcu_read_lock();
                                                                                       ip_protocol_deliver_rcu() {
                                                                                         raw_local_deliver() {
                                                                                           raw_v4_input() {
                                                                                             __rcu_read_lock();
                                                                                             __rcu_read_unlock();
                                                                                           }
                                                                                         }
                                                                                         tcp_v4_rcv() {
                                                                                           tcp_inbound_md5_hash() {
                                                                                             tcp_parse_md5sig_option();
                                                                                           }
                                                                                           tcp_filter() {
                                                                                             sk_filter_trim_cap() {
                                                                                               security_sock_rcv_skb() {
                                                                                                 apparmor_socket_sock_rcv_skb();
                                                                                               }
                                                                                               __rcu_read_lock();
                                                                                               __rcu_read_unlock();
                                                                                             }
                                                                                           }
                                                                                           tcp_v4_fill_cb();
                                                                                           _raw_spin_lock();
                                                                                           tcp_v4_do_rcv() {
                                                                                             tcp_rcv_established() {
                                                                                               tcp_mstamp_refresh() {
                                                                                                 ktime_get();
                                                                                               }
                                                                                               inet_sk_rx_dst_set();
                                                                                               tcp_ack() {
                                                                                                 ktime_get_seconds();
                                                                                               }
                                                                                               tcp_urg();
                                                                                               tcp_data_queue() {
                                                                                                 sk_forced_mem_schedule() {
                                                                                                   mem_cgroup_charge_skmem();
                                                                                                 }
                                                                                                 tcp_queue_rcv();
                                                                                                 tcp_event_data_recv();
                                                                                                 tcp_data_ready() {
                                                                                                   sock_def_readable();
                                                                                                 }
                                                                                               }
                                                                                               tcp_check_space();
                                                                                               __tcp_ack_snd_check() {
                                                                                                 tcp_send_ack() {
                                                                                                   __tcp_send_ack.part.0();
                                                                                                 }
                                                                                               }
                                                                                             }
                                                                                           }
                                                                                           _raw_spin_unlock();
                                                                                         }
                                                                                       }
                                                                                       __rcu_read_unlock();
                                                                                     }
                                                                                   }
                                                                                 }
                                                                               }
                                                                             }
                                                                             __rcu_read_unlock();
                                                                           }
                                                                         }
                                                                       }
                                                                       __rcu_read_unlock();
                                                                     }
                                                                   }
                                                                 }
                                                               }
                                                             }
                                                           }
                                                         }
                                                       }
                                                     }
                                                   }
                                                   __rcu_read_unlock();
                                                   _raw_spin_lock_irq();
                                                   _raw_spin_unlock_irq();
                                                   __rcu_read_lock();
                                                   __netif_receive_skb() {
                                                     __netif_receive_skb_one_core() {
                                                       __netif_receive_skb_core.constprop.0();
                                                       ip_rcv() {
                                                         ip_rcv_core() {
                                                           __sock_wfree();
                                                         }
                                                         __rcu_read_lock();
                                                         __rcu_read_unlock();
                                                         ip_rcv_finish_core.constprop.0() {
                                                           tcp_v4_early_demux() {
                                                             __inet_lookup_established() {
                                                               inet_ehashfn();
                                                             }
                                                             ipv4_dst_check();
                                                           }
                                                         }
                                                         ip_local_deliver() {
                                                           __rcu_read_lock();
                                                           __rcu_read_unlock();
                                                           ip_local_deliver_finish() {
                                                             __rcu_read_lock();
                                                             ip_protocol_deliver_rcu() {
                                                               raw_local_deliver() {
                                                                 raw_v4_input() {
                                                                   __rcu_read_lock();
                                                                   __rcu_read_unlock();
                                                                 }
                                                               }
                                                               tcp_v4_rcv() {
                                                                 tcp_inbound_md5_hash() {
                                                                   tcp_parse_md5sig_option();
                                                                 }
                                                                 tcp_filter() {
                                                                   sk_filter_trim_cap() {
                                                                     security_sock_rcv_skb() {
                                                                       apparmor_socket_sock_rcv_skb();
                                                                     }
                                                                     __rcu_read_lock();
                                                                     __rcu_read_unlock();
                                                                   }
                                                                 }
                                                                 tcp_v4_fill_cb();
                                                                 _raw_spin_lock();
                                                                 tcp_add_backlog() {
                                                                   skb_condense();
                                                                 }
                                                                 _raw_spin_unlock();
                                                               }
                                                             }
                                                             __rcu_read_unlock();
                                                           }
                                                         }
                                                       }
                                                     }
                                                   }
                                                   __rcu_read_unlock();
                                                   _raw_spin_lock_irq();
                                                   _raw_spin_unlock_irq();
                                                 }
                                               }
                                               _raw_spin_lock_irqsave();
                                               _raw_spin_unlock_irqrestore();
                                               napi_consume_skb() {
                                                 skb_release_head_state() {
                                                   __skb_ext_put() {
                                                     kmem_cache_free();
                                                   }
                                                 }
                                                 skb_release_data();
                                                 kfree_skbmem();
                                               }
                                             }
                                           }
                                         }
                                       }
                                     }
                                   }
                                 }
                               }
                             }
                             __rcu_read_unlock();
                           }
                         }
                         tcp_update_skb_after_send();
                         tcp_rate_skb_sent();
                       }
                       tcp_event_new_data_sent() {
                         tcp_rbtree_insert();
                         tcp_rearm_rto() {
                           sk_reset_timer() {
                             mod_timer() {
                               lock_timer_base() {
                                 _raw_spin_lock_irqsave();
                               }
                               detach_if_pending();
                               get_nohz_timer_target();
                               _raw_spin_unlock();
                               _raw_spin_lock();
                               calc_wheel_index();
                               enqueue_timer();
                               _raw_spin_unlock_irqrestore();
                             }
                           }
                         }
                         tcp_check_space();
                       }
                       tcp_chrono_stop();
                       tcp_cwnd_validate();
                       tcp_schedule_loss_probe.part.0() {
                         __usecs_to_jiffies();
                         jiffies_to_usecs();
                         __usecs_to_jiffies();
                         sk_reset_timer() {
                           mod_timer();
                         }
                       }
                     }
                   }
                 }
               }
               release_sock() {
                 _raw_spin_lock_bh();
                 __release_sock() {
                   _raw_spin_unlock_bh() {
                     __local_bh_enable_ip();
                   }
                   tcp_v4_do_rcv() {
                     ipv4_dst_check();
                     tcp_rcv_established() {
                       tcp_mstamp_refresh() {
                         ktime_get();
                       }
                       ktime_get_seconds();
                       tcp_ack() {
                         tcp_clean_rtx_queue.constprop.0() {
                           tcp_rack_advance();
                           tcp_rate_skb_delivered();
                           tcp_ack_tstamp();
                           __sk_mem_reclaim() {
                             __sk_mem_reduce_allocated() {
                               mem_cgroup_uncharge_skmem() {
                                 __mod_memcg_state() {
                                   cgroup_rstat_updated();
                                 }
                                 refill_stock() {
                                   __refill_stock() {
                                     drain_stock() {
                                       page_counter_uncharge() {
                                         page_counter_cancel() {
                                           propagate_protected_usage();
                                         }
                                         page_counter_cancel() {
                                           propagate_protected_usage();
                                         }
                                         page_counter_cancel() {
                                           propagate_protected_usage();
                                         }
                                         page_counter_cancel() {
                                           propagate_protected_usage();
                                         }
                                         page_counter_cancel() {
                                           propagate_protected_usage();
                                         }
                                         page_counter_cancel() {
                                           propagate_protected_usage();
                                         }
                                         page_counter_cancel() {
                                           propagate_protected_usage();
                                         }
                                       }
                                       __rcu_read_lock();
                                       __rcu_read_unlock();
                                     }
                                     __rcu_read_lock();
                                     __rcu_read_unlock();
                                   }
                                 }
                               }
                             }
                           }
                           __kfree_skb() {
                             skb_release_head_state();
                             skb_release_data() {
                               skb_free_head() {
                                 kfree() {
                                   __kmem_cache_free();
                                 }
                               }
                             }
                             kfree_skbmem() {
                               kmem_cache_free();
                             }
                           }
                           tcp_chrono_stop();
                           tcp_ack_update_rtt() {
                             tcp_rtt_estimator() {
                               jiffies_to_usecs();
                             }
                             __usecs_to_jiffies();
                           }
                           cubictcp_acked();
                         }
                         tcp_rack_update_reo_wnd();
                         tcp_schedule_loss_probe() {
                           tcp_schedule_loss_probe.part.0();
                         }
                         tcp_rearm_rto();
                         tcp_newly_delivered();
                         tcp_rate_gen();
                         cubictcp_cong_avoid();
                         tcp_update_pacing_rate();
                         tcp_xmit_recovery();
                       }
                       __kfree_skb() {
                         skb_release_head_state();
                         skb_release_data() {
                           skb_free_head() {
                             kfree() {
                               __kmem_cache_free();
                             }
                           }
                         }
                         kfree_skbmem() {
                           kmem_cache_free();
                         }
                       }
                       tcp_check_space();
                     }
                   }
                   __cond_resched();
                   _raw_spin_lock_bh();
                 }
                 tcp_release_cb();
                 _raw_spin_unlock_bh() {
                   __local_bh_enable_ip();
                 }
               }
             }
           }
         }
       }
     }
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_epoll_wait() {
   ktime_get_ts64();
   timespec64_add_safe();
   do_epoll_wait() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     ep_poll() {
       select_estimate_accuracy() {
         ktime_get_ts64();
         set_normalized_timespec64();
       }
       ep_send_events() {
         mutex_lock() {
           __cond_resched();
         }
         _raw_write_lock_irq();
         _raw_write_unlock_irq();
         ep_item_poll.isra.0() {
           sock_poll() {
             tcp_poll() {
               tcp_stream_memory_free();
             }
           }
         }
         ep_done_scan() {
           _raw_write_lock_irq();
           __pm_relax();
           _raw_write_unlock_irq();
         }
         mutex_unlock();
       }
       _raw_write_lock_irq();
       _raw_write_unlock_irq();
       schedule_hrtimeout_range() {
         schedule_hrtimeout_range_clock() {
           hrtimer_init_sleeper() {
             __hrtimer_init();
           }
           hrtimer_start_range_ns() {
             _raw_spin_lock_irqsave();
             __hrtimer_start_range_ns() {
               get_nohz_timer_target();
               enqueue_hrtimer();
             }
             _raw_spin_unlock_irqrestore();
           }
           schedule() {
             rcu_note_context_switch();
             raw_spin_rq_lock_nested() {
               _raw_spin_lock();
             }
             update_rq_clock();
             dequeue_task_fair() {
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                   cpuacct_charge();
                   __cgroup_account_cputime() {
                     cgroup_rstat_updated();
                   }
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group();
                 update_min_vruntime();
               }
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group() {
                   reweight_entity();
                 }
                 update_min_vruntime();
               }
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group() {
                   reweight_entity();
                 }
                 update_min_vruntime();
               }
               hrtick_update();
             }
             pick_next_task() {
               pick_next_task_fair() {
                 newidle_balance() {
                   __rcu_read_lock();
                   __msecs_to_jiffies();
                   __rcu_read_unlock();
                 }
               }
               put_prev_task_fair() {
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
               }
               pick_next_task_idle() {
                 __update_idle_core() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
               }
             }
             psi_task_switch() {
               psi_flags_change();
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
             }
             __traceiter_sched_switch() {
               _raw_spin_lock_irqsave();
               _raw_spin_unlock_irqrestore();
             }
             finish_task_switch.isra.0() {
               raw_spin_rq_unlock() {
                 _raw_spin_unlock();
               }
             }
           }
           hrtimer_active();
           hrtimer_try_to_cancel.part.0() {
             _raw_spin_lock_irqsave();
             __remove_hrtimer();
             _raw_spin_unlock_irqrestore();
           }
         }
       }
       ep_send_events() {
         mutex_lock() {
           __cond_resched();
         }
         _raw_write_lock_irq();
         _raw_write_unlock_irq();
         ep_item_poll.isra.0() {
           sock_poll() {
             tcp_poll() {
               tcp_stream_memory_free();
             }
           }
         }
         ep_done_scan() {
           _raw_write_lock_irq();
           __pm_relax();
           _raw_write_unlock_irq();
         }
         mutex_unlock();
       }
     }
     fput();
   } /* do_epoll_wait */
 } /* __x64_sys_epoll_wait */
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_read() {
   ksys_read() {
     __fdget_pos() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     vfs_read() {
       rw_verify_area() {
         security_file_permission() {
           apparmor_file_permission() {
             aa_file_perm() {
               __rcu_read_lock();
               aa_label_is_subset();
               __rcu_read_unlock();
             }
           }
         }
       }
       __get_task_ioprio();
       sock_read_iter() {
         sock_recvmsg() {
           security_socket_recvmsg() {
             apparmor_socket_recvmsg() {
               aa_sk_perm() {
                 __cond_resched();
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
             }
           }
           inet_recvmsg() {
             tcp_recvmsg() {
               lock_sock_nested() {
                 __cond_resched();
                 _raw_spin_lock_bh();
                 _raw_spin_unlock_bh() {
                   __local_bh_enable_ip();
                 }
               }
               tcp_recvmsg_locked() {
                 sock_rfree() {
                   __sk_mem_reduce_allocated() {
                     mem_cgroup_uncharge_skmem() {
                       __mod_memcg_state() {
                         cgroup_rstat_updated();
                       }
                       refill_stock() {
                         __refill_stock();
                       }
                     }
                   }
                 }
                 skb_attempt_defer_free() {
                   _raw_spin_lock_irqsave();
                   _raw_spin_unlock_irqrestore();
                 }
                 tcp_cleanup_rbuf() {
                   __tcp_cleanup_rbuf();
                 }
               }
               release_sock() {
                 _raw_spin_lock_bh();
                 tcp_release_cb();
                 _raw_spin_unlock_bh() {
                   __local_bh_enable_ip();
                 }
               }
             }
           }
         }
       }
     }
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_epoll_ctl() {
   do_epoll_ctl() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     mutex_lock() {
       __cond_resched();
     }
     ep_remove() {
       __rcu_read_lock();
       remove_wait_queue() {
         _raw_spin_lock_irqsave();
         _raw_spin_unlock_irqrestore();
       }
       __rcu_read_unlock();
       kmem_cache_free() {
         obj_cgroup_uncharge() {
           refill_obj_stock();
         }
         mod_objcg_state();
         __rcu_read_lock();
         __rcu_read_unlock();
       }
       _raw_spin_lock();
       _raw_spin_unlock();
       kmem_cache_free() {
         obj_cgroup_uncharge() {
           refill_obj_stock();
         }
         mod_objcg_state();
         __rcu_read_lock();
         __rcu_read_unlock();
       }
       _raw_write_lock_irq();
       _raw_write_unlock_irq();
       wakeup_source_unregister();
       call_rcu() {
         __call_rcu_common.constprop.0() {
           rcu_segcblist_enqueue();
         }
       }
     }
     mutex_unlock();
     fput();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_close() {
   close_fd() {
     _raw_spin_lock();
     pick_file();
     _raw_spin_unlock();
     filp_close() {
       dnotify_flush();
       locks_remove_posix();
       fput() {
         task_work_add() {
           kick_process();
         }
       }
     }
   }
 }
 exit_to_user_mode_prepare() {
   exit_to_user_mode_loop() {
     task_work_run() {
       _raw_spin_lock_irq();
       _raw_spin_unlock_irq();
       ____fput() {
         __fput() {
           __cond_resched();
           locks_remove_file();
           ima_file_free();
           sock_close() {
             __sock_release() {
               down_write() {
                 __cond_resched();
               }
               inet_release() {
                 ip_mc_drop_socket();
                 tcp_close() {
                   lock_sock_nested() {
                     __cond_resched();
                     _raw_spin_lock_bh();
                     _raw_spin_unlock_bh() {
                       __local_bh_enable_ip();
                     }
                   }
                   __tcp_close() {
                     tcp_set_state() {
                       inet_sk_state_store();
                     }
                     tcp_send_fin() {
                       __alloc_skb() {
                         kmem_cache_alloc_node() {
                           __cond_resched();
                           should_failslab();
                         }
                         kmalloc_reserve() {
                           kmalloc_size_roundup() {
                             kmalloc_slab();
                           }
                           __kmalloc_node_track_caller() {
                             kmalloc_slab();
                             __kmem_cache_alloc_node() {
                               __cond_resched();
                               should_failslab();
                             }
                           }
                         }
                         __build_skb_around();
                       }
                       sk_forced_mem_schedule() {
                         mem_cgroup_charge_skmem() {
                           try_charge_memcg() {
                             consume_stock();
                           }
                           __mod_memcg_state() {
                             cgroup_rstat_updated();
                           }
                         }
                       }
                       tcp_current_mss() {
                         ipv4_mtu();
                         tcp_established_options();
                       }
                       __tcp_push_pending_frames() {
                         tcp_write_xmit() {
                           ktime_get();
                           tcp_mtu_probe();
                           tcp_tso_segs();
                           tcp_small_queue_check.isra.0();
                           __tcp_transmit_skb() {
                             skb_clone() {
                               __skb_clone() {
                                 __copy_skb_header();
                               }
                             }
                             tcp_established_options();
                             skb_push();
                             __tcp_select_window();
                             tcp_options_write();
                             bpf_skops_write_hdr_opt.isra.0();
                             tcp_v4_send_check();
                             ip_queue_xmit() {
                               __ip_queue_xmit() {
                                 __rcu_read_lock();
                                 __sk_dst_check() {
                                   ipv4_dst_check();
                                 }
                                 skb_push();
                                 ip_local_out() {
                                   __ip_local_out() {
                                     ip_send_check();
                                     __rcu_read_lock();
                                     __rcu_read_unlock();
                                   }
                                   ip_output() {
                                     __rcu_read_lock();
                                     nf_hook_slow() {
                                       apparmor_ip_postroute();
                                     }
                                     __rcu_read_unlock();
                                     ip_finish_output() {
                                       __ip_finish_output() {
                                         ip_finish_output2() {
                                           __dev_queue_xmit() {
                                             qdisc_pkt_len_init();
                                             netdev_core_pick_tx();
                                             validate_xmit_skb() {
                                               netif_skb_features() {
                                                 passthru_features_check();
                                                 skb_network_protocol();
                                               }
                                               skb_csum_hwoffload_help();
                                               validate_xmit_xfrm();
                                             }
                                             dev_hard_start_xmit() {
                                               veth_xmit [veth]() {
                                                 __rcu_read_lock();
                                                 skb_clone_tx_timestamp();
                                                 __dev_forward_skb() {
                                                   __dev_forward_skb2() {
                                                     skb_scrub_packet();
                                                     eth_type_trans();
                                                   }
                                                 }
                                                 __netif_rx() {
                                                   netif_rx_internal() {
                                                     enqueue_to_backlog() {
                                                       _raw_spin_lock_irqsave();
                                                       __raise_softirq_irqoff();
                                                       _raw_spin_unlock_irqrestore();
                                                     }
                                                   }
                                                 }
                                                 __rcu_read_unlock();
                                               }
                                             }
                                             __local_bh_enable_ip();
                                           }
                                           __local_bh_enable_ip() {
                                             do_softirq.part.0() {
                                               __do_softirq() {
                                                 net_rx_action() {
                                                   __usecs_to_jiffies();
                                                   __napi_poll() {
                                                     process_backlog() {
                                                       _raw_spin_lock_irq();
                                                       _raw_spin_unlock_irq();
                                                       __rcu_read_lock();
                                                       __netif_receive_skb() {
                                                         __netif_receive_skb_one_core() {
                                                           __netif_receive_skb_core.constprop.0() {
                                                             br_handle_frame [bridge]() {
                                                               br_nf_pre_routing [br_netfilter]() {
                                                                 __rcu_read_lock();
                                                                 __rcu_read_unlock();
                                                                 __rcu_read_lock();
                                                                 __rcu_read_unlock();
                                                                 __rcu_read_lock();
                                                                 __rcu_read_unlock();
                                                                 skb_pull_rcsum();
                                                                 br_validate_ipv4 [br_netfilter]();
                                                                 skb_ext_add() {
                                                                   __skb_ext_alloc() {
                                                                     kmem_cache_alloc() {
                                                                       should_failslab();
                                                                     }
                                                                   }
                                                                 }
                                                                 setup_pre_routing [br_netfilter]() {
                                                                   brnf_get_logical_dev [br_netfilter]() {
                                                                     __rcu_read_lock();
                                                                     __rcu_read_unlock();
                                                                   }
                                                                   tcp_wfree() {
                                                                     sk_free();
                                                                   }
                                                                 }
                                                                 __rcu_read_lock();
                                                                 nf_hook_slow() {
                                                                   ip_sabotage_in [br_netfilter]();
                                                                   ipv4_conntrack_defrag [nf_defrag_ipv4]();
                                                                   ipv4_conntrack_in [nf_conntrack]() {
                                                                     nf_conntrack_in [nf_conntrack]() {
                                                                       get_l4proto [nf_conntrack]();
                                                                       resolve_normal_ct [nf_conntrack]() {
                                                                         nf_ct_get_tuple [nf_conntrack]();
                                                                         hash_conntrack_raw [nf_conntrack]();
                                                                         __nf_conntrack_find_get [nf_conntrack]() {
                                                                           __rcu_read_lock();
                                                                           __rcu_read_unlock();
                                                                         }
                                                                       }
                                                                       nf_conntrack_handle_packet [nf_conntrack]() {
                                                                         nf_conntrack_tcp_packet [nf_conntrack]() {
                                                                           nf_checksum() {
                                                                             nf_ip_checksum();
                                                                           }
                                                                           _raw_spin_lock_bh();
                                                                           tcp_in_window [nf_conntrack]() {
                                                                             nf_ct_seq_offset [nf_conntrack]();
                                                                           }
                                                                           _raw_spin_unlock_bh() {
                                                                             __local_bh_enable_ip();
                                                                           }
                                                                           __nf_ct_refresh_acct [nf_conntrack]() {
                                                                             nf_ct_acct_add [nf_conntrack]();
                                                                           }
                                                                         }
                                                                       }
                                                                     }
                                                                   }
                                                                   nf_nat_ipv4_pre_routing [nf_nat]() {
                                                                     nf_nat_inet_fn [nf_nat]();
                                                                   }
                                                                 }
                                                                 __rcu_read_unlock();
                                                                 br_nf_pre_routing_finish [br_netfilter]() {
                                                                   skb_push();
                                                                   br_nf_hook_thresh [br_netfilter]() {
                                                                     nf_hook_slow();
                                                                     br_handle_frame_finish [bridge]() {
                                                                       br_allowed_ingress [bridge]();
                                                                       nbp_switchdev_frame_mark [bridge]();
                                                                       br_fdb_update [bridge]() {
                                                                         fdb_find_rcu [bridge]();
                                                                       }
                                                                       br_fdb_find_rcu [bridge]() {
                                                                         fdb_find_rcu [bridge]();
                                                                       }
                                                                       br_pass_frame_up [bridge]() {
                                                                         br_allowed_egress [bridge]();
                                                                         br_handle_vlan [bridge]();
                                                                         br_multicast_count [bridge]();
                                                                         netif_receive_skb() {
                                                                           skb_defer_rx_timestamp();
                                                                           __rcu_read_lock();
                                                                           __netif_receive_skb() {
                                                                             __netif_receive_skb_one_core() {
                                                                               __netif_receive_skb_core.constprop.0();
                                                                               ip_rcv() {
                                                                                 ip_rcv_core();
                                                                                 __rcu_read_lock();
                                                                                 nf_hook_slow() {
                                                                                   ip_sabotage_in [br_netfilter]() {
                                                                                     ip_rcv_finish() {
                                                                                       ip_rcv_finish_core.constprop.0() {
                                                                                         tcp_v4_early_demux() {
                                                                                           __inet_lookup_established() {
                                                                                             inet_ehashfn();
                                                                                           }
                                                                                           ipv4_dst_check();
                                                                                         }
                                                                                       }
                                                                                       ip_local_deliver() {
                                                                                         __rcu_read_lock();
                                                                                         nf_hook_slow() {
                                                                                           nft_do_chain_ipv4 [nf_tables]() {
                                                                                             nft_do_chain [nf_tables]() {
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_counter_eval [nf_tables]() {
                                                                                                   __local_bh_enable_ip();
                                                                                                 }
                                                                                               }
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_immediate_eval [nf_tables]();
                                                                                               }
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_meta_get_eval [nf_tables]();
                                                                                               }
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_meta_get_eval [nf_tables]();
                                                                                               }
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_meta_get_eval [nf_tables]();
                                                                                               }
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_meta_get_eval [nf_tables]();
                                                                                               }
                                                                                             }
                                                                                           }
                                                                                           nf_nat_ipv4_local_in [nf_nat]() {
                                                                                             nf_nat_inet_fn [nf_nat]();
                                                                                           }
                                                                                           nf_confirm [nf_conntrack]();
                                                                                         }
                                                                                         __rcu_read_unlock();
                                                                                         ip_local_deliver_finish() {
                                                                                           __rcu_read_lock();
                                                                                           ip_protocol_deliver_rcu() {
                                                                                             raw_local_deliver() {
                                                                                               raw_v4_input() {
                                                                                                 __rcu_read_lock();
                                                                                                 __rcu_read_unlock();
                                                                                               }
                                                                                             }
                                                                                             tcp_v4_rcv() {
                                                                                               tcp_inbound_md5_hash() {
                                                                                                 tcp_parse_md5sig_option();
                                                                                               }
                                                                                               tcp_filter() {
                                                                                                 sk_filter_trim_cap() {
                                                                                                   security_sock_rcv_skb();
                                                                                                   __rcu_read_lock();
                                                                                                   __rcu_read_unlock();
                                                                                                 }
                                                                                               }
                                                                                               tcp_v4_fill_cb();
                                                                                               _raw_spin_lock();
                                                                                               tcp_v4_do_rcv() {
                                                                                                 tcp_rcv_state_process() {
                                                                                                   tcp_mstamp_refresh();
                                                                                                   tcp_validate_incoming();
                                                                                                   tcp_ack();
                                                                                                   tcp_set_state();
                                                                                                   inet_csk_reset_keepalive_timer();
                                                                                                   tcp_urg();
                                                                                                   tcp_data_queue();
                                                                                                 }
                                                                                               }
                                                                                               _raw_spin_unlock();
                                                                                               sk_free();
                                                                                             }
                                                                                           }
                                                                                           __rcu_read_unlock();
                                                                                         }
                                                                                       }
                                                                                     }
                                                                                   }
                                                                                 }
                                                                                 __rcu_read_unlock();
                                                                               }
                                                                             }
                                                                           }
                                                                           __rcu_read_unlock();
                                                                         }
                                                                       }
                                                                     }
                                                                   }
                                                                 }
                                                               }
                                                             }
                                                           }
                                                         }
                                                       }
                                                       __rcu_read_unlock();
                                                       _raw_spin_lock_irq();
                                                       _raw_spin_unlock_irq();
                                                       __rcu_read_lock();
                                                       __netif_receive_skb() {
                                                         __netif_receive_skb_one_core() {
                                                           __netif_receive_skb_core.constprop.0();
                                                           ip_rcv() {
                                                             ip_rcv_core() {
                                                               __sock_wfree() {
                                                                 __sk_free() {
                                                                   netlink_has_listeners() {
                                                                     __rcu_read_lock();
                                                                     __rcu_read_unlock();
                                                                   }
                                                                   sk_destruct() {
                                                                     __sk_destruct() {
                                                                       inet_sock_destruct() {
                                                                         kfree();
                                                                         dst_release();
                                                                         dst_release();
                                                                       }
                                                                       bpf_sk_storage_free() {
                                                                         __rcu_read_lock();
                                                                         __rcu_read_unlock();
                                                                       }
                                                                       put_pid();
                                                                       cgroup_sk_free() {
                                                                         __rcu_read_lock();
                                                                         __rcu_read_unlock();
                                                                         __rcu_read_lock();
                                                                         __rcu_read_unlock();
                                                                       }
                                                                       mem_cgroup_sk_free() {
                                                                         __rcu_read_lock();
                                                                         __rcu_read_unlock();
                                                                       }
                                                                       security_sk_free() {
                                                                         apparmor_sk_free_security() {
                                                                           path_put() {
                                                                             dput();
                                                                             mntput();
                                                                           }
                                                                         }
                                                                         kfree() {
                                                                           __kmem_cache_free() {
                                                                             __slab_free();
                                                                           }
                                                                         }
                                                                       }
                                                                       kmem_cache_free() {
                                                                         obj_cgroup_uncharge() {
                                                                           refill_obj_stock() {
                                                                             drain_obj_stock() {
                                                                               __rcu_read_lock();
                                                                               __mod_memcg_lruvec_state() {
                                                                                 cgroup_rstat_updated();
                                                                               }
                                                                               __rcu_read_unlock();
                                                                               __rcu_read_lock();
                                                                               __mod_memcg_lruvec_state() {
                                                                                 cgroup_rstat_updated();
                                                                               }
                                                                               __rcu_read_unlock();
                                                                             }
                                                                             __rcu_read_lock();
                                                                             __rcu_read_unlock();
                                                                             __rcu_read_lock();
                                                                             __rcu_read_unlock();
                                                                           }
                                                                         }
                                                                         mod_objcg_state();
                                                                         __rcu_read_lock();
                                                                         __rcu_read_unlock();
                                                                         __slab_free();
                                                                       }
                                                                       module_put();
                                                                     }
                                                                   }
                                                                 }
                                                               }
                                                             }
                                                             __rcu_read_lock();
                                                             __rcu_read_unlock();
                                                             ip_rcv_finish_core.constprop.0() {
                                                               tcp_v4_early_demux() {
                                                                 __inet_lookup_established() {
                                                                   inet_ehashfn();
                                                                 }
                                                                 ipv4_dst_check();
                                                               }
                                                             }
                                                             ip_local_deliver() {
                                                               __rcu_read_lock();
                                                               __rcu_read_unlock();
                                                               ip_local_deliver_finish() {
                                                                 __rcu_read_lock();
                                                                 ip_protocol_deliver_rcu() {
                                                                   raw_local_deliver() {
                                                                     raw_v4_input() {
                                                                       __rcu_read_lock();
                                                                       __rcu_read_unlock();
                                                                     }
                                                                   }
                                                                   tcp_v4_rcv() {
                                                                     tcp_inbound_md5_hash() {
                                                                       tcp_parse_md5sig_option();
                                                                     }
                                                                     tcp_filter() {
                                                                       sk_filter_trim_cap() {
                                                                         security_sock_rcv_skb() {
                                                                           apparmor_socket_sock_rcv_skb();
                                                                         }
                                                                         __rcu_read_lock();
                                                                         __rcu_read_unlock();
                                                                       }
                                                                     }
                                                                     tcp_v4_fill_cb();
                                                                     _raw_spin_lock();
                                                                     tcp_add_backlog() {
                                                                       skb_condense();
                                                                     }
                                                                     _raw_spin_unlock();
                                                                   }
                                                                 }
                                                                 __rcu_read_unlock();
                                                               }
                                                             }
                                                           }
                                                         }
                                                       }
                                                       __rcu_read_unlock();
                                                       _raw_spin_lock_irq();
                                                       _raw_spin_unlock_irq();
                                                     }
                                                   }
                                                 }
                                               }
                                             }
                                           }
                                         }
                                       }
                                     }
                                   }
                                 }
                                 __rcu_read_unlock();
                               }
                             }
                             tcp_update_skb_after_send();
                             tcp_rate_skb_sent();
                           }
                           tcp_event_new_data_sent() {
                             tcp_rbtree_insert();
                             tcp_rearm_rto() {
                               sk_reset_timer() {
                                 mod_timer() {
                                   lock_timer_base() {
                                     _raw_spin_lock_irqsave();
                                   }
                                   calc_wheel_index();
                                   detach_if_pending();
                                   get_nohz_timer_target();
                                   enqueue_timer();
                                   _raw_spin_unlock_irqrestore();
                                 }
                               }
                             }
                             tcp_check_space();
                           }
                           tcp_chrono_stop();
                           tcp_cwnd_validate();
                           tcp_schedule_loss_probe.part.0() {
                             __usecs_to_jiffies();
                             jiffies_to_usecs();
                             __usecs_to_jiffies();
                             sk_reset_timer() {
                               mod_timer();
                             }
                           }
                         }
                       }
                     }
                     sk_stream_wait_close();
                     _raw_write_lock_bh();
                     _raw_write_unlock_bh() {
                       __local_bh_enable_ip();
                     }
                     _raw_spin_lock();
                     __release_sock() {
                       _raw_spin_unlock_bh() {
                         __local_bh_enable_ip();
                       }
                       tcp_v4_do_rcv() {
                         tcp_rcv_state_process() {
                           tcp_mstamp_refresh() {
                             ktime_get();
                           }
                           tcp_validate_incoming();
                           tcp_ack() {
                             ktime_get_seconds();
                             tcp_clean_rtx_queue.constprop.0() {
                               tcp_rack_advance();
                               tcp_rate_skb_delivered();
                               tcp_ack_tstamp();
                               __sk_mem_reclaim() {
                                 __sk_mem_reduce_allocated() {
                                   mem_cgroup_uncharge_skmem() {
                                     __mod_memcg_state() {
                                       cgroup_rstat_updated();
                                     }
                                     refill_stock() {
                                       __refill_stock() {
                                         drain_stock() {
                                           page_counter_uncharge() {
                                             page_counter_cancel() {
                                               propagate_protected_usage();
                                             }
                                             page_counter_cancel() {
                                               propagate_protected_usage();
                                             }
                                             page_counter_cancel() {
                                               propagate_protected_usage();
                                             }
                                             page_counter_cancel() {
                                               propagate_protected_usage();
                                             }
                                             page_counter_cancel() {
                                               propagate_protected_usage();
                                             }
                                             page_counter_cancel() {
                                               propagate_protected_usage();
                                             }
                                             page_counter_cancel() {
                                               propagate_protected_usage();
                                             }
                                           }
                                           __rcu_read_lock();
                                           __rcu_read_unlock();
                                         }
                                         __rcu_read_lock();
                                         __rcu_read_unlock();
                                       }
                                     }
                                   }
                                 }
                               }
                               __kfree_skb() {
                                 skb_release_head_state();
                                 skb_release_data() {
                                   skb_free_head() {
                                     kfree() {
                                       __kmem_cache_free();
                                     }
                                   }
                                 }
                                 kfree_skbmem() {
                                   kmem_cache_free();
                                 }
                               }
                               tcp_chrono_stop();
                               tcp_ack_update_rtt() {
                                 tcp_rtt_estimator() {
                                   jiffies_to_usecs();
                                 }
                                 __usecs_to_jiffies();
                               }
                               cubictcp_acked();
                             }
                             tcp_rack_update_reo_wnd();
                             tcp_schedule_loss_probe() {
                               tcp_schedule_loss_probe.part.0();
                             }
                             tcp_rearm_rto();
                             tcp_newly_delivered();
                             tcp_rate_gen();
                             cubictcp_cong_avoid();
                             tcp_update_pacing_rate();
                             tcp_xmit_recovery();
                           }
                           tcp_update_metrics() {
                             __rcu_read_lock();
                             tcp_get_metrics() {
                               __tcp_get_metrics();
                             }
                             __rcu_read_unlock();
                           }
                           tcp_done() {
                             tcp_set_state() {
                               inet_unhash() {
                                 _raw_spin_lock_bh();
                                 _raw_spin_unlock_bh() {
                                   __local_bh_enable_ip();
                                 }
                               }
                               inet_put_port() {
                                 _raw_spin_lock();
                                 _raw_spin_lock();
                                 kmem_cache_free() {
                                   __slab_free();
                                 }
                                 _raw_spin_unlock();
                                 _raw_spin_unlock();
                                 __local_bh_enable_ip();
                               }
                               inet_sk_state_store();
                             }
                             hrtimer_try_to_cancel() {
                               hrtimer_active();
                             }
                             hrtimer_try_to_cancel() {
                               hrtimer_active();
                             }
                             inet_csk_clear_xmit_timers() {
                               sk_stop_timer() {
                                 timer_delete() {
                                   lock_timer_base() {
                                     _raw_spin_lock_irqsave();
                                   }
                                   detach_if_pending();
                                   _raw_spin_unlock_irqrestore();
                                 }
                               }
                               sk_stop_timer() {
                                 timer_delete() {
                                   lock_timer_base() {
                                     _raw_spin_lock_irqsave();
                                   }
                                   detach_if_pending();
                                   _raw_spin_unlock_irqrestore();
                                 }
                               }
                               sk_stop_timer() {
                                 timer_delete() {
                                   lock_timer_base() {
                                     _raw_spin_lock_irqsave();
                                   }
                                   detach_if_pending();
                                   _raw_spin_unlock_irqrestore();
                                 }
                               }
                             }
                             inet_csk_destroy_sock() {
                               tcp_v4_destroy_sock() {
                                 hrtimer_try_to_cancel() {
                                   hrtimer_active();
                                 }
                                 hrtimer_try_to_cancel() {
                                   hrtimer_active();
                                 }
                                 inet_csk_clear_xmit_timers() {
                                   sk_stop_timer() {
                                     timer_delete();
                                   }
                                   sk_stop_timer() {
                                     timer_delete();
                                   }
                                   sk_stop_timer() {
                                     timer_delete();
                                   }
                                 }
                                 tcp_cleanup_congestion_control() {
                                   module_put();
                                 }
                                 tcp_cleanup_ulp();
                                 tcp_write_queue_purge() {
                                   tcp_chrono_stop();
                                 }
                                 tcp_fastopen_active_disable_ofo_check();
                                 skb_rbtree_purge();
                                 tcp_free_fastopen_req();
                                 tcp_fastopen_destroy_cipher();
                                 kfree();
                               }
                               sk_stream_kill_queues() {
                                 skb_queue_purge() {
                                   skb_dequeue() {
                                     _raw_spin_lock_irqsave();
                                     _raw_spin_unlock_irqrestore();
                                   }
                                 }
                               }
                             }
                           }
                           __kfree_skb() {
                             skb_release_head_state();
                             skb_release_data() {
                               skb_free_head() {
                                 kfree() {
                                   __kmem_cache_free();
                                 }
                               }
                             }
                             kfree_skbmem() {
                               kmem_cache_free();
                             }
                           }
                         }
                       }
                       __cond_resched();
                       _raw_spin_lock_bh();
                     }
                     _raw_spin_unlock();
                     __local_bh_enable_ip();
                   }
                   release_sock() {
                     _raw_spin_lock_bh();
                     tcp_release_cb();
                     _raw_spin_unlock_bh() {
                       __local_bh_enable_ip();
                     }
                   }
                   sk_free() {
                     __sk_free() {
                       netlink_has_listeners() {
                         __rcu_read_lock();
                         __rcu_read_unlock();
                       }
                       sk_destruct() {
                         __sk_destruct() {
                           inet_sock_destruct() {
                             kfree();
                             dst_release();
                             dst_release();
                           }
                           bpf_sk_storage_free() {
                             __rcu_read_lock();
                             __rcu_read_unlock();
                           }
                           put_pid();
                           cgroup_sk_free() {
                             __rcu_read_lock();
                             __rcu_read_unlock();
                             __rcu_read_lock();
                             __rcu_read_unlock();
                           }
                           mem_cgroup_sk_free() {
                             __rcu_read_lock();
                             __rcu_read_unlock();
                           }
                           security_sk_free() {
                             apparmor_sk_free_security() {
                               path_put() {
                                 dput();
                                 mntput();
                               }
                             }
                             kfree() {
                               __kmem_cache_free() {
                                 __slab_free();
                               }
                             }
                           }
                           kmem_cache_free() {
                             __slab_free();
                           }
                           module_put();
                         }
                       }
                     }
                   }
                 }
               }
               up_write();
               module_put();
             }
           }
           module_put();
           put_pid();
           dput() {
             __cond_resched();
             __rcu_read_lock();
             _raw_spin_lock();
             __rcu_read_unlock();
             _raw_spin_trylock();
             __dentry_kill() {
               dentry_unlink_inode() {
                 _raw_spin_unlock();
                 _raw_spin_unlock();
                 iput() {
                   _raw_spin_lock();
                   _raw_spin_unlock();
                   evict() {
                     inode_wait_for_writeback() {
                       _raw_spin_lock();
                       __inode_wait_for_writeback() {
                         bit_waitqueue();
                       }
                       _raw_spin_unlock();
                     }
                     truncate_inode_pages_final() {
                       truncate_inode_pages_range();
                     }
                     clear_inode() {
                       _raw_spin_lock_irq();
                       _raw_spin_unlock_irq();
                     }
                     _raw_spin_lock();
                     wake_up_bit();
                     _raw_spin_unlock();
                     destroy_inode() {
                       __destroy_inode() {
                         inode_has_buffers();
                         security_inode_free() {
                           integrity_inode_free();
                           hook_inode_free_security();
                           apparmor_inode_free_security();
                           call_rcu() {
                             __call_rcu_common.constprop.0() {
                               rcu_segcblist_enqueue();
                             }
                           }
                         }
                         __fsnotify_inode_delete() {
                           fsnotify_destroy_marks() {
                             fsnotify_grab_connector() {
                               __srcu_read_lock();
                               __srcu_read_unlock();
                             }
                           }
                         }
                         locks_free_lock_context();
                       }
                       call_rcu() {
                         __call_rcu_common.constprop.0() {
                           rcu_segcblist_enqueue();
                         }
                       }
                     }
                   }
                 }
               }
               _raw_spin_lock();
               _raw_spin_unlock();
               dentry_free() {
                 kmem_cache_free() {
                   obj_cgroup_uncharge() {
                     refill_obj_stock() {
                       drain_obj_stock() {
                         __rcu_read_lock();
                         __mod_memcg_lruvec_state() {
                           cgroup_rstat_updated();
                         }
                         __rcu_read_unlock();
                       }
                       __rcu_read_lock();
                       __rcu_read_unlock();
                       __rcu_read_lock();
                       __rcu_read_unlock();
                     }
                   }
                   mod_objcg_state();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
               }
               __cond_resched();
             }
           }
           mntput() {
             mntput_no_expire() {
               __rcu_read_lock();
               __rcu_read_unlock();
             }
           }
           security_file_free() {
             apparmor_file_free_security();
             kmem_cache_free();
           }
           call_rcu() {
             __call_rcu_common.constprop.0() {
               rcu_segcblist_enqueue();
             }
           }
         }
       }
       __cond_resched();
     }
     mem_cgroup_handle_over_high();
     blkcg_maybe_throttle_current();
   }
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_epoll_wait() {
   ktime_get_ts64();
   timespec64_add_safe();
   do_epoll_wait() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     ep_poll() {
       select_estimate_accuracy() {
         ktime_get_ts64();
         set_normalized_timespec64();
       }
       _raw_write_lock_irq();
       _raw_write_unlock_irq();
       schedule_hrtimeout_range() {
         schedule_hrtimeout_range_clock() {
           hrtimer_init_sleeper() {
             __hrtimer_init();
           }
           hrtimer_start_range_ns() {
             _raw_spin_lock_irqsave();
             __hrtimer_start_range_ns() {
               get_nohz_timer_target();
               enqueue_hrtimer();
             }
             _raw_spin_unlock_irqrestore();
           }
           schedule() {
             rcu_note_context_switch();
             raw_spin_rq_lock_nested() {
               _raw_spin_lock();
             }
             update_rq_clock();
             dequeue_task_fair() {
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                   cpuacct_charge();
                   __cgroup_account_cputime() {
                     cgroup_rstat_updated();
                   }
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group();
                 update_min_vruntime();
               }
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group() {
                   reweight_entity();
                 }
                 update_min_vruntime();
               }
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group() {
                   reweight_entity();
                 }
                 update_min_vruntime();
               }
               hrtick_update();
             }
             pick_next_task() {
               pick_next_task_fair() {
                 newidle_balance() {
                   __rcu_read_lock();
                   __msecs_to_jiffies();
                   __rcu_read_unlock();
                 }
               }
               put_prev_task_fair() {
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
               }
               pick_next_task_idle() {
                 __update_idle_core() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
               }
             }
             psi_task_switch() {
               psi_flags_change();
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
             }
             __traceiter_sched_switch() {
               _raw_spin_lock_irqsave();
               _raw_spin_unlock_irqrestore();
             }
             finish_task_switch.isra.0() {
               raw_spin_rq_unlock() {
                 _raw_spin_unlock();
               }
             }
           }
           hrtimer_active();
         }
       }
       _raw_write_lock_irq();
       _raw_write_unlock_irq();
     }
     fput();
   } /* do_epoll_wait */
 } /* __x64_sys_epoll_wait */
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_open() {
   do_sys_openat2() {
     getname() {
       getname_flags.part.0() {
         kmem_cache_alloc() {
           __cond_resched();
           should_failslab();
         }
         __check_object_size() {
           __check_object_size.part.0() {
             check_stack_object();
             is_vmalloc_addr();
             __virt_addr_valid();
             __check_heap_object();
           }
         }
       }
     }
     get_unused_fd_flags() {
       alloc_fd() {
         _raw_spin_lock();
         expand_files();
         _raw_spin_unlock();
       }
     }
     do_filp_open() {
       path_openat() {
         alloc_empty_file() {
           __alloc_file() {
             kmem_cache_alloc() {
               __cond_resched();
               should_failslab();
               __rcu_read_lock();
               __get_obj_cgroup_from_memcg() {
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               __rcu_read_unlock();
               obj_cgroup_charge() {
                 consume_obj_stock();
                 __rcu_read_lock();
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 __rcu_read_unlock();
                 try_charge_memcg() {
                   consume_stock();
                   page_counter_try_charge() {
                     propagate_protected_usage();
                     propagate_protected_usage();
                     propagate_protected_usage();
                   }
                   refill_stock() {
                     __refill_stock() {
                       drain_stock() {
                         page_counter_uncharge() {
                           page_counter_cancel() {
                             propagate_protected_usage();
                           }
                           page_counter_cancel() {
                             propagate_protected_usage();
                           }
                           page_counter_cancel() {
                             propagate_protected_usage();
                           }
                           page_counter_cancel() {
                             propagate_protected_usage();
                           }
                           page_counter_cancel() {
                             propagate_protected_usage();
                           }
                           page_counter_cancel() {
                             propagate_protected_usage();
                           }
                         }
                         __rcu_read_lock();
                         __rcu_read_unlock();
                       }
                       __rcu_read_lock();
                       __rcu_read_unlock();
                     }
                   }
                 }
                 memcg_account_kmem() {
                   __mod_memcg_state() {
                     cgroup_rstat_updated();
                   }
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 refill_obj_stock() {
                   drain_obj_stock() {
                     __rcu_read_lock();
                     __mod_memcg_lruvec_state() {
                       cgroup_rstat_updated();
                     }
                     __rcu_read_unlock();
                     __rcu_read_lock();
                     __mod_memcg_lruvec_state() {
                       cgroup_rstat_updated();
                     }
                     __rcu_read_unlock();
                   }
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   obj_cgroup_uncharge_pages() {
                     __rcu_read_lock();
                     __rcu_read_lock();
                     __rcu_read_unlock();
                     __rcu_read_unlock();
                     memcg_account_kmem() {
                       __mod_memcg_state() {
                         cgroup_rstat_updated();
                       }
                     }
                     refill_stock() {
                       __refill_stock();
                     }
                     __rcu_read_lock();
                     __rcu_read_unlock();
                   }
                 }
               }
               __rcu_read_lock();
               __rcu_read_unlock();
               mod_objcg_state();
               __rcu_read_lock();
               __rcu_read_unlock();
             }
             security_file_alloc() {
               kmem_cache_alloc() {
                 __cond_resched();
                 should_failslab();
               }
               hook_file_alloc_security();
               apparmor_file_alloc_security() {
                 __cond_resched();
               }
             }
             __mutex_init();
           }
         }
         path_init() {
           __rcu_read_lock();
           nd_jump_root() {
             set_root();
           }
         }
         link_path_walk.part.0.constprop.0() {
           mnt_user_ns();
           inode_permission() {
             ovl_permission [overlay]() {
               ovl_inode_upper [overlay]();
               ovl_i_path_real [overlay]();
               generic_permission() {
                 get_cached_acl_rcu() {
                   do_ovl_get_acl [overlay]() {
                     ovl_i_path_real [overlay]();
                     get_cached_acl_rcu();
                   }
                 }
               }
               ovl_override_creds [overlay]() {
                 override_creds();
               }
               mnt_user_ns();
               inode_permission() {
                 generic_permission();
                 security_inode_permission();
               }
               revert_creds();
             }
             security_inode_permission();
           }
           walk_component() {
             lookup_fast() {
               __d_lookup_rcu();
             }
             step_into() {
               __lookup_mnt();
             }
           }
           mnt_user_ns();
           inode_permission() {
             generic_permission();
             security_inode_permission();
           }
           walk_component() {
             lookup_fast() {
               __d_lookup_rcu();
               pid_revalidate() {
                 __rcu_read_lock();
                 pid_task();
                 task_dump_owner() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 security_task_to_inode();
                 __rcu_read_unlock();
               }
             }
             step_into();
           }
           mnt_user_ns();
           inode_permission() {
             proc_pid_permission() {
               get_pid_task() {
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               generic_permission();
             }
             security_inode_permission();
           }
         }
         open_last_lookups() {
           lookup_fast() {
             __d_lookup_rcu();
             pid_revalidate() {
               __rcu_read_lock();
               pid_task();
               task_dump_owner() {
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 _raw_spin_lock();
                 _raw_spin_unlock();
               }
               security_task_to_inode();
               __rcu_read_unlock();
             }
           }
           step_into();
         }
         do_open() {
           complete_walk() {
             try_to_unlazy() {
               legitimize_links();
               __legitimize_path() {
                 __legitimize_mnt();
               }
               __rcu_read_unlock();
             }
           }
           mnt_user_ns();
           may_open() {
             inode_permission() {
               generic_permission();
               security_inode_permission();
             }
           }
           vfs_open() {
             do_dentry_open() {
               path_get() {
                 mntget();
               }
               try_module_get();
               security_file_open() {
                 hook_file_open();
                 apparmor_file_open() {
                   mnt_user_ns();
                   aa_path_perm() {
                     aa_get_buffer() {
                       _raw_spin_trylock();
                       _raw_spin_unlock();
                     }
                     aa_label_next_confined();
                     profile_path_perm.part.0() {
                       path_name() {
                         aa_path_name() {
                           d_namespace_path.constprop.0() {
                             d_absolute_path() {
                               prepend_path() {
                                 __rcu_read_lock();
                                 __rcu_read_lock();
                                 prepend() {
                                   prepend_copy() {
                                     copy_from_kernel_nofault() {
                                       copy_from_kernel_nofault_allowed();
                                     }
                                   }
                                 }
                                 prepend() {
                                   prepend_copy() {
                                     copy_from_kernel_nofault() {
                                       copy_from_kernel_nofault_allowed();
                                     }
                                   }
                                 }
                                 prepend() {
                                   prepend_copy() {
                                     copy_from_kernel_nofault() {
                                       copy_from_kernel_nofault_allowed();
                                     }
                                   }
                                 }
                                 __rcu_read_unlock();
                                 __rcu_read_unlock();
                               }
                             }
                             our_mnt();
                             our_mnt();
                           }
                         }
                       }
                       __aa_path_perm() {
                         aa_str_perms() {
                           aa_dfa_match();
                         }
                         aa_audit_file();
                       }
                     }
                     aa_label_next_confined();
                     aa_put_buffer() {
                       _raw_spin_trylock();
                       _raw_spin_unlock();
                     }
                   }
                 }
               }
               proc_single_open() {
                 single_open() {
                   kmalloc_trace() {
                     __kmem_cache_alloc_node() {
                       __cond_resched();
                       should_failslab();
                       __rcu_read_lock();
                       __get_obj_cgroup_from_memcg() {
                         __rcu_read_lock();
                         __rcu_read_unlock();
                       }
                       __rcu_read_unlock();
                       obj_cgroup_charge() {
                         consume_obj_stock();
                       }
                       __rcu_read_lock();
                       __rcu_read_unlock();
                       mod_objcg_state();
                       __rcu_read_lock();
                       __rcu_read_unlock();
                     }
                   }
                   seq_open() {
                     kmem_cache_alloc() {
                       __cond_resched();
                       should_failslab();
                       __rcu_read_lock();
                       __get_obj_cgroup_from_memcg() {
                         __rcu_read_lock();
                         __rcu_read_unlock();
                       }
                       __rcu_read_unlock();
                       obj_cgroup_charge() {
                         consume_obj_stock();
                       }
                       __rcu_read_lock();
                       __rcu_read_unlock();
                       mod_objcg_state();
                       __rcu_read_lock();
                       __rcu_read_unlock();
                     }
                     __mutex_init();
                   }
                 }
               }
               file_ra_state_init() {
                 inode_to_bdi();
               }
             }
           }
           ima_file_check() {
             security_current_getsecid_subj() {
               apparmor_current_getsecid_subj();
             }
             process_measurement() {
               mnt_user_ns();
               ima_get_action() {
                 ima_match_policy() {
                   ima_template_desc_current();
                   __rcu_read_lock();
                   ima_match_rules();
                   ima_match_rules();
                   __rcu_read_unlock();
                 }
               }
               down_write() {
                 __cond_resched();
               }
               up_write();
             }
           }
         }
         terminate_walk() {
           dput() {
             __cond_resched();
             __rcu_read_lock();
             __rcu_read_unlock();
           }
           mntput() {
             mntput_no_expire() {
               __rcu_read_lock();
               __rcu_read_unlock();
             }
           }
         }
       }
     }
     fd_install();
     putname() {
       kmem_cache_free();
     }
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_read() {
   ksys_read() {
     __fdget_pos() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
       mutex_lock() {
         __cond_resched();
       }
     }
     vfs_read() {
       rw_verify_area() {
         security_file_permission() {
           apparmor_file_permission() {
             aa_file_perm() {
               __rcu_read_lock();
               aa_label_is_subset();
               __rcu_read_unlock();
             }
           }
         }
       }
       seq_read() {
         __get_task_ioprio();
         seq_read_iter() {
           mutex_lock() {
             __cond_resched();
           }
           kvmalloc_node() {
             __kmalloc_node() {
               kmalloc_slab();
               __kmem_cache_alloc_node() {
                 __cond_resched();
                 should_failslab();
                 __rcu_read_lock();
                 __get_obj_cgroup_from_memcg() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_unlock();
                 obj_cgroup_charge() {
                   consume_obj_stock();
                   __rcu_read_lock();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   __rcu_read_unlock();
                   try_charge_memcg() {
                     consume_stock();
                   }
                   memcg_account_kmem() {
                     __mod_memcg_state() {
                       cgroup_rstat_updated();
                     }
                   }
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   refill_obj_stock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 mod_objcg_state() {
                   __rcu_read_lock();
                   __mod_memcg_lruvec_state() {
                     cgroup_rstat_updated();
                   }
                   __rcu_read_unlock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
             }
           }
           single_start();
           proc_single_show() {
             get_pid_task() {
               __rcu_read_lock();
               __rcu_read_unlock();
             }
             proc_tgid_stat() {
               do_task_stat() {
                 ptrace_may_access() {
                   _raw_spin_lock();
                   __ptrace_may_access();
                   _raw_spin_unlock();
                 }
                 get_task_mm() {
                   _raw_spin_lock();
                   _raw_spin_unlock();
                 }
                 task_vsize();
                 __lock_task_sighand() {
                   __rcu_read_lock();
                   _raw_spin_lock_irqsave();
                   __rcu_read_unlock();
                 }
                 collect_sigign_sigcatch.constprop.0.isra.0();
                 thread_group_cputime_adjusted() {
                   thread_group_cputime() {
                     task_sched_runtime() {
                       task_rq_lock() {
                         _raw_spin_lock_irqsave();
                         raw_spin_rq_lock_nested() {
                           _raw_spin_lock();
                         }
                       }
                       update_rq_clock();
                       update_curr_fair() {
                         update_curr() {
                           update_min_vruntime();
                           cpuacct_charge();
                           __cgroup_account_cputime() {
                             cgroup_rstat_updated();
                           }
                         }
                       }
                       raw_spin_rq_unlock() {
                         _raw_spin_unlock();
                       }
                       _raw_spin_unlock_irqrestore();
                     }
                     __rcu_read_lock();
                     __rcu_read_unlock();
                   }
                   cputime_adjust() {
                     _raw_spin_lock_irqsave();
                     _raw_spin_unlock_irqrestore();
                   }
                 }
                 __task_pid_nr_ns() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __task_pid_nr_ns() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __task_pid_nr_ns() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 _raw_spin_unlock_irqrestore();
                 task_prio();
                 nsec_to_clock_t();
                 pid_nr_ns();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_puts();
                 proc_task_name() {
                   __get_task_comm() {
                     _raw_spin_lock();
                     _raw_spin_unlock();
                   }
                   seq_printf();
                 }
                 seq_puts();
                 seq_putc();
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 nsec_to_clock_t();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 nsec_to_clock_t();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 nsec_to_clock_t();
                 seq_put_decimal_ll();
                 nsec_to_clock_t();
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 nsec_to_clock_t();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 nsec_to_clock_t();
                 seq_put_decimal_ll();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ll();
                 seq_putc();
                 mmput() {
                   __cond_resched();
                 }
               }
             }
           }
           single_next();
           single_stop();
           __check_object_size() {
             __check_object_size.part.0() {
               check_stack_object();
               is_vmalloc_addr();
               __virt_addr_valid();
               __check_heap_object();
             }
           }
           mutex_unlock();
         }
       }
     }
     __f_unlock_pos() {
       mutex_unlock();
     }
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_close() {
   close_fd() {
     _raw_spin_lock();
     pick_file();
     _raw_spin_unlock();
     filp_close() {
       dnotify_flush();
       locks_remove_posix();
       fput() {
         task_work_add() {
           kick_process();
         }
       }
     }
   }
 }
 exit_to_user_mode_prepare() {
   exit_to_user_mode_loop() {
     task_work_run() {
       _raw_spin_lock_irq();
       _raw_spin_unlock_irq();
       ____fput() {
         __fput() {
           __cond_resched();
           locks_remove_file();
           ima_file_free() {
             integrity_iint_find();
           }
           single_release() {
             kvfree() {
               is_vmalloc_addr();
               kfree() {
                 __kmem_cache_free() {
                   obj_cgroup_uncharge() {
                     refill_obj_stock() {
                       obj_cgroup_uncharge_pages() {
                         __rcu_read_lock();
                         __rcu_read_lock();
                         __rcu_read_unlock();
                         __rcu_read_unlock();
                         memcg_account_kmem() {
                           __mod_memcg_state() {
                             cgroup_rstat_updated();
                           }
                         }
                         refill_stock() {
                           __refill_stock();
                         }
                         __rcu_read_lock();
                         __rcu_read_unlock();
                       }
                     }
                   }
                   mod_objcg_state();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
               }
             }
             kmem_cache_free() {
               obj_cgroup_uncharge() {
                 refill_obj_stock();
               }
               mod_objcg_state() {
                 __rcu_read_lock();
                 __mod_memcg_lruvec_state() {
                   cgroup_rstat_updated();
                 }
                 __rcu_read_unlock();
               }
               __rcu_read_lock();
               __rcu_read_unlock();
             }
             kfree() {
               __kmem_cache_free() {
                 obj_cgroup_uncharge() {
                   refill_obj_stock();
                 }
                 mod_objcg_state();
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
             }
           }
           module_put();
           put_pid();
           dput() {
             __cond_resched();
             __rcu_read_lock();
             _raw_spin_lock();
             __rcu_read_unlock();
             pid_delete_dentry();
             _raw_spin_unlock();
           }
           mntput() {
             mntput_no_expire() {
               __rcu_read_lock();
               __rcu_read_unlock();
             }
           }
           security_file_free() {
             apparmor_file_free_security();
             kmem_cache_free();
           }
           call_rcu() {
             __call_rcu_common.constprop.0() {
               rcu_segcblist_enqueue();
             }
           }
         }
       }
       __cond_resched();
     }
     mem_cgroup_handle_over_high();
     blkcg_maybe_throttle_current();
   }
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_epoll_wait() {
   ktime_get_ts64();
   timespec64_add_safe();
   do_epoll_wait() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     ep_poll() {
       select_estimate_accuracy() {
         ktime_get_ts64();
         set_normalized_timespec64();
       }
       _raw_write_lock_irq();
       _raw_write_unlock_irq();
       schedule_hrtimeout_range() {
         schedule_hrtimeout_range_clock() {
           hrtimer_init_sleeper() {
             __hrtimer_init();
           }
           hrtimer_start_range_ns() {
             _raw_spin_lock_irqsave();
             __hrtimer_start_range_ns() {
               get_nohz_timer_target();
               enqueue_hrtimer();
             }
             _raw_spin_unlock_irqrestore();
           }
           schedule() {
             rcu_note_context_switch();
             raw_spin_rq_lock_nested() {
               _raw_spin_lock();
             }
             update_rq_clock();
             dequeue_task_fair() {
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                   cpuacct_charge();
                   __cgroup_account_cputime() {
                     cgroup_rstat_updated();
                   }
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group();
                 update_min_vruntime();
               }
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group() {
                   reweight_entity();
                 }
                 update_min_vruntime();
               }
               dequeue_entity() {
                 update_curr() {
                   __calc_delta();
                   update_min_vruntime();
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group() {
                   reweight_entity();
                 }
                 update_min_vruntime();
               }
               hrtick_update();
             }
             pick_next_task() {
               pick_next_task_fair() {
                 check_cfs_rq_runtime();
                 pick_next_entity();
                 pick_next_entity();
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 set_next_entity() {
                   clear_buddies();
                   __update_load_avg_se();
                   __update_load_avg_cfs_rq();
                 }
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 set_next_entity() {
                   clear_buddies();
                   __update_load_avg_se();
                   __update_load_avg_cfs_rq();
                 }
               }
             }
             psi_task_switch() {
               psi_flags_change();
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_flags_change();
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
             }
             __traceiter_sched_switch() {
               _raw_spin_lock_irqsave();
               _raw_spin_unlock_irqrestore();
             }
             finish_task_switch.isra.0() {
               raw_spin_rq_unlock() {
                 _raw_spin_unlock();
               }
             }
           }
           hrtimer_active();
           hrtimer_try_to_cancel.part.0() {
             _raw_spin_lock_irqsave();
             __remove_hrtimer();
             _raw_spin_unlock_irqrestore();
           }
         }
       }
       ep_send_events() {
         mutex_lock() {
           __cond_resched();
         }
         _raw_write_lock_irq();
         _raw_write_unlock_irq();
         ep_item_poll.isra.0() {
           sock_poll() {
             tcp_poll();
           }
         }
         ep_done_scan() {
           _raw_write_lock_irq();
           __pm_relax();
           _raw_write_unlock_irq();
         }
         mutex_unlock();
       }
     }
     fput();
   } /* do_epoll_wait */
 } /* __x64_sys_epoll_wait */
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_accept() {
   __sys_accept4() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     get_unused_fd_flags() {
       alloc_fd() {
         _raw_spin_lock();
         expand_files();
         _raw_spin_unlock();
       }
     }
     do_accept() {
       sock_alloc() {
         new_inode_pseudo() {
           alloc_inode() {
             sock_alloc_inode() {
               kmem_cache_alloc_lru() {
                 __cond_resched();
                 should_failslab();
                 __rcu_read_lock();
                 __get_obj_cgroup_from_memcg() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_unlock();
                 __rcu_read_lock();
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 __rcu_read_unlock();
                 memcg_list_lru_alloc() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 obj_cgroup_charge() {
                   consume_obj_stock();
                   __rcu_read_lock();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   __rcu_read_unlock();
                   try_charge_memcg() {
                     consume_stock();
                     page_counter_try_charge() {
                       propagate_protected_usage();
                       propagate_protected_usage();
                       propagate_protected_usage();
                     }
                     refill_stock() {
                       __refill_stock() {
                         drain_stock() {
                           page_counter_uncharge() {
                             page_counter_cancel() {
                               propagate_protected_usage();
                             }
                             page_counter_cancel() {
                               propagate_protected_usage();
                             }
                             page_counter_cancel() {
                               propagate_protected_usage();
                             }
                             page_counter_cancel() {
                               propagate_protected_usage();
                             }
                             page_counter_cancel() {
                               propagate_protected_usage();
                             }
                             page_counter_cancel() {
                               propagate_protected_usage();
                             }
                             page_counter_cancel() {
                               propagate_protected_usage();
                             }
                           }
                           __rcu_read_lock();
                           __rcu_read_unlock();
                         }
                         __rcu_read_lock();
                         __rcu_read_unlock();
                       }
                     }
                   }
                   memcg_account_kmem() {
                     __mod_memcg_state() {
                       cgroup_rstat_updated();
                     }
                   }
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   refill_obj_stock() {
                     drain_obj_stock() {
                       __rcu_read_lock();
                       __mod_memcg_lruvec_state() {
                         cgroup_rstat_updated();
                       }
                       __rcu_read_unlock();
                       __rcu_read_lock();
                       __mod_memcg_lruvec_state() {
                         cgroup_rstat_updated();
                       }
                       __rcu_read_unlock();
                     }
                     __rcu_read_lock();
                     __rcu_read_unlock();
                     __rcu_read_lock();
                     __rcu_read_unlock();
                     obj_cgroup_uncharge_pages() {
                       __rcu_read_lock();
                       __rcu_read_lock();
                       __rcu_read_unlock();
                       __rcu_read_unlock();
                       memcg_account_kmem() {
                         __mod_memcg_state() {
                           cgroup_rstat_updated();
                         }
                       }
                       refill_stock() {
                         __refill_stock();
                       }
                       __rcu_read_lock();
                       __rcu_read_unlock();
                     }
                   }
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 mod_objcg_state();
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               __init_waitqueue_head();
             }
             inode_init_always() {
               make_kuid() {
                 map_id_range_down();
               }
               make_kgid() {
                 map_id_range_down();
               }
               __init_rwsem();
               __init_rwsem();
               security_inode_alloc() {
                 kmem_cache_alloc() {
                   __cond_resched();
                   should_failslab();
                 }
                 apparmor_inode_alloc_security();
               }
             }
           }
           _raw_spin_lock();
           _raw_spin_unlock();
         }
         get_next_ino();
       }
       __module_get();
       sock_alloc_file() {
         alloc_file_pseudo() {
           d_alloc_pseudo() {
             __d_alloc() {
               kmem_cache_alloc_lru() {
                 __cond_resched();
                 should_failslab();
                 __rcu_read_lock();
                 __get_obj_cgroup_from_memcg() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_unlock();
                 __rcu_read_lock();
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 __rcu_read_unlock();
                 memcg_list_lru_alloc() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 obj_cgroup_charge() {
                   consume_obj_stock();
                 }
                 ___slab_alloc();
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 mod_objcg_state();
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               d_set_d_op();
             }
           }
           mntget();
           d_instantiate() {
             security_d_instantiate() {
               apparmor_d_instantiate() {
                 _raw_spin_lock();
                 _raw_spin_unlock();
               }
             }
             _raw_spin_lock();
             __d_instantiate() {
               d_flags_for_inode();
               _raw_spin_lock();
               _raw_spin_unlock();
             }
             _raw_spin_unlock();
           }
           alloc_file() {
             alloc_empty_file() {
               __alloc_file() {
                 kmem_cache_alloc() {
                   __cond_resched();
                   should_failslab();
                   __rcu_read_lock();
                   __get_obj_cgroup_from_memcg() {
                     __rcu_read_lock();
                     __rcu_read_unlock();
                   }
                   __rcu_read_unlock();
                   obj_cgroup_charge() {
                     consume_obj_stock();
                   }
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   mod_objcg_state();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 security_file_alloc() {
                   kmem_cache_alloc() {
                     __cond_resched();
                     should_failslab();
                   }
                   hook_file_alloc_security();
                   apparmor_file_alloc_security() {
                     __cond_resched();
                   }
                 }
                 __mutex_init();
               }
             }
           }
         }
         stream_open();
       }
       security_socket_accept() {
         apparmor_socket_accept() {
           aa_sk_perm() {
             __cond_resched();
             aa_label_sk_perm.part.0() {
               aa_label_next_confined();
               aa_profile_af_perm() {
                 aa_apply_modes_to_perms();
                 aa_check_perms();
               }
               aa_label_next_confined();
             }
           }
         }
       }
       inet_accept() {
         inet_csk_accept() {
           lock_sock_nested() {
             __cond_resched();
             _raw_spin_lock_bh();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           _raw_spin_lock_bh();
           _raw_spin_unlock_bh() {
             __local_bh_enable_ip();
           }
           release_sock() {
             _raw_spin_lock_bh();
             tcp_release_cb();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           lock_sock_nested() {
             __cond_resched();
             _raw_spin_lock_bh();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           mem_cgroup_sk_alloc() {
             __rcu_read_lock();
             __rcu_read_lock();
             __rcu_read_unlock();
             __rcu_read_unlock();
           }
           release_sock() {
             _raw_spin_lock_bh();
             tcp_release_cb();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           tcp_v4_reqsk_destructor() {
             kfree();
           }
           kfree();
           kmem_cache_free();
         }
         lock_sock_nested() {
           __cond_resched();
           _raw_spin_lock_bh();
           _raw_spin_unlock_bh() {
             __local_bh_enable_ip();
           }
         }
         _raw_write_lock_bh();
         security_sock_graft() {
           apparmor_sock_graft();
         }
         _raw_write_unlock_bh() {
           __local_bh_enable_ip();
         }
         release_sock() {
           _raw_spin_lock_bh();
           tcp_release_cb();
           _raw_spin_unlock_bh() {
             __local_bh_enable_ip();
           }
         }
       }
       inet_getname() {
         lock_sock_nested() {
           __cond_resched();
           _raw_spin_lock_bh();
           _raw_spin_unlock_bh() {
             __local_bh_enable_ip();
           }
         }
         release_sock() {
           _raw_spin_lock_bh();
           tcp_release_cb();
           _raw_spin_unlock_bh() {
             __local_bh_enable_ip();
           }
         }
       }
       move_addr_to_user() {
         __check_object_size() {
           __check_object_size.part.0() {
             check_stack_object();
           }
         }
       }
     }
     fd_install();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_fcntl() {
   __fdget_raw() {
     __fget_light() {
       __rcu_read_lock();
       __rcu_read_unlock();
     }
   }
   security_file_fcntl();
   do_fcntl();
   fput();
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_fcntl() {
   __fdget_raw() {
     __fget_light() {
       __rcu_read_lock();
       __rcu_read_unlock();
     }
   }
   security_file_fcntl();
   do_fcntl() {
     setfl() {
       _raw_spin_lock();
       _raw_spin_unlock();
     }
   }
   fput();
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_setsockopt() {
   __sys_setsockopt() {
     sockfd_lookup_light() {
       __fdget() {
         __fget_light() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
       }
     }
     security_socket_setsockopt() {
       apparmor_socket_setsockopt() {
         aa_sk_perm() {
           __cond_resched();
           aa_label_sk_perm.part.0() {
             aa_label_next_confined();
             aa_profile_af_perm() {
               aa_apply_modes_to_perms();
               aa_check_perms();
             }
             aa_label_next_confined();
           }
         }
       }
     }
     sock_common_setsockopt() {
       tcp_setsockopt() {
         do_tcp_setsockopt() {
           sockopt_lock_sock() {
             __cond_resched();
             _raw_spin_lock_bh();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           sockopt_release_sock() {
             release_sock() {
               _raw_spin_lock_bh();
               tcp_release_cb();
               _raw_spin_unlock_bh() {
                 __local_bh_enable_ip();
               }
             }
           }
         }
       }
     }
     kfree();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_setsockopt() {
   __sys_setsockopt() {
     sockfd_lookup_light() {
       __fdget() {
         __fget_light() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
       }
     }
     security_socket_setsockopt() {
       apparmor_socket_setsockopt() {
         aa_sk_perm() {
           __cond_resched();
           aa_label_sk_perm.part.0() {
             aa_label_next_confined();
             aa_profile_af_perm() {
               aa_apply_modes_to_perms();
               aa_check_perms();
             }
             aa_label_next_confined();
           }
         }
       }
     }
     sock_setsockopt() {
       sk_setsockopt() {
         __cond_resched();
         _raw_spin_lock_bh();
         _raw_spin_unlock_bh() {
           __local_bh_enable_ip();
         }
         tcp_set_keepalive() {
           inet_csk_reset_keepalive_timer() {
             sk_reset_timer() {
               mod_timer() {
                 lock_timer_base() {
                   _raw_spin_lock_irqsave();
                 }
                 detach_if_pending();
                 get_nohz_timer_target();
                 calc_wheel_index();
                 enqueue_timer();
                 _raw_spin_unlock_irqrestore();
               }
             }
           }
         }
         release_sock() {
           _raw_spin_lock_bh();
           tcp_release_cb();
           _raw_spin_unlock_bh() {
             __local_bh_enable_ip();
           }
         }
       }
     }
     kfree();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_setsockopt() {
   __sys_setsockopt() {
     sockfd_lookup_light() {
       __fdget() {
         __fget_light() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
       }
     }
     security_socket_setsockopt() {
       apparmor_socket_setsockopt() {
         aa_sk_perm() {
           __cond_resched();
           aa_label_sk_perm.part.0() {
             aa_label_next_confined();
             aa_profile_af_perm() {
               aa_apply_modes_to_perms();
               aa_check_perms();
             }
             aa_label_next_confined();
           }
         }
       }
     }
     sock_common_setsockopt() {
       tcp_setsockopt() {
         do_tcp_setsockopt() {
           sockopt_lock_sock() {
             __cond_resched();
             _raw_spin_lock_bh();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           tcp_sock_set_keepidle_locked() {
             inet_csk_reset_keepalive_timer() {
               sk_reset_timer() {
                 mod_timer() {
                   lock_timer_base() {
                     _raw_spin_lock_irqsave();
                   }
                   calc_wheel_index();
                   detach_if_pending();
                   get_nohz_timer_target();
                   enqueue_timer();
                   _raw_spin_unlock_irqrestore();
                 }
               }
             }
           }
           sockopt_release_sock() {
             release_sock() {
               _raw_spin_lock_bh();
               tcp_release_cb();
               _raw_spin_unlock_bh() {
                 __local_bh_enable_ip();
               }
             }
           }
         }
       }
     }
     kfree();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_setsockopt() {
   __sys_setsockopt() {
     sockfd_lookup_light() {
       __fdget() {
         __fget_light() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
       }
     }
     security_socket_setsockopt() {
       apparmor_socket_setsockopt() {
         aa_sk_perm() {
           __cond_resched();
           aa_label_sk_perm.part.0() {
             aa_label_next_confined();
             aa_profile_af_perm() {
               aa_apply_modes_to_perms();
               aa_check_perms();
             }
             aa_label_next_confined();
           }
         }
       }
     }
     sock_common_setsockopt() {
       tcp_setsockopt() {
         do_tcp_setsockopt() {
           sockopt_lock_sock() {
             __cond_resched();
             _raw_spin_lock_bh();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           sockopt_release_sock() {
             release_sock() {
               _raw_spin_lock_bh();
               tcp_release_cb();
               _raw_spin_unlock_bh() {
                 __local_bh_enable_ip();
               }
             }
           }
         }
       }
     }
     kfree();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_setsockopt() {
   __sys_setsockopt() {
     sockfd_lookup_light() {
       __fdget() {
         __fget_light() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
       }
     }
     security_socket_setsockopt() {
       apparmor_socket_setsockopt() {
         aa_sk_perm() {
           __cond_resched();
           aa_label_sk_perm.part.0() {
             aa_label_next_confined();
             aa_profile_af_perm() {
               aa_apply_modes_to_perms();
               aa_check_perms();
             }
             aa_label_next_confined();
           }
         }
       }
     }
     sock_common_setsockopt() {
       tcp_setsockopt() {
         do_tcp_setsockopt() {
           sockopt_lock_sock() {
             __cond_resched();
             _raw_spin_lock_bh();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           sockopt_release_sock() {
             release_sock() {
               _raw_spin_lock_bh();
               tcp_release_cb();
               _raw_spin_unlock_bh() {
                 __local_bh_enable_ip();
               }
             }
           }
         }
       }
     }
     kfree();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_epoll_ctl() {
   do_epoll_ctl() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     mutex_lock() {
       __cond_resched();
     }
     ep_insert() {
       kmem_cache_alloc() {
         __cond_resched();
         should_failslab();
         __rcu_read_lock();
         __get_obj_cgroup_from_memcg() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
         __rcu_read_unlock();
         obj_cgroup_charge() {
           consume_obj_stock();
         }
         __rcu_read_lock();
         __rcu_read_unlock();
         mod_objcg_state();
         __rcu_read_lock();
         __rcu_read_unlock();
       }
       kmem_cache_alloc() {
         __cond_resched();
         should_failslab();
         __rcu_read_lock();
         __get_obj_cgroup_from_memcg() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
         __rcu_read_unlock();
         obj_cgroup_charge() {
           consume_obj_stock();
         }
         __rcu_read_lock();
         __rcu_read_unlock();
         mod_objcg_state();
         __rcu_read_lock();
         __rcu_read_unlock();
       }
       _raw_spin_lock();
       _raw_spin_unlock();
       ep_item_poll.isra.0() {
         sock_poll() {
           tcp_poll() {
             ep_ptable_queue_proc() {
               kmem_cache_alloc() {
                 __cond_resched();
                 should_failslab();
                 __rcu_read_lock();
                 __get_obj_cgroup_from_memcg() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_unlock();
                 obj_cgroup_charge() {
                   consume_obj_stock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 mod_objcg_state();
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               add_wait_queue() {
                 _raw_spin_lock_irqsave();
                 _raw_spin_unlock_irqrestore();
               }
             }
             tcp_stream_memory_free();
           }
         }
       }
       _raw_write_lock_irq();
       _raw_write_unlock_irq();
     }
     mutex_unlock();
     fput();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_accept() {
   __sys_accept4() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     get_unused_fd_flags() {
       alloc_fd() {
         _raw_spin_lock();
         expand_files();
         _raw_spin_unlock();
       }
     }
     do_accept() {
       sock_alloc() {
         new_inode_pseudo() {
           alloc_inode() {
             sock_alloc_inode() {
               kmem_cache_alloc_lru() {
                 __cond_resched();
                 should_failslab();
                 __rcu_read_lock();
                 __get_obj_cgroup_from_memcg() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_unlock();
                 __rcu_read_lock();
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 __rcu_read_unlock();
                 memcg_list_lru_alloc() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 obj_cgroup_charge() {
                   consume_obj_stock();
                   __rcu_read_lock();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   __rcu_read_unlock();
                   try_charge_memcg() {
                     consume_stock();
                   }
                   memcg_account_kmem() {
                     __mod_memcg_state() {
                       cgroup_rstat_updated();
                     }
                   }
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   refill_obj_stock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 mod_objcg_state();
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               __init_waitqueue_head();
             }
             inode_init_always() {
               make_kuid() {
                 map_id_range_down();
               }
               make_kgid() {
                 map_id_range_down();
               }
               __init_rwsem();
               __init_rwsem();
               security_inode_alloc() {
                 kmem_cache_alloc() {
                   __cond_resched();
                   should_failslab();
                 }
                 apparmor_inode_alloc_security();
               }
             }
           }
           _raw_spin_lock();
           _raw_spin_unlock();
         }
         get_next_ino();
       }
       __module_get();
       sock_alloc_file() {
         alloc_file_pseudo() {
           d_alloc_pseudo() {
             __d_alloc() {
               kmem_cache_alloc_lru() {
                 __cond_resched();
                 should_failslab();
                 __rcu_read_lock();
                 __get_obj_cgroup_from_memcg() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_unlock();
                 __rcu_read_lock();
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 __rcu_read_unlock();
                 memcg_list_lru_alloc() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 obj_cgroup_charge() {
                   consume_obj_stock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 mod_objcg_state();
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               d_set_d_op();
             }
           }
           mntget();
           d_instantiate() {
             security_d_instantiate() {
               apparmor_d_instantiate() {
                 _raw_spin_lock();
                 _raw_spin_unlock();
               }
             }
             _raw_spin_lock();
             __d_instantiate() {
               d_flags_for_inode();
               _raw_spin_lock();
               _raw_spin_unlock();
             }
             _raw_spin_unlock();
           }
           alloc_file() {
             alloc_empty_file() {
               __alloc_file() {
                 kmem_cache_alloc() {
                   __cond_resched();
                   should_failslab();
                   __rcu_read_lock();
                   __get_obj_cgroup_from_memcg() {
                     __rcu_read_lock();
                     __rcu_read_unlock();
                   }
                   __rcu_read_unlock();
                   obj_cgroup_charge() {
                     consume_obj_stock();
                   }
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   mod_objcg_state();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 security_file_alloc() {
                   kmem_cache_alloc() {
                     __cond_resched();
                     should_failslab();
                   }
                   hook_file_alloc_security();
                   apparmor_file_alloc_security() {
                     __cond_resched();
                   }
                 }
                 __mutex_init();
               }
             }
           }
         }
         stream_open();
       }
       security_socket_accept() {
         apparmor_socket_accept() {
           aa_sk_perm() {
             __cond_resched();
             aa_label_sk_perm.part.0() {
               aa_label_next_confined();
               aa_profile_af_perm() {
                 aa_apply_modes_to_perms();
                 aa_check_perms();
               }
               aa_label_next_confined();
             }
           }
         }
       }
       inet_accept() {
         inet_csk_accept() {
           lock_sock_nested() {
             __cond_resched();
             _raw_spin_lock_bh();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           release_sock() {
             _raw_spin_lock_bh();
             tcp_release_cb();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
         }
       }
       fput() {
         task_work_add() {
           kick_process();
         }
       }
     }
     put_unused_fd() {
       _raw_spin_lock();
       _raw_spin_unlock();
     }
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   exit_to_user_mode_loop() {
     task_work_run() {
       _raw_spin_lock_irq();
       _raw_spin_unlock_irq();
       ____fput() {
         __fput() {
           __cond_resched();
           locks_remove_file();
           ima_file_free();
           sock_close() {
             __sock_release() {
               down_write() {
                 __cond_resched();
               }
               inet_release();
               up_write();
               module_put();
             }
           }
           module_put();
           put_pid();
           dput() {
             __cond_resched();
             __rcu_read_lock();
             _raw_spin_lock();
             __rcu_read_unlock();
             _raw_spin_trylock();
             __dentry_kill() {
               dentry_unlink_inode() {
                 _raw_spin_unlock();
                 _raw_spin_unlock();
                 iput() {
                   _raw_spin_lock();
                   _raw_spin_unlock();
                   evict() {
                     inode_wait_for_writeback() {
                       _raw_spin_lock();
                       __inode_wait_for_writeback() {
                         bit_waitqueue();
                       }
                       _raw_spin_unlock();
                     }
                     truncate_inode_pages_final() {
                       truncate_inode_pages_range();
                     }
                     clear_inode() {
                       _raw_spin_lock_irq();
                       _raw_spin_unlock_irq();
                     }
                     _raw_spin_lock();
                     wake_up_bit();
                     _raw_spin_unlock();
                     destroy_inode() {
                       __destroy_inode() {
                         inode_has_buffers();
                         security_inode_free() {
                           integrity_inode_free();
                           hook_inode_free_security();
                           apparmor_inode_free_security();
                           call_rcu() {
                             __call_rcu_common.constprop.0() {
                               rcu_segcblist_enqueue();
                             }
                           }
                         }
                         __fsnotify_inode_delete() {
                           fsnotify_destroy_marks() {
                             fsnotify_grab_connector() {
                               __srcu_read_lock();
                               __srcu_read_unlock();
                             }
                           }
                         }
                         locks_free_lock_context();
                       }
                       call_rcu() {
                         __call_rcu_common.constprop.0() {
                           rcu_segcblist_enqueue();
                         }
                       }
                     }
                   }
                 }
               }
               _raw_spin_lock();
               _raw_spin_unlock();
               dentry_free() {
                 kmem_cache_free() {
                   obj_cgroup_uncharge() {
                     refill_obj_stock();
                   }
                   mod_objcg_state();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
               }
               __cond_resched();
             }
           }
           mntput() {
             mntput_no_expire() {
               __rcu_read_lock();
               __rcu_read_unlock();
             }
           }
           security_file_free() {
             apparmor_file_free_security();
             kmem_cache_free();
           }
           call_rcu() {
             __call_rcu_common.constprop.0() {
               rcu_segcblist_enqueue();
             }
           }
         }
       }
       __cond_resched();
     }
     mem_cgroup_handle_over_high();
     blkcg_maybe_throttle_current();
   }
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_epoll_wait() {
   ktime_get_ts64();
   timespec64_add_safe();
   do_epoll_wait() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     ep_poll() {
       select_estimate_accuracy() {
         ktime_get_ts64();
         set_normalized_timespec64();
       }
       ep_send_events() {
         mutex_lock() {
           __cond_resched();
         }
         _raw_write_lock_irq();
         _raw_write_unlock_irq();
         ep_item_poll.isra.0() {
           sock_poll() {
             tcp_poll();
           }
         }
         ep_done_scan() {
           _raw_write_lock_irq();
           __pm_relax();
           _raw_write_unlock_irq();
         }
         mutex_unlock();
       }
       _raw_write_lock_irq();
       _raw_write_unlock_irq();
       schedule_hrtimeout_range() {
         schedule_hrtimeout_range_clock() {
           hrtimer_init_sleeper() {
             __hrtimer_init();
           }
           hrtimer_start_range_ns() {
             _raw_spin_lock_irqsave();
             __hrtimer_start_range_ns() {
               get_nohz_timer_target();
               enqueue_hrtimer();
             }
             _raw_spin_unlock_irqrestore();
           }
           schedule() {
             rcu_note_context_switch();
             raw_spin_rq_lock_nested() {
               _raw_spin_lock();
             }
             update_rq_clock();
             dequeue_task_fair() {
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                   cpuacct_charge();
                   __cgroup_account_cputime() {
                     cgroup_rstat_updated();
                   }
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group();
                 update_min_vruntime();
               }
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group() {
                   reweight_entity();
                 }
                 update_min_vruntime();
               }
               dequeue_entity() {
                 update_curr() {
                   __calc_delta();
                   update_min_vruntime();
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group() {
                   reweight_entity();
                 }
                 update_min_vruntime();
               }
               hrtick_update();
             }
             pick_next_task() {
               pick_next_task_fair() {
                 check_cfs_rq_runtime();
                 pick_next_entity();
                 pick_next_entity();
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 set_next_entity() {
                   clear_buddies();
                   __update_load_avg_se();
                   __update_load_avg_cfs_rq();
                 }
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 set_next_entity() {
                   clear_buddies();
                   __update_load_avg_se();
                   __update_load_avg_cfs_rq();
                 }
               }
             }
             psi_task_switch() {
               psi_flags_change();
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_flags_change();
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
             }
             __traceiter_sched_switch() {
               _raw_spin_lock_irqsave();
               _raw_spin_unlock_irqrestore();
             }
             finish_task_switch.isra.0() {
               raw_spin_rq_unlock() {
                 _raw_spin_unlock();
               }
             }
           }
           hrtimer_active();
           hrtimer_try_to_cancel.part.0() {
             _raw_spin_lock_irqsave();
             __remove_hrtimer();
             _raw_spin_unlock_irqrestore();
           }
         }
       }
       ep_send_events() {
         mutex_lock() {
           __cond_resched();
         }
         _raw_write_lock_irq();
         _raw_write_unlock_irq();
         ep_item_poll.isra.0() {
           sock_poll() {
             tcp_poll() {
               tcp_stream_memory_free();
             }
           }
         }
         ep_done_scan() {
           _raw_write_lock_irq();
           __pm_relax();
           _raw_write_unlock_irq();
         }
         mutex_unlock();
       }
     }
     fput();
   } /* do_epoll_wait */
 } /* __x64_sys_epoll_wait */
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_read() {
   ksys_read() {
     __fdget_pos() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     vfs_read() {
       rw_verify_area() {
         security_file_permission() {
           apparmor_file_permission() {
             aa_file_perm() {
               __rcu_read_lock();
               __rcu_read_unlock();
               aa_sock_file_perm() {
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
               aa_sock_file_perm() {
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
               update_file_ctx() {
                 _raw_spin_lock();
                 aa_label_merge();
                 _raw_spin_unlock();
               }
             }
           }
         }
       }
       __get_task_ioprio();
       sock_read_iter() {
         sock_recvmsg() {
           security_socket_recvmsg() {
             apparmor_socket_recvmsg() {
               aa_sk_perm() {
                 __cond_resched();
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
             }
           }
           inet_recvmsg() {
             tcp_recvmsg() {
               lock_sock_nested() {
                 __cond_resched();
                 _raw_spin_lock_bh();
                 _raw_spin_unlock_bh() {
                   __local_bh_enable_ip();
                 }
               }
               tcp_recvmsg_locked() {
                 skb_copy_datagram_iter() {
                   __skb_datagram_iter() {
                     __cond_resched();
                     simple_copy_to_iter() {
                       __check_object_size() {
                         __check_object_size.part.0() {
                           check_stack_object();
                           is_vmalloc_addr();
                           __virt_addr_valid();
                         }
                       }
                     }
                   }
                 }
                 tcp_rcv_space_adjust() {
                   tcp_mstamp_refresh() {
                     ktime_get();
                   }
                 }
                 sock_rfree() {
                   __sk_mem_reduce_allocated() {
                     mem_cgroup_uncharge_skmem() {
                       __mod_memcg_state() {
                         cgroup_rstat_updated();
                       }
                       refill_stock() {
                         __refill_stock() {
                           drain_stock() {
                             page_counter_uncharge() {
                               page_counter_cancel() {
                                 propagate_protected_usage();
                               }
                               page_counter_cancel() {
                                 propagate_protected_usage();
                               }
                               page_counter_cancel() {
                                 propagate_protected_usage();
                               }
                               page_counter_cancel() {
                                 propagate_protected_usage();
                               }
                               page_counter_cancel() {
                                 propagate_protected_usage();
                               }
                               page_counter_cancel() {
                                 propagate_protected_usage();
                               }
                               page_counter_cancel() {
                                 propagate_protected_usage();
                               }
                             }
                             __rcu_read_lock();
                             __rcu_read_unlock();
                           }
                           __rcu_read_lock();
                           __rcu_read_unlock();
                         }
                       }
                     }
                   }
                 }
                 skb_attempt_defer_free() {
                   skb_release_head_state();
                   skb_release_data() {
                     skb_free_head() {
                       kfree() {
                         __kmem_cache_free();
                       }
                     }
                   }
                   kfree_skbmem() {
                     kmem_cache_free();
                   }
                 }
                 tcp_cleanup_rbuf() {
                   __tcp_cleanup_rbuf();
                 }
               }
               release_sock() {
                 _raw_spin_lock_bh();
                 tcp_release_cb();
                 _raw_spin_unlock_bh() {
                   __local_bh_enable_ip();
                 }
               }
             }
           }
         }
       }
     }
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_write() {
   ksys_write() {
     __fdget_pos() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     vfs_write() {
       rw_verify_area() {
         security_file_permission() {
           apparmor_file_permission() {
             aa_file_perm() {
               __rcu_read_lock();
               __rcu_read_unlock();
               aa_sock_file_perm() {
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
               aa_sock_file_perm() {
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
               update_file_ctx() {
                 _raw_spin_lock();
                 aa_label_merge();
                 _raw_spin_unlock();
               }
             }
           }
         }
       }
       __get_task_ioprio();
       sock_write_iter() {
         sock_sendmsg() {
           security_socket_sendmsg() {
             apparmor_socket_sendmsg() {
               aa_sk_perm() {
                 __cond_resched();
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
             }
           }
           inet_sendmsg() {
             inet_send_prepare();
             tcp_sendmsg() {
               lock_sock_nested() {
                 __cond_resched();
                 _raw_spin_lock_bh();
                 _raw_spin_unlock_bh() {
                   __local_bh_enable_ip();
                 }
               }
               tcp_sendmsg_locked() {
                 tcp_rate_check_app_limited();
                 tcp_send_mss() {
                   tcp_current_mss() {
                     ipv4_mtu();
                     tcp_established_options();
                   }
                 }
                 tcp_stream_memory_free();
                 tcp_stream_alloc_skb() {
                   __alloc_skb() {
                     kmem_cache_alloc_node() {
                       __cond_resched();
                       should_failslab();
                     }
                     kmalloc_reserve() {
                       kmalloc_size_roundup() {
                         kmalloc_slab();
                       }
                       __kmalloc_node_track_caller() {
                         kmalloc_slab();
                         __kmem_cache_alloc_node() {
                           __cond_resched();
                           should_failslab();
                         }
                       }
                     }
                     __build_skb_around();
                   }
                   sk_forced_mem_schedule() {
                     mem_cgroup_charge_skmem() {
                       try_charge_memcg() {
                         consume_stock();
                       }
                       __mod_memcg_state() {
                         cgroup_rstat_updated();
                       }
                     }
                   }
                 }
                 tcp_skb_entail() {
                   tcp_chrono_start();
                 }
                 sk_page_frag_refill() {
                   skb_page_frag_refill();
                 }
                 tcp_wmem_schedule();
                 __check_object_size() {
                   __check_object_size.part.0() {
                     check_stack_object();
                     is_vmalloc_addr();
                     __virt_addr_valid();
                   }
                 }
                 tcp_tx_timestamp();
                 tcp_push() {
                   __tcp_push_pending_frames() {
                     tcp_write_xmit() {
                       ktime_get();
                       tcp_mtu_probe();
                       tcp_tso_segs();
                       tcp_small_queue_check.isra.0();
                       __tcp_transmit_skb() {
                         skb_clone() {
                           __skb_clone() {
                             __copy_skb_header();
                           }
                         }
                         tcp_established_options();
                         skb_push();
                         __tcp_select_window();
                         tcp_options_write();
                         bpf_skops_write_hdr_opt.isra.0();
                         tcp_v4_send_check();
                         cubictcp_cwnd_event();
                         ip_queue_xmit() {
                           __ip_queue_xmit() {
                             __rcu_read_lock();
                             __sk_dst_check() {
                               ipv4_dst_check();
                             }
                             skb_push();
                             ip_local_out() {
                               __ip_local_out() {
                                 ip_send_check();
                                 __rcu_read_lock();
                                 __rcu_read_unlock();
                               }
                               ip_output() {
                                 __rcu_read_lock();
                                 nf_hook_slow() {
                                   apparmor_ip_postroute();
                                 }
                                 __rcu_read_unlock();
                                 ip_finish_output() {
                                   __ip_finish_output() {
                                     ip_finish_output2() {
                                       __dev_queue_xmit() {
                                         qdisc_pkt_len_init();
                                         netdev_core_pick_tx();
                                         validate_xmit_skb() {
                                           netif_skb_features() {
                                             passthru_features_check();
                                             skb_network_protocol();
                                           }
                                           skb_csum_hwoffload_help();
                                           validate_xmit_xfrm();
                                         }
                                         dev_hard_start_xmit() {
                                           veth_xmit [veth]() {
                                             __rcu_read_lock();
                                             skb_clone_tx_timestamp();
                                             __dev_forward_skb() {
                                               __dev_forward_skb2() {
                                                 skb_scrub_packet();
                                                 eth_type_trans();
                                               }
                                             }
                                             __netif_rx() {
                                               netif_rx_internal() {
                                                 enqueue_to_backlog() {
                                                   _raw_spin_lock_irqsave();
                                                   __raise_softirq_irqoff();
                                                   _raw_spin_unlock_irqrestore();
                                                 }
                                               }
                                             }
                                             __rcu_read_unlock();
                                           }
                                         }
                                         __local_bh_enable_ip();
                                       }
                                       __local_bh_enable_ip() {
                                         do_softirq.part.0() {
                                           __do_softirq() {
                                             net_rx_action() {
                                               __usecs_to_jiffies();
                                               __napi_poll() {
                                                 process_backlog() {
                                                   _raw_spin_lock_irq();
                                                   _raw_spin_unlock_irq();
                                                   __rcu_read_lock();
                                                   __netif_receive_skb() {
                                                     __netif_receive_skb_one_core() {
                                                       __netif_receive_skb_core.constprop.0() {
                                                         br_handle_frame [bridge]() {
                                                           br_nf_pre_routing [br_netfilter]() {
                                                             __rcu_read_lock();
                                                             __rcu_read_unlock();
                                                             __rcu_read_lock();
                                                             __rcu_read_unlock();
                                                             __rcu_read_lock();
                                                             __rcu_read_unlock();
                                                             skb_pull_rcsum();
                                                             br_validate_ipv4 [br_netfilter]();
                                                             skb_ext_add() {
                                                               __skb_ext_alloc() {
                                                                 kmem_cache_alloc() {
                                                                   should_failslab();
                                                                 }
                                                               }
                                                             }
                                                             setup_pre_routing [br_netfilter]() {
                                                               brnf_get_logical_dev [br_netfilter]() {
                                                                 __rcu_read_lock();
                                                                 __rcu_read_unlock();
                                                               }
                                                               tcp_wfree() {
                                                                 sk_free();
                                                               }
                                                             }
                                                             __rcu_read_lock();
                                                             nf_hook_slow() {
                                                               ip_sabotage_in [br_netfilter]();
                                                               ipv4_conntrack_defrag [nf_defrag_ipv4]();
                                                               ipv4_conntrack_in [nf_conntrack]() {
                                                                 nf_conntrack_in [nf_conntrack]() {
                                                                   get_l4proto [nf_conntrack]();
                                                                   resolve_normal_ct [nf_conntrack]() {
                                                                     nf_ct_get_tuple [nf_conntrack]();
                                                                     hash_conntrack_raw [nf_conntrack]();
                                                                     __nf_conntrack_find_get [nf_conntrack]() {
                                                                       __rcu_read_lock();
                                                                       __rcu_read_unlock();
                                                                     }
                                                                   }
                                                                   nf_conntrack_handle_packet [nf_conntrack]() {
                                                                     nf_conntrack_tcp_packet [nf_conntrack]() {
                                                                       nf_checksum() {
                                                                         nf_ip_checksum();
                                                                       }
                                                                       _raw_spin_lock_bh();
                                                                       tcp_in_window [nf_conntrack]() {
                                                                         nf_ct_seq_offset [nf_conntrack]();
                                                                       }
                                                                       _raw_spin_unlock_bh() {
                                                                         __local_bh_enable_ip();
                                                                       }
                                                                       __nf_ct_refresh_acct [nf_conntrack]() {
                                                                         nf_ct_acct_add [nf_conntrack]();
                                                                       }
                                                                     }
                                                                   }
                                                                 }
                                                               }
                                                               nf_nat_ipv4_pre_routing [nf_nat]() {
                                                                 nf_nat_inet_fn [nf_nat]();
                                                               }
                                                             }
                                                             __rcu_read_unlock();
                                                             br_nf_pre_routing_finish [br_netfilter]() {
                                                               skb_push();
                                                               br_nf_hook_thresh [br_netfilter]() {
                                                                 nf_hook_slow();
                                                                 br_handle_frame_finish [bridge]() {
                                                                   br_allowed_ingress [bridge]();
                                                                   nbp_switchdev_frame_mark [bridge]();
                                                                   br_fdb_update [bridge]() {
                                                                     fdb_find_rcu [bridge]();
                                                                   }
                                                                   br_fdb_find_rcu [bridge]() {
                                                                     fdb_find_rcu [bridge]();
                                                                   }
                                                                   br_pass_frame_up [bridge]() {
                                                                     br_allowed_egress [bridge]();
                                                                     br_handle_vlan [bridge]();
                                                                     br_multicast_count [bridge]();
                                                                     netif_receive_skb() {
                                                                       skb_defer_rx_timestamp();
                                                                       __rcu_read_lock();
                                                                       __netif_receive_skb() {
                                                                         __netif_receive_skb_one_core() {
                                                                           __netif_receive_skb_core.constprop.0();
                                                                           ip_rcv() {
                                                                             ip_rcv_core();
                                                                             __rcu_read_lock();
                                                                             nf_hook_slow() {
                                                                               ip_sabotage_in [br_netfilter]() {
                                                                                 ip_rcv_finish() {
                                                                                   ip_rcv_finish_core.constprop.0() {
                                                                                     tcp_v4_early_demux() {
                                                                                       __inet_lookup_established() {
                                                                                         inet_ehashfn();
                                                                                       }
                                                                                     }
                                                                                     ip_route_input_noref() {
                                                                                       __rcu_read_lock();
                                                                                       ip_route_input_slow() {
                                                                                         make_kuid() {
                                                                                           map_id_range_down();
                                                                                         }
                                                                                         __rcu_read_lock();
                                                                                         fib_table_lookup() {
                                                                                           fib_lookup_good_nhc();
                                                                                         }
                                                                                         __rcu_read_unlock();
                                                                                         fib_validate_source() {
                                                                                           __fib_validate_source() {
                                                                                             l3mdev_master_ifindex_rcu();
                                                                                             make_kuid() {
                                                                                               map_id_range_down();
                                                                                             }
                                                                                             __rcu_read_lock();
                                                                                             fib_table_lookup() {
                                                                                               fib_lookup_good_nhc();
                                                                                             }
                                                                                             __rcu_read_unlock();
                                                                                             fib_info_nh_uses_dev();
                                                                                           }
                                                                                         }
                                                                                       }
                                                                                       __rcu_read_unlock();
                                                                                     }
                                                                                   }
                                                                                   ip_local_deliver() {
                                                                                     __rcu_read_lock();
                                                                                     nf_hook_slow() {
                                                                                       nft_do_chain_ipv4 [nf_tables]() {
                                                                                         nft_do_chain [nf_tables]() {
                                                                                           expr_call_ops_eval [nf_tables]() {
                                                                                             nft_counter_eval [nf_tables]() {
                                                                                               __local_bh_enable_ip();
                                                                                             }
                                                                                           }
                                                                                           expr_call_ops_eval [nf_tables]() {
                                                                                             nft_immediate_eval [nf_tables]();
                                                                                           }
                                                                                           expr_call_ops_eval [nf_tables]() {
                                                                                             nft_meta_get_eval [nf_tables]();
                                                                                           }
                                                                                           expr_call_ops_eval [nf_tables]() {
                                                                                             nft_meta_get_eval [nf_tables]();
                                                                                           }
                                                                                           expr_call_ops_eval [nf_tables]() {
                                                                                             nft_meta_get_eval [nf_tables]();
                                                                                           }
                                                                                           expr_call_ops_eval [nf_tables]() {
                                                                                             nft_meta_get_eval [nf_tables]();
                                                                                           }
                                                                                         }
                                                                                       }
                                                                                       nf_nat_ipv4_local_in [nf_nat]() {
                                                                                         nf_nat_inet_fn [nf_nat]();
                                                                                       }
                                                                                       nf_confirm [nf_conntrack]();
                                                                                     }
                                                                                     __rcu_read_unlock();
                                                                                     ip_local_deliver_finish() {
                                                                                       __rcu_read_lock();
                                                                                       ip_protocol_deliver_rcu() {
                                                                                         raw_local_deliver() {
                                                                                           raw_v4_input() {
                                                                                             __rcu_read_lock();
                                                                                             __rcu_read_unlock();
                                                                                           }
                                                                                         }
                                                                                         tcp_v4_rcv() {
                                                                                           tcp_inbound_md5_hash() {
                                                                                             tcp_parse_md5sig_option();
                                                                                           }
                                                                                           tcp_filter() {
                                                                                             sk_filter_trim_cap() {
                                                                                               security_sock_rcv_skb() {
                                                                                                 apparmor_socket_sock_rcv_skb();
                                                                                               }
                                                                                               __rcu_read_lock();
                                                                                               __rcu_read_unlock();
                                                                                             }
                                                                                           }
                                                                                           tcp_v4_fill_cb();
                                                                                           _raw_spin_lock();
                                                                                           tcp_add_backlog() {
                                                                                             skb_condense();
                                                                                           }
                                                                                           _raw_spin_unlock();
                                                                                         }
                                                                                       }
                                                                                       __rcu_read_unlock();
                                                                                     }
                                                                                   }
                                                                                 }
                                                                               }
                                                                             }
                                                                             __rcu_read_unlock();
                                                                           }
                                                                         }
                                                                       }
                                                                       __rcu_read_unlock();
                                                                     }
                                                                   }
                                                                 }
                                                               }
                                                             }
                                                           }
                                                         }
                                                       }
                                                     }
                                                   }
                                                   __rcu_read_unlock();
                                                   _raw_spin_lock_irq();
                                                   _raw_spin_unlock_irq();
                                                 }
                                               }
                                             }
                                           }
                                         }
                                       }
                                     }
                                   }
                                 }
                               }
                             }
                             __rcu_read_unlock();
                           }
                         }
                         tcp_update_skb_after_send();
                         tcp_rate_skb_sent();
                       }
                       tcp_event_new_data_sent() {
                         tcp_rbtree_insert();
                         tcp_rearm_rto() {
                           sk_reset_timer() {
                             mod_timer() {
                               lock_timer_base() {
                                 _raw_spin_lock_irqsave();
                               }
                               detach_if_pending();
                               get_nohz_timer_target();
                               calc_wheel_index();
                               enqueue_timer();
                               _raw_spin_unlock_irqrestore();
                             }
                           }
                         }
                         tcp_check_space();
                       }
                       tcp_chrono_stop();
                       tcp_cwnd_validate();
                       tcp_schedule_loss_probe.part.0() {
                         __usecs_to_jiffies();
                         jiffies_to_usecs();
                         __usecs_to_jiffies();
                         sk_reset_timer() {
                           mod_timer();
                         }
                       }
                     }
                   }
                 }
               }
               release_sock() {
                 _raw_spin_lock_bh();
                 tcp_release_cb();
                 _raw_spin_unlock_bh() {
                   __local_bh_enable_ip();
                 }
               }
             }
           }
         }
       }
     }
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_epoll_wait() {
   ktime_get_ts64();
   timespec64_add_safe();
   do_epoll_wait() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     ep_poll() {
       select_estimate_accuracy() {
         ktime_get_ts64();
         set_normalized_timespec64();
       }
       ep_send_events() {
         mutex_lock() {
           __cond_resched();
         }
         _raw_write_lock_irq();
         _raw_write_unlock_irq();
         ep_item_poll.isra.0() {
           sock_poll() {
             tcp_poll() {
               tcp_stream_memory_free();
             }
           }
         }
         ep_done_scan() {
           _raw_write_lock_irq();
           __pm_relax();
           _raw_write_unlock_irq();
         }
         mutex_unlock();
       }
       _raw_write_lock_irq();
       _raw_write_unlock_irq();
       schedule_hrtimeout_range() {
         schedule_hrtimeout_range_clock() {
           hrtimer_init_sleeper() {
             __hrtimer_init();
           }
           hrtimer_start_range_ns() {
             _raw_spin_lock_irqsave();
             __hrtimer_start_range_ns() {
               get_nohz_timer_target();
               enqueue_hrtimer();
             }
             _raw_spin_unlock_irqrestore();
           }
           schedule() {
             rcu_note_context_switch();
             raw_spin_rq_lock_nested() {
               _raw_spin_lock();
             }
             update_rq_clock();
             dequeue_task_fair() {
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                   cpuacct_charge();
                   __cgroup_account_cputime() {
                     cgroup_rstat_updated();
                   }
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group();
                 update_min_vruntime();
               }
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group() {
                   reweight_entity();
                 }
                 update_min_vruntime();
               }
               dequeue_entity() {
                 update_curr() {
                   __calc_delta();
                   update_min_vruntime();
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group() {
                   reweight_entity();
                 }
                 update_min_vruntime();
               }
               hrtick_update();
             }
             pick_next_task() {
               pick_next_task_fair() {
                 check_cfs_rq_runtime();
                 pick_next_entity();
                 pick_next_entity();
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 set_next_entity() {
                   clear_buddies();
                   __update_load_avg_se();
                   __update_load_avg_cfs_rq();
                 }
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 set_next_entity() {
                   clear_buddies();
                   __update_load_avg_se();
                   __update_load_avg_cfs_rq();
                 }
               }
             }
             psi_task_switch() {
               psi_flags_change();
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_flags_change();
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
             }
             __traceiter_sched_switch() {
               _raw_spin_lock_irqsave();
               _raw_spin_unlock_irqrestore();
             }
             finish_task_switch.isra.0() {
               raw_spin_rq_unlock() {
                 _raw_spin_unlock();
               }
             }
           }
           hrtimer_active();
           hrtimer_try_to_cancel.part.0() {
             _raw_spin_lock_irqsave();
             __remove_hrtimer();
             _raw_spin_unlock_irqrestore();
           }
         }
       }
       ep_send_events() {
         mutex_lock() {
           __cond_resched();
         }
         _raw_write_lock_irq();
         _raw_write_unlock_irq();
         ep_item_poll.isra.0() {
           sock_poll() {
             tcp_poll() {
               tcp_stream_memory_free();
             }
           }
         }
         ep_done_scan() {
           _raw_write_lock_irq();
           __pm_relax();
           _raw_write_unlock_irq();
         }
         mutex_unlock();
       }
     }
     fput();
   } /* do_epoll_wait */
 } /* __x64_sys_epoll_wait */
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_read() {
   ksys_read() {
     __fdget_pos() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     vfs_read() {
       rw_verify_area() {
         security_file_permission() {
           apparmor_file_permission() {
             aa_file_perm() {
               __rcu_read_lock();
               aa_label_is_subset();
               __rcu_read_unlock();
             }
           }
         }
       }
       __get_task_ioprio();
       sock_read_iter() {
         sock_recvmsg() {
           security_socket_recvmsg() {
             apparmor_socket_recvmsg() {
               aa_sk_perm() {
                 __cond_resched();
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
             }
           }
           inet_recvmsg() {
             tcp_recvmsg() {
               lock_sock_nested() {
                 __cond_resched();
                 _raw_spin_lock_bh();
                 _raw_spin_unlock_bh() {
                   __local_bh_enable_ip();
                 }
               }
               tcp_recvmsg_locked() {
                 sock_rfree() {
                   __sk_mem_reduce_allocated() {
                     mem_cgroup_uncharge_skmem() {
                       __mod_memcg_state() {
                         cgroup_rstat_updated();
                       }
                       refill_stock() {
                         __refill_stock();
                       }
                     }
                   }
                 }
                 skb_attempt_defer_free() {
                   skb_release_head_state();
                   skb_release_data();
                   kfree_skbmem();
                 }
                 tcp_cleanup_rbuf() {
                   __tcp_cleanup_rbuf();
                 }
               }
               release_sock() {
                 _raw_spin_lock_bh();
                 tcp_release_cb();
                 _raw_spin_unlock_bh() {
                   __local_bh_enable_ip();
                 }
               }
             }
           }
         }
       }
     }
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_epoll_ctl() {
   do_epoll_ctl() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     mutex_lock() {
       __cond_resched();
     }
     ep_remove() {
       __rcu_read_lock();
       remove_wait_queue() {
         _raw_spin_lock_irqsave();
         _raw_spin_unlock_irqrestore();
       }
       __rcu_read_unlock();
       kmem_cache_free() {
         obj_cgroup_uncharge() {
           refill_obj_stock() {
             drain_obj_stock() {
               __rcu_read_lock();
               __mod_memcg_lruvec_state() {
                 cgroup_rstat_updated();
               }
               __rcu_read_unlock();
             }
             __rcu_read_lock();
             __rcu_read_unlock();
             __rcu_read_lock();
             __rcu_read_unlock();
           }
         }
         mod_objcg_state();
         __rcu_read_lock();
         __rcu_read_unlock();
       }
       _raw_spin_lock();
       _raw_spin_unlock();
       kmem_cache_free() {
         obj_cgroup_uncharge() {
           refill_obj_stock();
         }
         mod_objcg_state();
         __rcu_read_lock();
         __rcu_read_unlock();
       }
       _raw_write_lock_irq();
       _raw_write_unlock_irq();
       wakeup_source_unregister();
       call_rcu() {
         __call_rcu_common.constprop.0() {
           rcu_segcblist_enqueue();
         }
       }
     }
     mutex_unlock();
     fput();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_close() {
   close_fd() {
     _raw_spin_lock();
     pick_file();
     _raw_spin_unlock();
     filp_close() {
       dnotify_flush();
       locks_remove_posix();
       fput() {
         task_work_add() {
           kick_process();
         }
       }
     }
   }
 }
 exit_to_user_mode_prepare() {
   exit_to_user_mode_loop() {
     task_work_run() {
       _raw_spin_lock_irq();
       _raw_spin_unlock_irq();
       ____fput() {
         __fput() {
           __cond_resched();
           locks_remove_file();
           ima_file_free();
           sock_close() {
             __sock_release() {
               down_write() {
                 __cond_resched();
               }
               inet_release() {
                 ip_mc_drop_socket();
                 tcp_close() {
                   lock_sock_nested() {
                     __cond_resched();
                     _raw_spin_lock_bh();
                     _raw_spin_unlock_bh() {
                       __local_bh_enable_ip();
                     }
                   }
                   __tcp_close() {
                     tcp_set_state() {
                       inet_sk_state_store();
                     }
                     tcp_send_fin() {
                       __alloc_skb() {
                         kmem_cache_alloc_node() {
                           __cond_resched();
                           should_failslab();
                         }
                         kmalloc_reserve() {
                           kmalloc_size_roundup() {
                             kmalloc_slab();
                           }
                           __kmalloc_node_track_caller() {
                             kmalloc_slab();
                             __kmem_cache_alloc_node() {
                               __cond_resched();
                               should_failslab();
                             }
                           }
                         }
                         __build_skb_around();
                       }
                       sk_forced_mem_schedule() {
                         mem_cgroup_charge_skmem() {
                           try_charge_memcg() {
                             consume_stock();
                           }
                           __mod_memcg_state() {
                             cgroup_rstat_updated();
                           }
                         }
                       }
                       tcp_current_mss() {
                         ipv4_mtu();
                         tcp_established_options();
                       }
                       __tcp_push_pending_frames() {
                         tcp_write_xmit() {
                           ktime_get();
                           tcp_mtu_probe();
                           tcp_tso_segs();
                           tcp_small_queue_check.isra.0();
                           __tcp_transmit_skb() {
                             skb_clone() {
                               __skb_clone() {
                                 __copy_skb_header();
                               }
                             }
                             tcp_established_options();
                             skb_push();
                             __tcp_select_window();
                             tcp_options_write();
                             bpf_skops_write_hdr_opt.isra.0();
                             tcp_v4_send_check();
                             ip_queue_xmit() {
                               __ip_queue_xmit() {
                                 __rcu_read_lock();
                                 __sk_dst_check() {
                                   ipv4_dst_check();
                                 }
                                 skb_push();
                                 ip_local_out() {
                                   __ip_local_out() {
                                     ip_send_check();
                                     __rcu_read_lock();
                                     __rcu_read_unlock();
                                   }
                                   ip_output() {
                                     __rcu_read_lock();
                                     nf_hook_slow() {
                                       apparmor_ip_postroute();
                                     }
                                     __rcu_read_unlock();
                                     ip_finish_output() {
                                       __ip_finish_output() {
                                         ip_finish_output2() {
                                           __dev_queue_xmit() {
                                             qdisc_pkt_len_init();
                                             netdev_core_pick_tx();
                                             validate_xmit_skb() {
                                               netif_skb_features() {
                                                 passthru_features_check();
                                                 skb_network_protocol();
                                               }
                                               skb_csum_hwoffload_help();
                                               validate_xmit_xfrm();
                                             }
                                             dev_hard_start_xmit() {
                                               veth_xmit [veth]() {
                                                 __rcu_read_lock();
                                                 skb_clone_tx_timestamp();
                                                 __dev_forward_skb() {
                                                   __dev_forward_skb2() {
                                                     skb_scrub_packet();
                                                     eth_type_trans();
                                                   }
                                                 }
                                                 __netif_rx() {
                                                   netif_rx_internal() {
                                                     enqueue_to_backlog() {
                                                       _raw_spin_lock_irqsave();
                                                       __raise_softirq_irqoff();
                                                       _raw_spin_unlock_irqrestore();
                                                     }
                                                   }
                                                 }
                                                 __rcu_read_unlock();
                                               }
                                             }
                                             __local_bh_enable_ip();
                                           }
                                           __local_bh_enable_ip() {
                                             do_softirq.part.0() {
                                               __do_softirq() {
                                                 net_rx_action() {
                                                   __usecs_to_jiffies();
                                                   __napi_poll() {
                                                     process_backlog() {
                                                       _raw_spin_lock_irq();
                                                       _raw_spin_unlock_irq();
                                                       __rcu_read_lock();
                                                       __netif_receive_skb() {
                                                         __netif_receive_skb_one_core() {
                                                           __netif_receive_skb_core.constprop.0() {
                                                             br_handle_frame [bridge]() {
                                                               br_nf_pre_routing [br_netfilter]() {
                                                                 __rcu_read_lock();
                                                                 __rcu_read_unlock();
                                                                 __rcu_read_lock();
                                                                 __rcu_read_unlock();
                                                                 __rcu_read_lock();
                                                                 __rcu_read_unlock();
                                                                 skb_pull_rcsum();
                                                                 br_validate_ipv4 [br_netfilter]();
                                                                 skb_ext_add() {
                                                                   __skb_ext_alloc() {
                                                                     kmem_cache_alloc() {
                                                                       should_failslab();
                                                                     }
                                                                   }
                                                                 }
                                                                 setup_pre_routing [br_netfilter]() {
                                                                   brnf_get_logical_dev [br_netfilter]() {
                                                                     __rcu_read_lock();
                                                                     __rcu_read_unlock();
                                                                   }
                                                                   tcp_wfree() {
                                                                     sk_free();
                                                                   }
                                                                 }
                                                                 __rcu_read_lock();
                                                                 nf_hook_slow() {
                                                                   ip_sabotage_in [br_netfilter]();
                                                                   ipv4_conntrack_defrag [nf_defrag_ipv4]();
                                                                   ipv4_conntrack_in [nf_conntrack]() {
                                                                     nf_conntrack_in [nf_conntrack]() {
                                                                       get_l4proto [nf_conntrack]();
                                                                       resolve_normal_ct [nf_conntrack]() {
                                                                         nf_ct_get_tuple [nf_conntrack]();
                                                                         hash_conntrack_raw [nf_conntrack]();
                                                                         __nf_conntrack_find_get [nf_conntrack]() {
                                                                           __rcu_read_lock();
                                                                           __rcu_read_unlock();
                                                                         }
                                                                       }
                                                                       nf_conntrack_handle_packet [nf_conntrack]() {
                                                                         nf_conntrack_tcp_packet [nf_conntrack]() {
                                                                           nf_checksum() {
                                                                             nf_ip_checksum();
                                                                           }
                                                                           _raw_spin_lock_bh();
                                                                           tcp_in_window [nf_conntrack]() {
                                                                             nf_ct_seq_offset [nf_conntrack]();
                                                                           }
                                                                           _raw_spin_unlock_bh() {
                                                                             __local_bh_enable_ip();
                                                                           }
                                                                           __nf_ct_refresh_acct [nf_conntrack]() {
                                                                             nf_ct_acct_add [nf_conntrack]();
                                                                           }
                                                                         }
                                                                       }
                                                                     }
                                                                   }
                                                                   nf_nat_ipv4_pre_routing [nf_nat]() {
                                                                     nf_nat_inet_fn [nf_nat]();
                                                                   }
                                                                 }
                                                                 __rcu_read_unlock();
                                                                 br_nf_pre_routing_finish [br_netfilter]() {
                                                                   skb_push();
                                                                   br_nf_hook_thresh [br_netfilter]() {
                                                                     nf_hook_slow();
                                                                     br_handle_frame_finish [bridge]() {
                                                                       br_allowed_ingress [bridge]();
                                                                       nbp_switchdev_frame_mark [bridge]();
                                                                       br_fdb_update [bridge]() {
                                                                         fdb_find_rcu [bridge]();
                                                                       }
                                                                       br_fdb_find_rcu [bridge]() {
                                                                         fdb_find_rcu [bridge]();
                                                                       }
                                                                       br_pass_frame_up [bridge]() {
                                                                         br_allowed_egress [bridge]();
                                                                         br_handle_vlan [bridge]();
                                                                         br_multicast_count [bridge]();
                                                                         netif_receive_skb() {
                                                                           skb_defer_rx_timestamp();
                                                                           __rcu_read_lock();
                                                                           __netif_receive_skb() {
                                                                             __netif_receive_skb_one_core() {
                                                                               __netif_receive_skb_core.constprop.0();
                                                                               ip_rcv() {
                                                                                 ip_rcv_core();
                                                                                 __rcu_read_lock();
                                                                                 nf_hook_slow() {
                                                                                   ip_sabotage_in [br_netfilter]() {
                                                                                     ip_rcv_finish() {
                                                                                       ip_rcv_finish_core.constprop.0() {
                                                                                         tcp_v4_early_demux() {
                                                                                           __inet_lookup_established() {
                                                                                             inet_ehashfn();
                                                                                           }
                                                                                         }
                                                                                         ip_route_input_noref() {
                                                                                           __rcu_read_lock();
                                                                                           ip_route_input_slow() {
                                                                                             make_kuid() {
                                                                                               map_id_range_down();
                                                                                             }
                                                                                             __rcu_read_lock();
                                                                                             fib_table_lookup() {
                                                                                               fib_lookup_good_nhc();
                                                                                             }
                                                                                             __rcu_read_unlock();
                                                                                             fib_validate_source() {
                                                                                               __fib_validate_source() {
                                                                                                 l3mdev_master_ifindex_rcu();
                                                                                                 make_kuid() {
                                                                                                   map_id_range_down();
                                                                                                 }
                                                                                                 __rcu_read_lock();
                                                                                                 fib_table_lookup() {
                                                                                                   fib_lookup_good_nhc();
                                                                                                 }
                                                                                                 __rcu_read_unlock();
                                                                                                 fib_info_nh_uses_dev();
                                                                                               }
                                                                                             }
                                                                                           }
                                                                                           __rcu_read_unlock();
                                                                                         }
                                                                                       }
                                                                                       ip_local_deliver() {
                                                                                         __rcu_read_lock();
                                                                                         nf_hook_slow() {
                                                                                           nft_do_chain_ipv4 [nf_tables]() {
                                                                                             nft_do_chain [nf_tables]() {
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_counter_eval [nf_tables]() {
                                                                                                   __local_bh_enable_ip();
                                                                                                 }
                                                                                               }
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_immediate_eval [nf_tables]();
                                                                                               }
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_meta_get_eval [nf_tables]();
                                                                                               }
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_meta_get_eval [nf_tables]();
                                                                                               }
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_meta_get_eval [nf_tables]();
                                                                                               }
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_meta_get_eval [nf_tables]();
                                                                                               }
                                                                                             }
                                                                                           }
                                                                                           nf_nat_ipv4_local_in [nf_nat]() {
                                                                                             nf_nat_inet_fn [nf_nat]();
                                                                                           }
                                                                                           nf_confirm [nf_conntrack]();
                                                                                         }
                                                                                         __rcu_read_unlock();
                                                                                         ip_local_deliver_finish() {
                                                                                           __rcu_read_lock();
                                                                                           ip_protocol_deliver_rcu() {
                                                                                             raw_local_deliver() {
                                                                                               raw_v4_input() {
                                                                                                 __rcu_read_lock();
                                                                                                 __rcu_read_unlock();
                                                                                               }
                                                                                             }
                                                                                             tcp_v4_rcv() {
                                                                                               tcp_inbound_md5_hash() {
                                                                                                 tcp_parse_md5sig_option();
                                                                                               }
                                                                                               tcp_filter() {
                                                                                                 sk_filter_trim_cap() {
                                                                                                   security_sock_rcv_skb();
                                                                                                   __rcu_read_lock();
                                                                                                   __rcu_read_unlock();
                                                                                                 }
                                                                                               }
                                                                                               tcp_v4_fill_cb();
                                                                                               _raw_spin_lock();
                                                                                               tcp_v4_do_rcv() {
                                                                                                 tcp_rcv_state_process() {
                                                                                                   tcp_mstamp_refresh();
                                                                                                   tcp_validate_incoming();
                                                                                                   tcp_ack();
                                                                                                   tcp_set_state();
                                                                                                   inet_csk_reset_keepalive_timer();
                                                                                                   tcp_urg();
                                                                                                   tcp_data_queue();
                                                                                                 }
                                                                                               }
                                                                                               _raw_spin_unlock();
                                                                                               sk_free();
                                                                                             }
                                                                                           }
                                                                                           __rcu_read_unlock();
                                                                                         }
                                                                                       }
                                                                                     }
                                                                                   }
                                                                                 }
                                                                                 __rcu_read_unlock();
                                                                               }
                                                                             }
                                                                           }
                                                                           __rcu_read_unlock();
                                                                         }
                                                                       }
                                                                     }
                                                                   }
                                                                 }
                                                               }
                                                             }
                                                           }
                                                         }
                                                       }
                                                       __rcu_read_unlock();
                                                       _raw_spin_lock_irq();
                                                       _raw_spin_unlock_irq();
                                                       __rcu_read_lock();
                                                       __netif_receive_skb() {
                                                         __netif_receive_skb_one_core() {
                                                           __netif_receive_skb_core.constprop.0();
                                                           ip_rcv() {
                                                             ip_rcv_core() {
                                                               __sock_wfree() {
                                                                 __sk_free() {
                                                                   netlink_has_listeners() {
                                                                     __rcu_read_lock();
                                                                     __rcu_read_unlock();
                                                                   }
                                                                   sk_destruct() {
                                                                     __sk_destruct() {
                                                                       inet_sock_destruct() {
                                                                         kfree();
                                                                         dst_release();
                                                                         dst_release();
                                                                       }
                                                                       bpf_sk_storage_free() {
                                                                         __rcu_read_lock();
                                                                         __rcu_read_unlock();
                                                                       }
                                                                       put_pid();
                                                                       cgroup_sk_free() {
                                                                         __rcu_read_lock();
                                                                         __rcu_read_unlock();
                                                                         __rcu_read_lock();
                                                                         __rcu_read_unlock();
                                                                       }
                                                                       mem_cgroup_sk_free() {
                                                                         __rcu_read_lock();
                                                                         __rcu_read_unlock();
                                                                       }
                                                                       security_sk_free() {
                                                                         apparmor_sk_free_security() {
                                                                           path_put() {
                                                                             dput();
                                                                             mntput();
                                                                           }
                                                                         }
                                                                         kfree() {
                                                                           __kmem_cache_free();
                                                                         }
                                                                       }
                                                                       kmem_cache_free() {
                                                                         obj_cgroup_uncharge() {
                                                                           refill_obj_stock() {
                                                                             drain_obj_stock() {
                                                                               __rcu_read_lock();
                                                                               __mod_memcg_lruvec_state() {
                                                                                 cgroup_rstat_updated();
                                                                               }
                                                                               __rcu_read_unlock();
                                                                             }
                                                                             __rcu_read_lock();
                                                                             __rcu_read_unlock();
                                                                             __rcu_read_lock();
                                                                             __rcu_read_unlock();
                                                                           }
                                                                         }
                                                                         mod_objcg_state();
                                                                         __rcu_read_lock();
                                                                         __rcu_read_unlock();
                                                                       }
                                                                       module_put();
                                                                     }
                                                                   }
                                                                 }
                                                               }
                                                             }
                                                             __rcu_read_lock();
                                                             __rcu_read_unlock();
                                                             ip_rcv_finish_core.constprop.0() {
                                                               tcp_v4_early_demux() {
                                                                 __inet_lookup_established() {
                                                                   inet_ehashfn();
                                                                 }
                                                                 ipv4_dst_check();
                                                               }
                                                             }
                                                             ip_local_deliver() {
                                                               __rcu_read_lock();
                                                               __rcu_read_unlock();
                                                               ip_local_deliver_finish() {
                                                                 __rcu_read_lock();
                                                                 ip_protocol_deliver_rcu() {
                                                                   raw_local_deliver() {
                                                                     raw_v4_input() {
                                                                       __rcu_read_lock();
                                                                       __rcu_read_unlock();
                                                                     }
                                                                   }
                                                                   tcp_v4_rcv() {
                                                                     tcp_inbound_md5_hash() {
                                                                       tcp_parse_md5sig_option();
                                                                     }
                                                                     tcp_filter() {
                                                                       sk_filter_trim_cap() {
                                                                         security_sock_rcv_skb() {
                                                                           apparmor_socket_sock_rcv_skb();
                                                                         }
                                                                         __rcu_read_lock();
                                                                         __rcu_read_unlock();
                                                                       }
                                                                     }
                                                                     tcp_v4_fill_cb();
                                                                     _raw_spin_lock();
                                                                     tcp_add_backlog() {
                                                                       skb_condense();
                                                                     }
                                                                     _raw_spin_unlock();
                                                                   }
                                                                 }
                                                                 __rcu_read_unlock();
                                                               }
                                                             }
                                                           }
                                                         }
                                                       }
                                                       __rcu_read_unlock();
                                                       _raw_spin_lock_irq();
                                                       _raw_spin_unlock_irq();
                                                     }
                                                   }
                                                 }
                                               }
                                             }
                                           }
                                         }
                                       }
                                     }
                                   }
                                 }
                                 __rcu_read_unlock();
                               }
                             }
                             tcp_update_skb_after_send();
                             tcp_rate_skb_sent();
                           }
                           tcp_event_new_data_sent() {
                             tcp_rbtree_insert();
                             tcp_rearm_rto() {
                               sk_reset_timer() {
                                 mod_timer() {
                                   lock_timer_base() {
                                     _raw_spin_lock_irqsave();
                                   }
                                   calc_wheel_index();
                                   detach_if_pending();
                                   get_nohz_timer_target();
                                   enqueue_timer();
                                   _raw_spin_unlock_irqrestore();
                                 }
                               }
                             }
                             tcp_check_space();
                           }
                           tcp_chrono_stop();
                           tcp_cwnd_validate();
                           tcp_schedule_loss_probe.part.0() {
                             __usecs_to_jiffies();
                             jiffies_to_usecs();
                             __usecs_to_jiffies();
                             sk_reset_timer() {
                               mod_timer();
                             }
                           }
                         }
                       }
                     }
                     sk_stream_wait_close();
                     _raw_write_lock_bh();
                     _raw_write_unlock_bh() {
                       __local_bh_enable_ip();
                     }
                     _raw_spin_lock();
                     __release_sock() {
                       _raw_spin_unlock_bh() {
                         __local_bh_enable_ip();
                       }
                       tcp_v4_do_rcv() {
                         tcp_rcv_state_process() {
                           tcp_mstamp_refresh() {
                             ktime_get();
                           }
                           tcp_validate_incoming();
                           tcp_ack() {
                             ktime_get_seconds();
                             tcp_clean_rtx_queue.constprop.0() {
                               tcp_rack_advance();
                               tcp_rate_skb_delivered();
                               tcp_ack_tstamp();
                               __sk_mem_reclaim() {
                                 __sk_mem_reduce_allocated() {
                                   mem_cgroup_uncharge_skmem() {
                                     __mod_memcg_state() {
                                       cgroup_rstat_updated();
                                     }
                                     refill_stock() {
                                       __refill_stock() {
                                         drain_stock() {
                                           page_counter_uncharge() {
                                             page_counter_cancel() {
                                               propagate_protected_usage();
                                             }
                                             page_counter_cancel() {
                                               propagate_protected_usage();
                                             }
                                             page_counter_cancel() {
                                               propagate_protected_usage();
                                             }
                                             page_counter_cancel() {
                                               propagate_protected_usage();
                                             }
                                             page_counter_cancel() {
                                               propagate_protected_usage();
                                             }
                                             page_counter_cancel() {
                                               propagate_protected_usage();
                                             }
                                             page_counter_cancel() {
                                               propagate_protected_usage();
                                             }
                                           }
                                           __rcu_read_lock();
                                           __rcu_read_unlock();
                                         }
                                         __rcu_read_lock();
                                         __rcu_read_unlock();
                                       }
                                     }
                                   }
                                 }
                               }
                               __kfree_skb() {
                                 skb_release_head_state();
                                 skb_release_data() {
                                   skb_free_head() {
                                     kfree() {
                                       __kmem_cache_free();
                                     }
                                   }
                                 }
                                 kfree_skbmem() {
                                   kmem_cache_free();
                                 }
                               }
                               tcp_chrono_stop();
                               tcp_ack_update_rtt() {
                                 tcp_rtt_estimator() {
                                   jiffies_to_usecs();
                                 }
                                 __usecs_to_jiffies();
                               }
                               cubictcp_acked();
                             }
                             tcp_rack_update_reo_wnd();
                             tcp_schedule_loss_probe() {
                               tcp_schedule_loss_probe.part.0();
                             }
                             tcp_rearm_rto();
                             tcp_newly_delivered();
                             tcp_rate_gen();
                             cubictcp_cong_avoid();
                             tcp_update_pacing_rate();
                             tcp_xmit_recovery();
                           }
                           tcp_update_metrics() {
                             __rcu_read_lock();
                             tcp_get_metrics() {
                               __tcp_get_metrics();
                             }
                             __rcu_read_unlock();
                           }
                           tcp_done() {
                             tcp_set_state() {
                               inet_unhash() {
                                 _raw_spin_lock_bh();
                                 _raw_spin_unlock_bh() {
                                   __local_bh_enable_ip();
                                 }
                               }
                               inet_put_port() {
                                 _raw_spin_lock();
                                 _raw_spin_lock();
                                 kmem_cache_free();
                                 _raw_spin_unlock();
                                 _raw_spin_unlock();
                                 __local_bh_enable_ip();
                               }
                               inet_sk_state_store();
                             }
                             hrtimer_try_to_cancel() {
                               hrtimer_active();
                             }
                             hrtimer_try_to_cancel() {
                               hrtimer_active();
                             }
                             inet_csk_clear_xmit_timers() {
                               sk_stop_timer() {
                                 timer_delete() {
                                   lock_timer_base() {
                                     _raw_spin_lock_irqsave();
                                   }
                                   detach_if_pending();
                                   _raw_spin_unlock_irqrestore();
                                 }
                               }
                               sk_stop_timer() {
                                 timer_delete() {
                                   lock_timer_base() {
                                     _raw_spin_lock_irqsave();
                                   }
                                   detach_if_pending();
                                   _raw_spin_unlock_irqrestore();
                                 }
                               }
                               sk_stop_timer() {
                                 timer_delete() {
                                   lock_timer_base() {
                                     _raw_spin_lock_irqsave();
                                   }
                                   detach_if_pending();
                                   _raw_spin_unlock_irqrestore();
                                 }
                               }
                             }
                             inet_csk_destroy_sock() {
                               tcp_v4_destroy_sock() {
                                 hrtimer_try_to_cancel() {
                                   hrtimer_active();
                                 }
                                 hrtimer_try_to_cancel() {
                                   hrtimer_active();
                                 }
                                 inet_csk_clear_xmit_timers() {
                                   sk_stop_timer() {
                                     timer_delete();
                                   }
                                   sk_stop_timer() {
                                     timer_delete();
                                   }
                                   sk_stop_timer() {
                                     timer_delete();
                                   }
                                 }
                                 tcp_cleanup_congestion_control() {
                                   module_put();
                                 }
                                 tcp_cleanup_ulp();
                                 tcp_write_queue_purge() {
                                   tcp_chrono_stop();
                                 }
                                 tcp_fastopen_active_disable_ofo_check();
                                 skb_rbtree_purge();
                                 tcp_free_fastopen_req();
                                 tcp_fastopen_destroy_cipher();
                                 kfree();
                               }
                               sk_stream_kill_queues() {
                                 skb_queue_purge() {
                                   skb_dequeue() {
                                     _raw_spin_lock_irqsave();
                                     _raw_spin_unlock_irqrestore();
                                   }
                                 }
                               }
                             }
                           }
                           __kfree_skb() {
                             skb_release_head_state();
                             skb_release_data() {
                               skb_free_head() {
                                 kfree() {
                                   __kmem_cache_free();
                                 }
                               }
                             }
                             kfree_skbmem() {
                               kmem_cache_free();
                             }
                           }
                         }
                       }
                       __cond_resched();
                       _raw_spin_lock_bh();
                     }
                     _raw_spin_unlock();
                     __local_bh_enable_ip();
                   }
                   release_sock() {
                     _raw_spin_lock_bh();
                     tcp_release_cb();
                     _raw_spin_unlock_bh() {
                       __local_bh_enable_ip();
                     }
                   }
                   sk_free() {
                     __sk_free() {
                       netlink_has_listeners() {
                         __rcu_read_lock();
                         __rcu_read_unlock();
                       }
                       sk_destruct() {
                         __sk_destruct() {
                           inet_sock_destruct() {
                             kfree();
                             dst_release();
                             dst_release();
                           }
                           bpf_sk_storage_free() {
                             __rcu_read_lock();
                             __rcu_read_unlock();
                           }
                           put_pid();
                           cgroup_sk_free() {
                             __rcu_read_lock();
                             __rcu_read_unlock();
                             __rcu_read_lock();
                             __rcu_read_unlock();
                           }
                           mem_cgroup_sk_free() {
                             __rcu_read_lock();
                             __rcu_read_unlock();
                           }
                           security_sk_free() {
                             apparmor_sk_free_security() {
                               path_put() {
                                 dput();
                                 mntput();
                               }
                             }
                             kfree() {
                               __kmem_cache_free();
                             }
                           }
                           kmem_cache_free();
                           module_put();
                         }
                       }
                     }
                   }
                 }
               }
               up_write();
               module_put();
             }
           }
           module_put();
           put_pid();
           dput() {
             __cond_resched();
             __rcu_read_lock();
             _raw_spin_lock();
             __rcu_read_unlock();
             _raw_spin_trylock();
             __dentry_kill() {
               dentry_unlink_inode() {
                 _raw_spin_unlock();
                 _raw_spin_unlock();
                 iput() {
                   _raw_spin_lock();
                   _raw_spin_unlock();
                   evict() {
                     inode_wait_for_writeback() {
                       _raw_spin_lock();
                       __inode_wait_for_writeback() {
                         bit_waitqueue();
                       }
                       _raw_spin_unlock();
                     }
                     truncate_inode_pages_final() {
                       truncate_inode_pages_range();
                     }
                     clear_inode() {
                       _raw_spin_lock_irq();
                       _raw_spin_unlock_irq();
                     }
                     _raw_spin_lock();
                     wake_up_bit();
                     _raw_spin_unlock();
                     destroy_inode() {
                       __destroy_inode() {
                         inode_has_buffers();
                         security_inode_free() {
                           integrity_inode_free();
                           hook_inode_free_security();
                           apparmor_inode_free_security();
                           call_rcu() {
                             __call_rcu_common.constprop.0() {
                               rcu_segcblist_enqueue();
                             }
                           }
                         }
                         __fsnotify_inode_delete() {
                           fsnotify_destroy_marks() {
                             fsnotify_grab_connector() {
                               __srcu_read_lock();
                               __srcu_read_unlock();
                             }
                           }
                         }
                         locks_free_lock_context();
                       }
                       call_rcu() {
                         __call_rcu_common.constprop.0() {
                           rcu_segcblist_enqueue();
                         }
                       }
                     }
                   }
                 }
               }
               _raw_spin_lock();
               _raw_spin_unlock();
               dentry_free() {
                 kmem_cache_free() {
                   obj_cgroup_uncharge() {
                     refill_obj_stock() {
                       drain_obj_stock() {
                         __rcu_read_lock();
                         __mod_memcg_lruvec_state() {
                           cgroup_rstat_updated();
                         }
                         __rcu_read_unlock();
                       }
                       __rcu_read_lock();
                       __rcu_read_unlock();
                       __rcu_read_lock();
                       __rcu_read_unlock();
                     }
                   }
                   mod_objcg_state();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
               }
               __cond_resched();
             }
           }
           mntput() {
             mntput_no_expire() {
               __rcu_read_lock();
               __rcu_read_unlock();
             }
           }
           security_file_free() {
             apparmor_file_free_security();
             kmem_cache_free();
           }
           call_rcu() {
             __call_rcu_common.constprop.0() {
               rcu_segcblist_enqueue();
             }
           }
         }
       }
       __cond_resched();
     }
     mem_cgroup_handle_over_high();
     blkcg_maybe_throttle_current();
   }
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_epoll_wait() {
   ktime_get_ts64();
   timespec64_add_safe();
   do_epoll_wait() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     ep_poll() {
       select_estimate_accuracy() {
         ktime_get_ts64();
         set_normalized_timespec64();
       }
       _raw_write_lock_irq();
       _raw_write_unlock_irq();
       schedule_hrtimeout_range() {
         schedule_hrtimeout_range_clock() {
           hrtimer_init_sleeper() {
             __hrtimer_init();
           }
           hrtimer_start_range_ns() {
             _raw_spin_lock_irqsave();
             __hrtimer_start_range_ns() {
               get_nohz_timer_target();
               enqueue_hrtimer();
             }
             _raw_spin_unlock_irqrestore();
           }
           schedule() {
             rcu_note_context_switch();
             raw_spin_rq_lock_nested() {
               _raw_spin_lock();
             }
             update_rq_clock();
             dequeue_task_fair() {
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                   cpuacct_charge();
                   __cgroup_account_cputime() {
                     cgroup_rstat_updated();
                   }
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group();
                 update_min_vruntime();
               }
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group() {
                   reweight_entity();
                 }
                 update_min_vruntime();
               }
               dequeue_entity() {
                 update_curr() {
                   __calc_delta();
                   update_min_vruntime();
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group() {
                   reweight_entity();
                 }
                 update_min_vruntime();
               }
               hrtick_update();
             }
             pick_next_task() {
               pick_next_task_fair() {
                 check_cfs_rq_runtime();
                 pick_next_entity();
                 pick_next_entity();
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 set_next_entity() {
                   clear_buddies();
                   __update_load_avg_se();
                   __update_load_avg_cfs_rq();
                 }
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 set_next_entity() {
                   clear_buddies();
                   __update_load_avg_se();
                   __update_load_avg_cfs_rq();
                 }
               }
             }
             psi_task_switch() {
               psi_flags_change();
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_flags_change();
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
             }
             __traceiter_sched_switch() {
               _raw_spin_lock_irqsave();
               _raw_spin_unlock_irqrestore();
             }
             finish_task_switch.isra.0() {
               raw_spin_rq_unlock() {
                 _raw_spin_unlock();
               }
             }
           }
           hrtimer_active();
         }
       }
       _raw_write_lock_irq();
       _raw_write_unlock_irq();
     }
     fput();
   } /* do_epoll_wait */
 } /* __x64_sys_epoll_wait */
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_open() {
   do_sys_openat2() {
     getname() {
       getname_flags.part.0() {
         kmem_cache_alloc() {
           __cond_resched();
           should_failslab();
         }
         __check_object_size() {
           __check_object_size.part.0() {
             check_stack_object();
             is_vmalloc_addr();
             __virt_addr_valid();
             __check_heap_object();
           }
         }
       }
     }
     get_unused_fd_flags() {
       alloc_fd() {
         _raw_spin_lock();
         expand_files();
         _raw_spin_unlock();
       }
     }
     do_filp_open() {
       path_openat() {
         alloc_empty_file() {
           __alloc_file() {
             kmem_cache_alloc() {
               __cond_resched();
               should_failslab();
               __rcu_read_lock();
               __get_obj_cgroup_from_memcg() {
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               __rcu_read_unlock();
               obj_cgroup_charge() {
                 consume_obj_stock();
                 __rcu_read_lock();
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 __rcu_read_unlock();
                 try_charge_memcg() {
                   consume_stock();
                   page_counter_try_charge() {
                     propagate_protected_usage();
                     propagate_protected_usage();
                     propagate_protected_usage();
                   }
                   refill_stock() {
                     __refill_stock() {
                       drain_stock() {
                         page_counter_uncharge() {
                           page_counter_cancel() {
                             propagate_protected_usage();
                           }
                           page_counter_cancel() {
                             propagate_protected_usage();
                           }
                           page_counter_cancel() {
                             propagate_protected_usage();
                           }
                           page_counter_cancel() {
                             propagate_protected_usage();
                           }
                           page_counter_cancel() {
                             propagate_protected_usage();
                           }
                           page_counter_cancel() {
                             propagate_protected_usage();
                           }
                         }
                         __rcu_read_lock();
                         __rcu_read_unlock();
                       }
                       __rcu_read_lock();
                       __rcu_read_unlock();
                     }
                   }
                 }
                 memcg_account_kmem() {
                   __mod_memcg_state() {
                     cgroup_rstat_updated();
                   }
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 refill_obj_stock() {
                   drain_obj_stock() {
                     __rcu_read_lock();
                     __mod_memcg_lruvec_state() {
                       cgroup_rstat_updated();
                     }
                     __rcu_read_unlock();
                   }
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   obj_cgroup_uncharge_pages() {
                     __rcu_read_lock();
                     __rcu_read_lock();
                     __rcu_read_unlock();
                     __rcu_read_unlock();
                     memcg_account_kmem() {
                       __mod_memcg_state() {
                         cgroup_rstat_updated();
                       }
                     }
                     refill_stock() {
                       __refill_stock();
                     }
                     __rcu_read_lock();
                     __rcu_read_unlock();
                   }
                 }
               }
               __rcu_read_lock();
               __rcu_read_unlock();
               mod_objcg_state();
               __rcu_read_lock();
               __rcu_read_unlock();
             }
             security_file_alloc() {
               kmem_cache_alloc() {
                 __cond_resched();
                 should_failslab();
               }
               hook_file_alloc_security();
               apparmor_file_alloc_security() {
                 __cond_resched();
               }
             }
             __mutex_init();
           }
         }
         path_init() {
           __rcu_read_lock();
           nd_jump_root() {
             set_root();
           }
         }
         link_path_walk.part.0.constprop.0() {
           mnt_user_ns();
           inode_permission() {
             ovl_permission [overlay]() {
               ovl_inode_upper [overlay]();
               ovl_i_path_real [overlay]();
               generic_permission() {
                 get_cached_acl_rcu() {
                   do_ovl_get_acl [overlay]() {
                     ovl_i_path_real [overlay]();
                     get_cached_acl_rcu();
                   }
                 }
               }
               ovl_override_creds [overlay]() {
                 override_creds();
               }
               mnt_user_ns();
               inode_permission() {
                 generic_permission();
                 security_inode_permission();
               }
               revert_creds();
             }
             security_inode_permission();
           }
           walk_component() {
             lookup_fast() {
               __d_lookup_rcu();
             }
             step_into() {
               __lookup_mnt();
             }
           }
           mnt_user_ns();
           inode_permission() {
             generic_permission();
             security_inode_permission();
           }
           walk_component() {
             lookup_fast() {
               __d_lookup_rcu();
               pid_revalidate() {
                 __rcu_read_lock();
                 pid_task();
                 task_dump_owner() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 security_task_to_inode();
                 __rcu_read_unlock();
               }
             }
             step_into();
           }
           mnt_user_ns();
           inode_permission() {
             proc_pid_permission() {
               get_pid_task() {
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               generic_permission();
             }
             security_inode_permission();
           }
         }
         open_last_lookups() {
           lookup_fast() {
             __d_lookup_rcu();
             pid_revalidate() {
               __rcu_read_lock();
               pid_task();
               task_dump_owner() {
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 _raw_spin_lock();
                 _raw_spin_unlock();
               }
               security_task_to_inode();
               __rcu_read_unlock();
             }
           }
           step_into();
         }
         do_open() {
           complete_walk() {
             try_to_unlazy() {
               legitimize_links();
               __legitimize_path() {
                 __legitimize_mnt();
               }
               __rcu_read_unlock();
             }
           }
           mnt_user_ns();
           may_open() {
             inode_permission() {
               generic_permission();
               security_inode_permission();
             }
           }
           vfs_open() {
             do_dentry_open() {
               path_get() {
                 mntget();
               }
               try_module_get();
               security_file_open() {
                 hook_file_open();
                 apparmor_file_open() {
                   mnt_user_ns();
                   aa_path_perm() {
                     aa_get_buffer() {
                       _raw_spin_trylock();
                       _raw_spin_unlock();
                     }
                     aa_label_next_confined();
                     profile_path_perm.part.0() {
                       path_name() {
                         aa_path_name() {
                           d_namespace_path.constprop.0() {
                             d_absolute_path() {
                               prepend_path() {
                                 __rcu_read_lock();
                                 __rcu_read_lock();
                                 prepend() {
                                   prepend_copy() {
                                     copy_from_kernel_nofault() {
                                       copy_from_kernel_nofault_allowed();
                                     }
                                   }
                                 }
                                 prepend() {
                                   prepend_copy() {
                                     copy_from_kernel_nofault() {
                                       copy_from_kernel_nofault_allowed();
                                     }
                                   }
                                 }
                                 prepend() {
                                   prepend_copy() {
                                     copy_from_kernel_nofault() {
                                       copy_from_kernel_nofault_allowed();
                                     }
                                   }
                                 }
                                 __rcu_read_unlock();
                                 __rcu_read_unlock();
                               }
                             }
                             our_mnt();
                             our_mnt();
                           }
                         }
                       }
                       __aa_path_perm() {
                         aa_str_perms() {
                           aa_dfa_match();
                         }
                         aa_audit_file();
                       }
                     }
                     aa_label_next_confined();
                     aa_put_buffer() {
                       _raw_spin_trylock();
                       _raw_spin_unlock();
                     }
                   }
                 }
               }
               proc_single_open() {
                 single_open() {
                   kmalloc_trace() {
                     __kmem_cache_alloc_node() {
                       __cond_resched();
                       should_failslab();
                       __rcu_read_lock();
                       __get_obj_cgroup_from_memcg() {
                         __rcu_read_lock();
                         __rcu_read_unlock();
                       }
                       __rcu_read_unlock();
                       obj_cgroup_charge() {
                         consume_obj_stock();
                       }
                       __rcu_read_lock();
                       __rcu_read_unlock();
                       mod_objcg_state();
                       __rcu_read_lock();
                       __rcu_read_unlock();
                     }
                   }
                   seq_open() {
                     kmem_cache_alloc() {
                       __cond_resched();
                       should_failslab();
                       __rcu_read_lock();
                       __get_obj_cgroup_from_memcg() {
                         __rcu_read_lock();
                         __rcu_read_unlock();
                       }
                       __rcu_read_unlock();
                       obj_cgroup_charge() {
                         consume_obj_stock();
                       }
                       __rcu_read_lock();
                       __rcu_read_unlock();
                       mod_objcg_state();
                       __rcu_read_lock();
                       __rcu_read_unlock();
                     }
                     __mutex_init();
                   }
                 }
               }
               file_ra_state_init() {
                 inode_to_bdi();
               }
             }
           }
           ima_file_check() {
             security_current_getsecid_subj() {
               apparmor_current_getsecid_subj();
             }
             process_measurement() {
               mnt_user_ns();
               ima_get_action() {
                 ima_match_policy() {
                   ima_template_desc_current();
                   __rcu_read_lock();
                   ima_match_rules();
                   ima_match_rules();
                   __rcu_read_unlock();
                 }
               }
               down_write() {
                 __cond_resched();
               }
               up_write();
             }
           }
         }
         terminate_walk() {
           dput() {
             __cond_resched();
             __rcu_read_lock();
             __rcu_read_unlock();
           }
           mntput() {
             mntput_no_expire() {
               __rcu_read_lock();
               __rcu_read_unlock();
             }
           }
         }
       }
     }
     fd_install();
     putname() {
       kmem_cache_free();
     }
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_read() {
   ksys_read() {
     __fdget_pos() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
       mutex_lock() {
         __cond_resched();
       }
     }
     vfs_read() {
       rw_verify_area() {
         security_file_permission() {
           apparmor_file_permission() {
             aa_file_perm() {
               __rcu_read_lock();
               aa_label_is_subset();
               __rcu_read_unlock();
             }
           }
         }
       }
       seq_read() {
         __get_task_ioprio();
         seq_read_iter() {
           mutex_lock() {
             __cond_resched();
           }
           kvmalloc_node() {
             __kmalloc_node() {
               kmalloc_slab();
               __kmem_cache_alloc_node() {
                 __cond_resched();
                 should_failslab();
                 __rcu_read_lock();
                 __get_obj_cgroup_from_memcg() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_unlock();
                 obj_cgroup_charge() {
                   consume_obj_stock();
                   __rcu_read_lock();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   __rcu_read_unlock();
                   try_charge_memcg() {
                     consume_stock();
                   }
                   memcg_account_kmem() {
                     __mod_memcg_state() {
                       cgroup_rstat_updated();
                     }
                   }
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   refill_obj_stock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 mod_objcg_state() {
                   __rcu_read_lock();
                   __mod_memcg_lruvec_state() {
                     cgroup_rstat_updated();
                   }
                   __rcu_read_unlock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
             }
           }
           single_start();
           proc_single_show() {
             get_pid_task() {
               __rcu_read_lock();
               __rcu_read_unlock();
             }
             proc_tgid_stat() {
               do_task_stat() {
                 ptrace_may_access() {
                   _raw_spin_lock();
                   __ptrace_may_access();
                   _raw_spin_unlock();
                 }
                 get_task_mm() {
                   _raw_spin_lock();
                   _raw_spin_unlock();
                 }
                 task_vsize();
                 __lock_task_sighand() {
                   __rcu_read_lock();
                   _raw_spin_lock_irqsave();
                   __rcu_read_unlock();
                 }
                 collect_sigign_sigcatch.constprop.0.isra.0();
                 thread_group_cputime_adjusted() {
                   thread_group_cputime() {
                     task_sched_runtime() {
                       task_rq_lock() {
                         _raw_spin_lock_irqsave();
                         raw_spin_rq_lock_nested() {
                           _raw_spin_lock();
                         }
                       }
                       update_rq_clock();
                       update_curr_fair() {
                         update_curr() {
                           update_min_vruntime();
                           cpuacct_charge();
                           __cgroup_account_cputime() {
                             cgroup_rstat_updated();
                           }
                         }
                       }
                       raw_spin_rq_unlock() {
                         _raw_spin_unlock();
                       }
                       _raw_spin_unlock_irqrestore();
                     }
                     __rcu_read_lock();
                     __rcu_read_unlock();
                   }
                   cputime_adjust() {
                     _raw_spin_lock_irqsave();
                     _raw_spin_unlock_irqrestore();
                   }
                 }
                 __task_pid_nr_ns() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __task_pid_nr_ns() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __task_pid_nr_ns() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 _raw_spin_unlock_irqrestore();
                 task_prio();
                 nsec_to_clock_t();
                 pid_nr_ns();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_puts();
                 proc_task_name() {
                   __get_task_comm() {
                     _raw_spin_lock();
                     _raw_spin_unlock();
                   }
                   seq_printf();
                 }
                 seq_puts();
                 seq_putc();
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 nsec_to_clock_t();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 nsec_to_clock_t();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 nsec_to_clock_t();
                 seq_put_decimal_ll();
                 nsec_to_clock_t();
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 nsec_to_clock_t();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 nsec_to_clock_t();
                 seq_put_decimal_ll();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ll();
                 seq_putc();
                 mmput() {
                   __cond_resched();
                 }
               }
             }
           }
           single_next();
           single_stop();
           __check_object_size() {
             __check_object_size.part.0() {
               check_stack_object();
               is_vmalloc_addr();
               __virt_addr_valid();
               __check_heap_object();
             }
           }
           mutex_unlock();
         }
       }
     }
     __f_unlock_pos() {
       mutex_unlock();
     }
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_close() {
   close_fd() {
     _raw_spin_lock();
     pick_file();
     _raw_spin_unlock();
     filp_close() {
       dnotify_flush();
       locks_remove_posix();
       fput() {
         task_work_add() {
           kick_process();
         }
       }
     }
   }
 }
 exit_to_user_mode_prepare() {
   exit_to_user_mode_loop() {
     task_work_run() {
       _raw_spin_lock_irq();
       _raw_spin_unlock_irq();
       ____fput() {
         __fput() {
           __cond_resched();
           locks_remove_file();
           ima_file_free() {
             integrity_iint_find();
           }
           single_release() {
             kvfree() {
               is_vmalloc_addr();
               kfree() {
                 __kmem_cache_free() {
                   obj_cgroup_uncharge() {
                     refill_obj_stock() {
                       obj_cgroup_uncharge_pages() {
                         __rcu_read_lock();
                         __rcu_read_lock();
                         __rcu_read_unlock();
                         __rcu_read_unlock();
                         memcg_account_kmem() {
                           __mod_memcg_state() {
                             cgroup_rstat_updated();
                           }
                         }
                         refill_stock() {
                           __refill_stock();
                         }
                         __rcu_read_lock();
                         __rcu_read_unlock();
                       }
                     }
                   }
                   mod_objcg_state();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
               }
             }
             kmem_cache_free() {
               obj_cgroup_uncharge() {
                 refill_obj_stock();
               }
               mod_objcg_state() {
                 __rcu_read_lock();
                 __mod_memcg_lruvec_state() {
                   cgroup_rstat_updated();
                 }
                 __rcu_read_unlock();
               }
               __rcu_read_lock();
               __rcu_read_unlock();
             }
             kfree() {
               __kmem_cache_free() {
                 obj_cgroup_uncharge() {
                   refill_obj_stock();
                 }
                 mod_objcg_state();
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
             }
           }
           module_put();
           put_pid();
           dput() {
             __cond_resched();
             __rcu_read_lock();
             _raw_spin_lock();
             __rcu_read_unlock();
             pid_delete_dentry();
             _raw_spin_unlock();
           }
           mntput() {
             mntput_no_expire() {
               __rcu_read_lock();
               __rcu_read_unlock();
             }
           }
           security_file_free() {
             apparmor_file_free_security();
             kmem_cache_free();
           }
           call_rcu() {
             __call_rcu_common.constprop.0() {
               rcu_segcblist_enqueue();
             }
           }
         }
       }
       __cond_resched();
     }
     mem_cgroup_handle_over_high();
     blkcg_maybe_throttle_current();
   }
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_epoll_wait() {
   ktime_get_ts64();
   timespec64_add_safe();
   do_epoll_wait() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     ep_poll() {
       select_estimate_accuracy() {
         ktime_get_ts64();
         set_normalized_timespec64();
       }
       _raw_write_lock_irq();
       _raw_write_unlock_irq();
       schedule_hrtimeout_range() {
         schedule_hrtimeout_range_clock() {
           hrtimer_init_sleeper() {
             __hrtimer_init();
           }
           hrtimer_start_range_ns() {
             _raw_spin_lock_irqsave();
             __hrtimer_start_range_ns() {
               get_nohz_timer_target();
               enqueue_hrtimer();
             }
             _raw_spin_unlock_irqrestore();
           }
           schedule() {
             rcu_note_context_switch();
             raw_spin_rq_lock_nested() {
               _raw_spin_lock();
             }
             update_rq_clock();
             dequeue_task_fair() {
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                   cpuacct_charge();
                   __cgroup_account_cputime() {
                     cgroup_rstat_updated();
                   }
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group();
                 update_min_vruntime();
               }
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group() {
                   reweight_entity();
                 }
                 update_min_vruntime();
               }
               dequeue_entity() {
                 update_curr() {
                   __calc_delta();
                   update_min_vruntime();
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group() {
                   reweight_entity();
                 }
                 update_min_vruntime();
               }
               hrtick_update();
             }
             pick_next_task() {
               pick_next_task_fair() {
                 newidle_balance() {
                   __rcu_read_lock();
                   __msecs_to_jiffies();
                   __rcu_read_unlock();
                 }
               }
               put_prev_task_fair() {
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
               }
               pick_next_task_idle() {
                 __update_idle_core() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
               }
             }
             psi_task_switch() {
               psi_flags_change();
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
             }
             __traceiter_sched_switch() {
               _raw_spin_lock_irqsave();
               _raw_spin_unlock_irqrestore();
             }
             finish_task_switch.isra.0() {
               raw_spin_rq_unlock() {
                 _raw_spin_unlock();
               }
             }
           }
           hrtimer_active();
           hrtimer_try_to_cancel.part.0() {
             _raw_spin_lock_irqsave();
             __remove_hrtimer();
             _raw_spin_unlock_irqrestore();
           }
         }
       }
       ep_send_events() {
         mutex_lock() {
           __cond_resched();
         }
         _raw_write_lock_irq();
         _raw_write_unlock_irq();
         ep_item_poll.isra.0() {
           sock_poll() {
             tcp_poll();
           }
         }
         ep_done_scan() {
           _raw_write_lock_irq();
           __pm_relax();
           _raw_write_unlock_irq();
         }
         mutex_unlock();
       }
     }
     fput();
   } /* do_epoll_wait */
 } /* __x64_sys_epoll_wait */
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_accept() {
   __sys_accept4() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     get_unused_fd_flags() {
       alloc_fd() {
         _raw_spin_lock();
         expand_files();
         _raw_spin_unlock();
       }
     }
     do_accept() {
       sock_alloc() {
         new_inode_pseudo() {
           alloc_inode() {
             sock_alloc_inode() {
               kmem_cache_alloc_lru() {
                 __cond_resched();
                 should_failslab();
                 __rcu_read_lock();
                 __get_obj_cgroup_from_memcg() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_unlock();
                 __rcu_read_lock();
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 __rcu_read_unlock();
                 memcg_list_lru_alloc() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 obj_cgroup_charge() {
                   consume_obj_stock();
                   __rcu_read_lock();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   __rcu_read_unlock();
                   try_charge_memcg() {
                     consume_stock();
                     page_counter_try_charge() {
                       propagate_protected_usage();
                       propagate_protected_usage();
                       propagate_protected_usage();
                     }
                     refill_stock() {
                       __refill_stock() {
                         drain_stock() {
                           page_counter_uncharge() {
                             page_counter_cancel() {
                               propagate_protected_usage();
                             }
                             page_counter_cancel() {
                               propagate_protected_usage();
                             }
                             page_counter_cancel() {
                               propagate_protected_usage();
                             }
                             page_counter_cancel() {
                               propagate_protected_usage();
                             }
                             page_counter_cancel() {
                               propagate_protected_usage();
                             }
                             page_counter_cancel() {
                               propagate_protected_usage();
                             }
                           }
                           __rcu_read_lock();
                           __rcu_read_unlock();
                         }
                         __rcu_read_lock();
                         __rcu_read_unlock();
                       }
                     }
                   }
                   memcg_account_kmem() {
                     __mod_memcg_state() {
                       cgroup_rstat_updated();
                     }
                   }
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   refill_obj_stock() {
                     drain_obj_stock() {
                       __rcu_read_lock();
                       __mod_memcg_lruvec_state() {
                         cgroup_rstat_updated();
                       }
                       __rcu_read_unlock();
                     }
                     __rcu_read_lock();
                     __rcu_read_unlock();
                     __rcu_read_lock();
                     __rcu_read_unlock();
                     obj_cgroup_uncharge_pages() {
                       __rcu_read_lock();
                       __rcu_read_lock();
                       __rcu_read_unlock();
                       __rcu_read_unlock();
                       memcg_account_kmem() {
                         __mod_memcg_state() {
                           cgroup_rstat_updated();
                         }
                       }
                       refill_stock() {
                         __refill_stock();
                       }
                       __rcu_read_lock();
                       __rcu_read_unlock();
                     }
                   }
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 mod_objcg_state();
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               __init_waitqueue_head();
             }
             inode_init_always() {
               make_kuid() {
                 map_id_range_down();
               }
               make_kgid() {
                 map_id_range_down();
               }
               __init_rwsem();
               __init_rwsem();
               security_inode_alloc() {
                 kmem_cache_alloc() {
                   __cond_resched();
                   should_failslab();
                 }
                 apparmor_inode_alloc_security();
               }
             }
           }
           _raw_spin_lock();
           _raw_spin_unlock();
         }
         get_next_ino();
       }
       __module_get();
       sock_alloc_file() {
         alloc_file_pseudo() {
           d_alloc_pseudo() {
             __d_alloc() {
               kmem_cache_alloc_lru() {
                 __cond_resched();
                 should_failslab();
                 __rcu_read_lock();
                 __get_obj_cgroup_from_memcg() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_unlock();
                 __rcu_read_lock();
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 __rcu_read_unlock();
                 memcg_list_lru_alloc() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 obj_cgroup_charge() {
                   consume_obj_stock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 mod_objcg_state();
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               d_set_d_op();
             }
           }
           mntget();
           d_instantiate() {
             security_d_instantiate() {
               apparmor_d_instantiate() {
                 _raw_spin_lock();
                 _raw_spin_unlock();
               }
             }
             _raw_spin_lock();
             __d_instantiate() {
               d_flags_for_inode();
               _raw_spin_lock();
               _raw_spin_unlock();
             }
             _raw_spin_unlock();
           }
           alloc_file() {
             alloc_empty_file() {
               __alloc_file() {
                 kmem_cache_alloc() {
                   __cond_resched();
                   should_failslab();
                   __rcu_read_lock();
                   __get_obj_cgroup_from_memcg() {
                     __rcu_read_lock();
                     __rcu_read_unlock();
                   }
                   __rcu_read_unlock();
                   obj_cgroup_charge() {
                     consume_obj_stock();
                   }
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   mod_objcg_state();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 security_file_alloc() {
                   kmem_cache_alloc() {
                     __cond_resched();
                     should_failslab();
                   }
                   hook_file_alloc_security();
                   apparmor_file_alloc_security() {
                     __cond_resched();
                   }
                 }
                 __mutex_init();
               }
             }
           }
         }
         stream_open();
       }
       security_socket_accept() {
         apparmor_socket_accept() {
           aa_sk_perm() {
             __cond_resched();
             aa_label_sk_perm.part.0() {
               aa_label_next_confined();
               aa_profile_af_perm() {
                 aa_apply_modes_to_perms();
                 aa_check_perms();
               }
               aa_label_next_confined();
             }
           }
         }
       }
       inet_accept() {
         inet_csk_accept() {
           lock_sock_nested() {
             __cond_resched();
             _raw_spin_lock_bh();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           _raw_spin_lock_bh();
           _raw_spin_unlock_bh() {
             __local_bh_enable_ip();
           }
           release_sock() {
             _raw_spin_lock_bh();
             tcp_release_cb();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           lock_sock_nested() {
             __cond_resched();
             _raw_spin_lock_bh();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           mem_cgroup_sk_alloc() {
             __rcu_read_lock();
             __rcu_read_lock();
             __rcu_read_unlock();
             __rcu_read_unlock();
           }
           mem_cgroup_charge_skmem() {
             try_charge_memcg() {
               consume_stock();
             }
             __mod_memcg_state() {
               cgroup_rstat_updated();
             }
           }
           release_sock() {
             _raw_spin_lock_bh();
             tcp_release_cb();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           tcp_v4_reqsk_destructor() {
             kfree();
           }
           kfree();
           kmem_cache_free() {
             __slab_free();
           }
         }
         lock_sock_nested() {
           __cond_resched();
           _raw_spin_lock_bh();
           _raw_spin_unlock_bh() {
             __local_bh_enable_ip();
           }
         }
         _raw_write_lock_bh();
         security_sock_graft() {
           apparmor_sock_graft();
         }
         _raw_write_unlock_bh() {
           __local_bh_enable_ip();
         }
         release_sock() {
           _raw_spin_lock_bh();
           tcp_release_cb();
           _raw_spin_unlock_bh() {
             __local_bh_enable_ip();
           }
         }
       }
       inet_getname() {
         lock_sock_nested() {
           __cond_resched();
           _raw_spin_lock_bh();
           _raw_spin_unlock_bh() {
             __local_bh_enable_ip();
           }
         }
         release_sock() {
           _raw_spin_lock_bh();
           tcp_release_cb();
           _raw_spin_unlock_bh() {
             __local_bh_enable_ip();
           }
         }
       }
       move_addr_to_user() {
         __check_object_size() {
           __check_object_size.part.0() {
             check_stack_object();
           }
         }
       }
     }
     fd_install();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_fcntl() {
   __fdget_raw() {
     __fget_light() {
       __rcu_read_lock();
       __rcu_read_unlock();
     }
   }
   security_file_fcntl();
   do_fcntl();
   fput();
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_fcntl() {
   __fdget_raw() {
     __fget_light() {
       __rcu_read_lock();
       __rcu_read_unlock();
     }
   }
   security_file_fcntl();
   do_fcntl() {
     setfl() {
       _raw_spin_lock();
       _raw_spin_unlock();
     }
   }
   fput();
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_setsockopt() {
   __sys_setsockopt() {
     sockfd_lookup_light() {
       __fdget() {
         __fget_light() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
       }
     }
     security_socket_setsockopt() {
       apparmor_socket_setsockopt() {
         aa_sk_perm() {
           __cond_resched();
           aa_label_sk_perm.part.0() {
             aa_label_next_confined();
             aa_profile_af_perm() {
               aa_apply_modes_to_perms();
               aa_check_perms();
             }
             aa_label_next_confined();
           }
         }
       }
     }
     sock_common_setsockopt() {
       tcp_setsockopt() {
         do_tcp_setsockopt() {
           sockopt_lock_sock() {
             __cond_resched();
             _raw_spin_lock_bh();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           sockopt_release_sock() {
             release_sock() {
               _raw_spin_lock_bh();
               tcp_release_cb();
               _raw_spin_unlock_bh() {
                 __local_bh_enable_ip();
               }
             }
           }
         }
       }
     }
     kfree();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_setsockopt() {
   __sys_setsockopt() {
     sockfd_lookup_light() {
       __fdget() {
         __fget_light() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
       }
     }
     security_socket_setsockopt() {
       apparmor_socket_setsockopt() {
         aa_sk_perm() {
           __cond_resched();
           aa_label_sk_perm.part.0() {
             aa_label_next_confined();
             aa_profile_af_perm() {
               aa_apply_modes_to_perms();
               aa_check_perms();
             }
             aa_label_next_confined();
           }
         }
       }
     }
     sock_setsockopt() {
       sk_setsockopt() {
         __cond_resched();
         _raw_spin_lock_bh();
         _raw_spin_unlock_bh() {
           __local_bh_enable_ip();
         }
         tcp_set_keepalive() {
           inet_csk_reset_keepalive_timer() {
             sk_reset_timer() {
               mod_timer() {
                 lock_timer_base() {
                   _raw_spin_lock_irqsave();
                 }
                 detach_if_pending();
                 get_nohz_timer_target();
                 _raw_spin_unlock();
                 _raw_spin_lock();
                 calc_wheel_index();
                 enqueue_timer();
                 _raw_spin_unlock_irqrestore();
               }
             }
           }
         }
         release_sock() {
           _raw_spin_lock_bh();
           tcp_release_cb();
           _raw_spin_unlock_bh() {
             __local_bh_enable_ip();
           }
         }
       }
     }
     kfree();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_setsockopt() {
   __sys_setsockopt() {
     sockfd_lookup_light() {
       __fdget() {
         __fget_light() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
       }
     }
     security_socket_setsockopt() {
       apparmor_socket_setsockopt() {
         aa_sk_perm() {
           __cond_resched();
           aa_label_sk_perm.part.0() {
             aa_label_next_confined();
             aa_profile_af_perm() {
               aa_apply_modes_to_perms();
               aa_check_perms();
             }
             aa_label_next_confined();
           }
         }
       }
     }
     sock_common_setsockopt() {
       tcp_setsockopt() {
         do_tcp_setsockopt() {
           sockopt_lock_sock() {
             __cond_resched();
             _raw_spin_lock_bh();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           tcp_sock_set_keepidle_locked() {
             inet_csk_reset_keepalive_timer() {
               sk_reset_timer() {
                 mod_timer() {
                   lock_timer_base() {
                     _raw_spin_lock_irqsave();
                   }
                   calc_wheel_index();
                   detach_if_pending();
                   get_nohz_timer_target();
                   enqueue_timer();
                   _raw_spin_unlock_irqrestore();
                 }
               }
             }
           }
           sockopt_release_sock() {
             release_sock() {
               _raw_spin_lock_bh();
               tcp_release_cb();
               _raw_spin_unlock_bh() {
                 __local_bh_enable_ip();
               }
             }
           }
         }
       }
     }
     kfree();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_setsockopt() {
   __sys_setsockopt() {
     sockfd_lookup_light() {
       __fdget() {
         __fget_light() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
       }
     }
     security_socket_setsockopt() {
       apparmor_socket_setsockopt() {
         aa_sk_perm() {
           __cond_resched();
           aa_label_sk_perm.part.0() {
             aa_label_next_confined();
             aa_profile_af_perm() {
               aa_apply_modes_to_perms();
               aa_check_perms();
             }
             aa_label_next_confined();
           }
         }
       }
     }
     sock_common_setsockopt() {
       tcp_setsockopt() {
         do_tcp_setsockopt() {
           sockopt_lock_sock() {
             __cond_resched();
             _raw_spin_lock_bh();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           sockopt_release_sock() {
             release_sock() {
               _raw_spin_lock_bh();
               tcp_release_cb();
               _raw_spin_unlock_bh() {
                 __local_bh_enable_ip();
               }
             }
           }
         }
       }
     }
     kfree();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_setsockopt() {
   __sys_setsockopt() {
     sockfd_lookup_light() {
       __fdget() {
         __fget_light() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
       }
     }
     security_socket_setsockopt() {
       apparmor_socket_setsockopt() {
         aa_sk_perm() {
           __cond_resched();
           aa_label_sk_perm.part.0() {
             aa_label_next_confined();
             aa_profile_af_perm() {
               aa_apply_modes_to_perms();
               aa_check_perms();
             }
             aa_label_next_confined();
           }
         }
       }
     }
     sock_common_setsockopt() {
       tcp_setsockopt() {
         do_tcp_setsockopt() {
           sockopt_lock_sock() {
             __cond_resched();
             _raw_spin_lock_bh();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           sockopt_release_sock() {
             release_sock() {
               _raw_spin_lock_bh();
               tcp_release_cb();
               _raw_spin_unlock_bh() {
                 __local_bh_enable_ip();
               }
             }
           }
         }
       }
     }
     kfree();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_epoll_ctl() {
   do_epoll_ctl() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     mutex_lock() {
       __cond_resched();
     }
     ep_insert() {
       kmem_cache_alloc() {
         __cond_resched();
         should_failslab();
         __rcu_read_lock();
         __get_obj_cgroup_from_memcg() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
         __rcu_read_unlock();
         obj_cgroup_charge() {
           consume_obj_stock();
         }
         ___slab_alloc();
         __rcu_read_lock();
         __rcu_read_unlock();
         mod_objcg_state();
         __rcu_read_lock();
         __rcu_read_unlock();
       }
       kmem_cache_alloc() {
         __cond_resched();
         should_failslab();
         __rcu_read_lock();
         __get_obj_cgroup_from_memcg() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
         __rcu_read_unlock();
         obj_cgroup_charge() {
           consume_obj_stock();
         }
         __rcu_read_lock();
         __rcu_read_unlock();
         mod_objcg_state();
         __rcu_read_lock();
         __rcu_read_unlock();
       }
       _raw_spin_lock();
       _raw_spin_unlock();
       ep_item_poll.isra.0() {
         sock_poll() {
           tcp_poll() {
             ep_ptable_queue_proc() {
               kmem_cache_alloc() {
                 __cond_resched();
                 should_failslab();
                 __rcu_read_lock();
                 __get_obj_cgroup_from_memcg() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_unlock();
                 obj_cgroup_charge() {
                   consume_obj_stock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 mod_objcg_state();
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               add_wait_queue() {
                 _raw_spin_lock_irqsave();
                 _raw_spin_unlock_irqrestore();
               }
             }
             tcp_stream_memory_free();
           }
         }
       }
       _raw_write_lock_irq();
       _raw_write_unlock_irq();
     }
     mutex_unlock();
     fput();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_accept() {
   __sys_accept4() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     get_unused_fd_flags() {
       alloc_fd() {
         _raw_spin_lock();
         expand_files();
         _raw_spin_unlock();
       }
     }
     do_accept() {
       sock_alloc() {
         new_inode_pseudo() {
           alloc_inode() {
             sock_alloc_inode() {
               kmem_cache_alloc_lru() {
                 __cond_resched();
                 should_failslab();
                 __rcu_read_lock();
                 __get_obj_cgroup_from_memcg() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_unlock();
                 __rcu_read_lock();
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 __rcu_read_unlock();
                 memcg_list_lru_alloc() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 obj_cgroup_charge() {
                   consume_obj_stock();
                   __rcu_read_lock();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   __rcu_read_unlock();
                   try_charge_memcg() {
                     consume_stock();
                   }
                   memcg_account_kmem() {
                     __mod_memcg_state() {
                       cgroup_rstat_updated();
                     }
                   }
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   refill_obj_stock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 mod_objcg_state();
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               __init_waitqueue_head();
             }
             inode_init_always() {
               make_kuid() {
                 map_id_range_down();
               }
               make_kgid() {
                 map_id_range_down();
               }
               __init_rwsem();
               __init_rwsem();
               security_inode_alloc() {
                 kmem_cache_alloc() {
                   __cond_resched();
                   should_failslab();
                 }
                 apparmor_inode_alloc_security();
               }
             }
           }
           _raw_spin_lock();
           _raw_spin_unlock();
         }
         get_next_ino();
       }
       __module_get();
       sock_alloc_file() {
         alloc_file_pseudo() {
           d_alloc_pseudo() {
             __d_alloc() {
               kmem_cache_alloc_lru() {
                 __cond_resched();
                 should_failslab();
                 __rcu_read_lock();
                 __get_obj_cgroup_from_memcg() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_unlock();
                 __rcu_read_lock();
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 __rcu_read_unlock();
                 memcg_list_lru_alloc() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 obj_cgroup_charge() {
                   consume_obj_stock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 mod_objcg_state();
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               d_set_d_op();
             }
           }
           mntget();
           d_instantiate() {
             security_d_instantiate() {
               apparmor_d_instantiate() {
                 _raw_spin_lock();
                 _raw_spin_unlock();
               }
             }
             _raw_spin_lock();
             __d_instantiate() {
               d_flags_for_inode();
               _raw_spin_lock();
               _raw_spin_unlock();
             }
             _raw_spin_unlock();
           }
           alloc_file() {
             alloc_empty_file() {
               __alloc_file() {
                 kmem_cache_alloc() {
                   __cond_resched();
                   should_failslab();
                   __rcu_read_lock();
                   __get_obj_cgroup_from_memcg() {
                     __rcu_read_lock();
                     __rcu_read_unlock();
                   }
                   __rcu_read_unlock();
                   obj_cgroup_charge() {
                     consume_obj_stock();
                   }
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   mod_objcg_state();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 security_file_alloc() {
                   kmem_cache_alloc() {
                     __cond_resched();
                     should_failslab();
                   }
                   hook_file_alloc_security();
                   apparmor_file_alloc_security() {
                     __cond_resched();
                   }
                 }
                 __mutex_init();
               }
             }
           }
         }
         stream_open();
       }
       security_socket_accept() {
         apparmor_socket_accept() {
           aa_sk_perm() {
             __cond_resched();
             aa_label_sk_perm.part.0() {
               aa_label_next_confined();
               aa_profile_af_perm() {
                 aa_apply_modes_to_perms();
                 aa_check_perms();
               }
               aa_label_next_confined();
             }
           }
         }
       }
       inet_accept() {
         inet_csk_accept() {
           lock_sock_nested() {
             __cond_resched();
             _raw_spin_lock_bh();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           release_sock() {
             _raw_spin_lock_bh();
             tcp_release_cb();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
         }
       }
       fput() {
         task_work_add() {
           kick_process();
         }
       }
     }
     put_unused_fd() {
       _raw_spin_lock();
       _raw_spin_unlock();
     }
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   exit_to_user_mode_loop() {
     task_work_run() {
       _raw_spin_lock_irq();
       _raw_spin_unlock_irq();
       ____fput() {
         __fput() {
           __cond_resched();
           locks_remove_file();
           ima_file_free();
           sock_close() {
             __sock_release() {
               down_write() {
                 __cond_resched();
               }
               inet_release();
               up_write();
               module_put();
             }
           }
           module_put();
           put_pid();
           dput() {
             __cond_resched();
             __rcu_read_lock();
             _raw_spin_lock();
             __rcu_read_unlock();
             _raw_spin_trylock();
             __dentry_kill() {
               dentry_unlink_inode() {
                 _raw_spin_unlock();
                 _raw_spin_unlock();
                 iput() {
                   _raw_spin_lock();
                   _raw_spin_unlock();
                   evict() {
                     inode_wait_for_writeback() {
                       _raw_spin_lock();
                       __inode_wait_for_writeback() {
                         bit_waitqueue();
                       }
                       _raw_spin_unlock();
                     }
                     truncate_inode_pages_final() {
                       truncate_inode_pages_range();
                     }
                     clear_inode() {
                       _raw_spin_lock_irq();
                       _raw_spin_unlock_irq();
                     }
                     _raw_spin_lock();
                     wake_up_bit();
                     _raw_spin_unlock();
                     destroy_inode() {
                       __destroy_inode() {
                         inode_has_buffers();
                         security_inode_free() {
                           integrity_inode_free();
                           hook_inode_free_security();
                           apparmor_inode_free_security();
                           call_rcu() {
                             __call_rcu_common.constprop.0() {
                               rcu_segcblist_enqueue();
                             }
                           }
                         }
                         __fsnotify_inode_delete() {
                           fsnotify_destroy_marks() {
                             fsnotify_grab_connector() {
                               __srcu_read_lock();
                               __srcu_read_unlock();
                             }
                           }
                         }
                         locks_free_lock_context();
                       }
                       call_rcu() {
                         __call_rcu_common.constprop.0() {
                           rcu_segcblist_enqueue();
                         }
                       }
                     }
                   }
                 }
               }
               _raw_spin_lock();
               _raw_spin_unlock();
               dentry_free() {
                 kmem_cache_free() {
                   obj_cgroup_uncharge() {
                     refill_obj_stock();
                   }
                   mod_objcg_state();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
               }
               __cond_resched();
             }
           }
           mntput() {
             mntput_no_expire() {
               __rcu_read_lock();
               __rcu_read_unlock();
             }
           }
           security_file_free() {
             apparmor_file_free_security();
             kmem_cache_free();
           }
           call_rcu() {
             __call_rcu_common.constprop.0() {
               rcu_segcblist_enqueue();
             }
           }
         }
       }
       __cond_resched();
     }
     mem_cgroup_handle_over_high();
     blkcg_maybe_throttle_current();
   }
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_epoll_wait() {
   ktime_get_ts64();
   timespec64_add_safe();
   do_epoll_wait() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     ep_poll() {
       select_estimate_accuracy() {
         ktime_get_ts64();
         set_normalized_timespec64();
       }
       ep_send_events() {
         mutex_lock() {
           __cond_resched();
         }
         _raw_write_lock_irq();
         _raw_write_unlock_irq();
         ep_item_poll.isra.0() {
           sock_poll() {
             tcp_poll();
           }
         }
         ep_item_poll.isra.0() {
           sock_poll() {
             tcp_poll() {
               tcp_stream_memory_free();
             }
           }
         }
         ep_done_scan() {
           _raw_write_lock_irq();
           __pm_relax();
           _raw_write_unlock_irq();
         }
         mutex_unlock();
       }
     }
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_read() {
   ksys_read() {
     __fdget_pos() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     vfs_read() {
       rw_verify_area() {
         security_file_permission() {
           apparmor_file_permission() {
             aa_file_perm() {
               __rcu_read_lock();
               __rcu_read_unlock();
               aa_sock_file_perm() {
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
               aa_sock_file_perm() {
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
               update_file_ctx() {
                 _raw_spin_lock();
                 aa_label_merge();
                 _raw_spin_unlock();
               }
             }
           }
         }
       }
       __get_task_ioprio();
       sock_read_iter() {
         sock_recvmsg() {
           security_socket_recvmsg() {
             apparmor_socket_recvmsg() {
               aa_sk_perm() {
                 __cond_resched();
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
             }
           }
           inet_recvmsg() {
             tcp_recvmsg() {
               lock_sock_nested() {
                 __cond_resched();
                 _raw_spin_lock_bh();
                 _raw_spin_unlock_bh() {
                   __local_bh_enable_ip();
                 }
               }
               tcp_recvmsg_locked() {
                 skb_copy_datagram_iter() {
                   __skb_datagram_iter() {
                     __cond_resched();
                     simple_copy_to_iter() {
                       __check_object_size() {
                         __check_object_size.part.0() {
                           check_stack_object();
                           is_vmalloc_addr();
                           __virt_addr_valid();
                         }
                       }
                     }
                   }
                 }
                 tcp_rcv_space_adjust() {
                   tcp_mstamp_refresh() {
                     ktime_get();
                   }
                 }
                 sock_rfree() {
                   __sk_mem_reduce_allocated() {
                     mem_cgroup_uncharge_skmem() {
                       __mod_memcg_state() {
                         cgroup_rstat_updated();
                       }
                       refill_stock() {
                         __refill_stock();
                       }
                     }
                   }
                 }
                 skb_attempt_defer_free() {
                   _raw_spin_lock_irqsave();
                   _raw_spin_unlock_irqrestore();
                 }
                 tcp_cleanup_rbuf() {
                   __tcp_cleanup_rbuf();
                 }
               }
               release_sock() {
                 _raw_spin_lock_bh();
                 tcp_release_cb();
                 _raw_spin_unlock_bh() {
                   __local_bh_enable_ip();
                 }
               }
             }
           }
         }
       }
     }
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_write() {
   ksys_write() {
     __fdget_pos() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     vfs_write() {
       rw_verify_area() {
         security_file_permission() {
           apparmor_file_permission() {
             aa_file_perm() {
               __rcu_read_lock();
               __rcu_read_unlock();
               aa_sock_file_perm() {
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
               aa_sock_file_perm() {
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
               update_file_ctx() {
                 _raw_spin_lock();
                 aa_label_merge();
                 _raw_spin_unlock();
               }
             }
           }
         }
       }
       __get_task_ioprio();
       sock_write_iter() {
         sock_sendmsg() {
           security_socket_sendmsg() {
             apparmor_socket_sendmsg() {
               aa_sk_perm() {
                 __cond_resched();
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
             }
           }
           inet_sendmsg() {
             inet_send_prepare();
             tcp_sendmsg() {
               lock_sock_nested() {
                 __cond_resched();
                 _raw_spin_lock_bh();
                 _raw_spin_unlock_bh() {
                   __local_bh_enable_ip();
                 }
               }
               tcp_sendmsg_locked() {
                 tcp_rate_check_app_limited();
                 tcp_send_mss() {
                   tcp_current_mss() {
                     ipv4_mtu();
                     tcp_established_options();
                   }
                 }
                 tcp_stream_memory_free();
                 tcp_stream_alloc_skb() {
                   __alloc_skb() {
                     kmem_cache_alloc_node() {
                       __cond_resched();
                       should_failslab();
                     }
                     kmalloc_reserve() {
                       kmalloc_size_roundup() {
                         kmalloc_slab();
                       }
                       __kmalloc_node_track_caller() {
                         kmalloc_slab();
                         __kmem_cache_alloc_node() {
                           __cond_resched();
                           should_failslab();
                         }
                       }
                     }
                     __build_skb_around();
                   }
                   sk_forced_mem_schedule() {
                     mem_cgroup_charge_skmem() {
                       try_charge_memcg() {
                         consume_stock();
                       }
                       __mod_memcg_state() {
                         cgroup_rstat_updated();
                       }
                     }
                   }
                 }
                 tcp_skb_entail() {
                   tcp_chrono_start();
                 }
                 sk_page_frag_refill() {
                   skb_page_frag_refill();
                 }
                 tcp_wmem_schedule();
                 __check_object_size() {
                   __check_object_size.part.0() {
                     check_stack_object();
                     is_vmalloc_addr();
                     __virt_addr_valid();
                   }
                 }
                 tcp_tx_timestamp();
                 tcp_push() {
                   __tcp_push_pending_frames() {
                     tcp_write_xmit() {
                       ktime_get();
                       tcp_mtu_probe();
                       tcp_tso_segs();
                       tcp_small_queue_check.isra.0();
                       __tcp_transmit_skb() {
                         skb_clone() {
                           __skb_clone() {
                             __copy_skb_header();
                           }
                         }
                         tcp_established_options();
                         skb_push();
                         __tcp_select_window();
                         tcp_options_write();
                         bpf_skops_write_hdr_opt.isra.0();
                         tcp_v4_send_check();
                         cubictcp_cwnd_event();
                         ip_queue_xmit() {
                           __ip_queue_xmit() {
                             __rcu_read_lock();
                             __sk_dst_check() {
                               ipv4_dst_check();
                             }
                             skb_push();
                             ip_local_out() {
                               __ip_local_out() {
                                 ip_send_check();
                                 __rcu_read_lock();
                                 __rcu_read_unlock();
                               }
                               ip_output() {
                                 __rcu_read_lock();
                                 nf_hook_slow() {
                                   apparmor_ip_postroute();
                                 }
                                 __rcu_read_unlock();
                                 ip_finish_output() {
                                   __ip_finish_output() {
                                     ip_finish_output2() {
                                       __dev_queue_xmit() {
                                         qdisc_pkt_len_init();
                                         netdev_core_pick_tx();
                                         validate_xmit_skb() {
                                           netif_skb_features() {
                                             passthru_features_check();
                                             skb_network_protocol();
                                           }
                                           skb_csum_hwoffload_help();
                                           validate_xmit_xfrm();
                                         }
                                         dev_hard_start_xmit() {
                                           veth_xmit [veth]() {
                                             __rcu_read_lock();
                                             skb_clone_tx_timestamp();
                                             __dev_forward_skb() {
                                               __dev_forward_skb2() {
                                                 skb_scrub_packet();
                                                 eth_type_trans();
                                               }
                                             }
                                             __netif_rx() {
                                               netif_rx_internal() {
                                                 enqueue_to_backlog() {
                                                   _raw_spin_lock_irqsave();
                                                   __raise_softirq_irqoff();
                                                   _raw_spin_unlock_irqrestore();
                                                 }
                                               }
                                             }
                                             __rcu_read_unlock();
                                           }
                                         }
                                         __local_bh_enable_ip();
                                       }
                                       __local_bh_enable_ip() {
                                         do_softirq.part.0() {
                                           __do_softirq() {
                                             net_rx_action() {
                                               __usecs_to_jiffies();
                                               __napi_poll() {
                                                 process_backlog() {
                                                   _raw_spin_lock_irq();
                                                   _raw_spin_unlock_irq();
                                                   __rcu_read_lock();
                                                   __netif_receive_skb() {
                                                     __netif_receive_skb_one_core() {
                                                       __netif_receive_skb_core.constprop.0() {
                                                         br_handle_frame [bridge]() {
                                                           br_nf_pre_routing [br_netfilter]() {
                                                             __rcu_read_lock();
                                                             __rcu_read_unlock();
                                                             __rcu_read_lock();
                                                             __rcu_read_unlock();
                                                             __rcu_read_lock();
                                                             __rcu_read_unlock();
                                                             skb_pull_rcsum();
                                                             br_validate_ipv4 [br_netfilter]();
                                                             skb_ext_add() {
                                                               __skb_ext_alloc() {
                                                                 kmem_cache_alloc() {
                                                                   should_failslab();
                                                                 }
                                                               }
                                                             }
                                                             setup_pre_routing [br_netfilter]() {
                                                               brnf_get_logical_dev [br_netfilter]() {
                                                                 __rcu_read_lock();
                                                                 __rcu_read_unlock();
                                                               }
                                                               tcp_wfree() {
                                                                 sk_free();
                                                               }
                                                             }
                                                             __rcu_read_lock();
                                                             nf_hook_slow() {
                                                               ip_sabotage_in [br_netfilter]();
                                                               ipv4_conntrack_defrag [nf_defrag_ipv4]();
                                                               ipv4_conntrack_in [nf_conntrack]() {
                                                                 nf_conntrack_in [nf_conntrack]() {
                                                                   get_l4proto [nf_conntrack]();
                                                                   resolve_normal_ct [nf_conntrack]() {
                                                                     nf_ct_get_tuple [nf_conntrack]();
                                                                     hash_conntrack_raw [nf_conntrack]();
                                                                     __nf_conntrack_find_get [nf_conntrack]() {
                                                                       __rcu_read_lock();
                                                                       __rcu_read_unlock();
                                                                     }
                                                                   }
                                                                   nf_conntrack_handle_packet [nf_conntrack]() {
                                                                     nf_conntrack_tcp_packet [nf_conntrack]() {
                                                                       nf_checksum() {
                                                                         nf_ip_checksum();
                                                                       }
                                                                       _raw_spin_lock_bh();
                                                                       tcp_in_window [nf_conntrack]() {
                                                                         nf_ct_seq_offset [nf_conntrack]();
                                                                       }
                                                                       _raw_spin_unlock_bh() {
                                                                         __local_bh_enable_ip();
                                                                       }
                                                                       __nf_ct_refresh_acct [nf_conntrack]() {
                                                                         nf_ct_acct_add [nf_conntrack]();
                                                                       }
                                                                     }
                                                                   }
                                                                 }
                                                               }
                                                               nf_nat_ipv4_pre_routing [nf_nat]() {
                                                                 nf_nat_inet_fn [nf_nat]();
                                                               }
                                                             }
                                                             __rcu_read_unlock();
                                                             br_nf_pre_routing_finish [br_netfilter]() {
                                                               skb_push();
                                                               br_nf_hook_thresh [br_netfilter]() {
                                                                 nf_hook_slow();
                                                                 br_handle_frame_finish [bridge]() {
                                                                   br_allowed_ingress [bridge]();
                                                                   nbp_switchdev_frame_mark [bridge]();
                                                                   br_fdb_update [bridge]() {
                                                                     fdb_find_rcu [bridge]();
                                                                   }
                                                                   br_fdb_find_rcu [bridge]() {
                                                                     fdb_find_rcu [bridge]();
                                                                   }
                                                                   br_pass_frame_up [bridge]() {
                                                                     br_allowed_egress [bridge]();
                                                                     br_handle_vlan [bridge]();
                                                                     br_multicast_count [bridge]();
                                                                     netif_receive_skb() {
                                                                       skb_defer_rx_timestamp();
                                                                       __rcu_read_lock();
                                                                       __netif_receive_skb() {
                                                                         __netif_receive_skb_one_core() {
                                                                           __netif_receive_skb_core.constprop.0();
                                                                           ip_rcv() {
                                                                             ip_rcv_core();
                                                                             __rcu_read_lock();
                                                                             nf_hook_slow() {
                                                                               ip_sabotage_in [br_netfilter]() {
                                                                                 ip_rcv_finish() {
                                                                                   ip_rcv_finish_core.constprop.0() {
                                                                                     tcp_v4_early_demux() {
                                                                                       __inet_lookup_established() {
                                                                                         inet_ehashfn();
                                                                                       }
                                                                                     }
                                                                                     ip_route_input_noref() {
                                                                                       __rcu_read_lock();
                                                                                       ip_route_input_slow() {
                                                                                         make_kuid() {
                                                                                           map_id_range_down();
                                                                                         }
                                                                                         __rcu_read_lock();
                                                                                         fib_table_lookup() {
                                                                                           fib_lookup_good_nhc();
                                                                                         }
                                                                                         __rcu_read_unlock();
                                                                                         fib_validate_source() {
                                                                                           __fib_validate_source() {
                                                                                             l3mdev_master_ifindex_rcu();
                                                                                             make_kuid() {
                                                                                               map_id_range_down();
                                                                                             }
                                                                                             __rcu_read_lock();
                                                                                             fib_table_lookup() {
                                                                                               fib_lookup_good_nhc();
                                                                                             }
                                                                                             __rcu_read_unlock();
                                                                                             fib_info_nh_uses_dev();
                                                                                           }
                                                                                         }
                                                                                       }
                                                                                       __rcu_read_unlock();
                                                                                     }
                                                                                   }
                                                                                   ip_local_deliver() {
                                                                                     __rcu_read_lock();
                                                                                     nf_hook_slow() {
                                                                                       nft_do_chain_ipv4 [nf_tables]() {
                                                                                         nft_do_chain [nf_tables]() {
                                                                                           expr_call_ops_eval [nf_tables]() {
                                                                                             nft_counter_eval [nf_tables]() {
                                                                                               __local_bh_enable_ip();
                                                                                             }
                                                                                           }
                                                                                           expr_call_ops_eval [nf_tables]() {
                                                                                             nft_immediate_eval [nf_tables]();
                                                                                           }
                                                                                           expr_call_ops_eval [nf_tables]() {
                                                                                             nft_meta_get_eval [nf_tables]();
                                                                                           }
                                                                                           expr_call_ops_eval [nf_tables]() {
                                                                                             nft_meta_get_eval [nf_tables]();
                                                                                           }
                                                                                           expr_call_ops_eval [nf_tables]() {
                                                                                             nft_meta_get_eval [nf_tables]();
                                                                                           }
                                                                                           expr_call_ops_eval [nf_tables]() {
                                                                                             nft_meta_get_eval [nf_tables]();
                                                                                           }
                                                                                         }
                                                                                       }
                                                                                       nf_nat_ipv4_local_in [nf_nat]() {
                                                                                         nf_nat_inet_fn [nf_nat]();
                                                                                       }
                                                                                       nf_confirm [nf_conntrack]();
                                                                                     }
                                                                                     __rcu_read_unlock();
                                                                                     ip_local_deliver_finish() {
                                                                                       __rcu_read_lock();
                                                                                       ip_protocol_deliver_rcu() {
                                                                                         raw_local_deliver() {
                                                                                           raw_v4_input() {
                                                                                             __rcu_read_lock();
                                                                                             __rcu_read_unlock();
                                                                                           }
                                                                                         }
                                                                                         tcp_v4_rcv() {
                                                                                           tcp_inbound_md5_hash() {
                                                                                             tcp_parse_md5sig_option();
                                                                                           }
                                                                                           tcp_filter() {
                                                                                             sk_filter_trim_cap() {
                                                                                               security_sock_rcv_skb() {
                                                                                                 apparmor_socket_sock_rcv_skb();
                                                                                               }
                                                                                               __rcu_read_lock();
                                                                                               __rcu_read_unlock();
                                                                                             }
                                                                                           }
                                                                                           tcp_v4_fill_cb();
                                                                                           _raw_spin_lock();
                                                                                           tcp_v4_do_rcv() {
                                                                                             tcp_rcv_established() {
                                                                                               tcp_mstamp_refresh() {
                                                                                                 ktime_get();
                                                                                               }
                                                                                               inet_sk_rx_dst_set();
                                                                                               tcp_ack() {
                                                                                                 ktime_get_seconds();
                                                                                               }
                                                                                               tcp_urg();
                                                                                               tcp_data_queue() {
                                                                                                 sk_forced_mem_schedule() {
                                                                                                   mem_cgroup_charge_skmem();
                                                                                                 }
                                                                                                 tcp_queue_rcv();
                                                                                                 tcp_event_data_recv();
                                                                                                 tcp_data_ready() {
                                                                                                   sock_def_readable();
                                                                                                 }
                                                                                               }
                                                                                               tcp_check_space();
                                                                                               __tcp_ack_snd_check() {
                                                                                                 tcp_send_ack() {
                                                                                                   __tcp_send_ack.part.0();
                                                                                                 }
                                                                                               }
                                                                                             }
                                                                                           }
                                                                                           _raw_spin_unlock();
                                                                                         }
                                                                                       }
                                                                                       __rcu_read_unlock();
                                                                                     }
                                                                                   }
                                                                                 }
                                                                               }
                                                                             }
                                                                             __rcu_read_unlock();
                                                                           }
                                                                         }
                                                                       }
                                                                       __rcu_read_unlock();
                                                                     }
                                                                   }
                                                                 }
                                                               }
                                                             }
                                                           }
                                                         }
                                                       }
                                                     }
                                                   }
                                                   __rcu_read_unlock();
                                                   _raw_spin_lock_irq();
                                                   _raw_spin_unlock_irq();
                                                   __rcu_read_lock();
                                                   __netif_receive_skb() {
                                                     __netif_receive_skb_one_core() {
                                                       __netif_receive_skb_core.constprop.0();
                                                       ip_rcv() {
                                                         ip_rcv_core() {
                                                           __sock_wfree();
                                                         }
                                                         __rcu_read_lock();
                                                         __rcu_read_unlock();
                                                         ip_rcv_finish_core.constprop.0() {
                                                           tcp_v4_early_demux() {
                                                             __inet_lookup_established() {
                                                               inet_ehashfn();
                                                             }
                                                             ipv4_dst_check();
                                                           }
                                                         }
                                                         ip_local_deliver() {
                                                           __rcu_read_lock();
                                                           __rcu_read_unlock();
                                                           ip_local_deliver_finish() {
                                                             __rcu_read_lock();
                                                             ip_protocol_deliver_rcu() {
                                                               raw_local_deliver() {
                                                                 raw_v4_input() {
                                                                   __rcu_read_lock();
                                                                   __rcu_read_unlock();
                                                                 }
                                                               }
                                                               tcp_v4_rcv() {
                                                                 tcp_inbound_md5_hash() {
                                                                   tcp_parse_md5sig_option();
                                                                 }
                                                                 tcp_filter() {
                                                                   sk_filter_trim_cap() {
                                                                     security_sock_rcv_skb() {
                                                                       apparmor_socket_sock_rcv_skb();
                                                                     }
                                                                     __rcu_read_lock();
                                                                     __rcu_read_unlock();
                                                                   }
                                                                 }
                                                                 tcp_v4_fill_cb();
                                                                 _raw_spin_lock();
                                                                 tcp_add_backlog() {
                                                                   skb_condense();
                                                                 }
                                                                 _raw_spin_unlock();
                                                               }
                                                             }
                                                             __rcu_read_unlock();
                                                           }
                                                         }
                                                       }
                                                     }
                                                   }
                                                   __rcu_read_unlock();
                                                   _raw_spin_lock_irq();
                                                   _raw_spin_unlock_irq();
                                                 }
                                               }
                                             }
                                           }
                                         }
                                       }
                                     }
                                   }
                                 }
                               }
                             }
                             __rcu_read_unlock();
                           }
                         }
                         tcp_update_skb_after_send();
                         tcp_rate_skb_sent();
                       }
                       tcp_event_new_data_sent() {
                         tcp_rbtree_insert();
                         tcp_rearm_rto() {
                           sk_reset_timer() {
                             mod_timer() {
                               lock_timer_base() {
                                 _raw_spin_lock_irqsave();
                               }
                               detach_if_pending();
                               get_nohz_timer_target();
                               _raw_spin_unlock();
                               _raw_spin_lock();
                               calc_wheel_index();
                               enqueue_timer();
                               _raw_spin_unlock_irqrestore();
                             }
                           }
                         }
                         tcp_check_space();
                       }
                       tcp_chrono_stop();
                       tcp_cwnd_validate();
                       tcp_schedule_loss_probe.part.0() {
                         __usecs_to_jiffies();
                         jiffies_to_usecs();
                         __usecs_to_jiffies();
                         sk_reset_timer() {
                           mod_timer();
                         }
                       }
                     }
                   }
                 }
               }
               release_sock() {
                 _raw_spin_lock_bh();
                 __release_sock() {
                   _raw_spin_unlock_bh() {
                     __local_bh_enable_ip();
                   }
                   tcp_v4_do_rcv() {
                     ipv4_dst_check();
                     tcp_rcv_established() {
                       tcp_mstamp_refresh() {
                         ktime_get();
                       }
                       ktime_get_seconds();
                       tcp_ack() {
                         tcp_clean_rtx_queue.constprop.0() {
                           tcp_rack_advance();
                           tcp_rate_skb_delivered();
                           tcp_ack_tstamp();
                           __sk_mem_reclaim() {
                             __sk_mem_reduce_allocated() {
                               mem_cgroup_uncharge_skmem() {
                                 __mod_memcg_state() {
                                   cgroup_rstat_updated();
                                 }
                                 refill_stock() {
                                   __refill_stock() {
                                     drain_stock() {
                                       page_counter_uncharge() {
                                         page_counter_cancel() {
                                           propagate_protected_usage();
                                         }
                                         page_counter_cancel() {
                                           propagate_protected_usage();
                                         }
                                         page_counter_cancel() {
                                           propagate_protected_usage();
                                         }
                                         page_counter_cancel() {
                                           propagate_protected_usage();
                                         }
                                         page_counter_cancel() {
                                           propagate_protected_usage();
                                         }
                                         page_counter_cancel() {
                                           propagate_protected_usage();
                                         }
                                         page_counter_cancel() {
                                           propagate_protected_usage();
                                         }
                                       }
                                       __rcu_read_lock();
                                       __rcu_read_unlock();
                                     }
                                     __rcu_read_lock();
                                     __rcu_read_unlock();
                                   }
                                 }
                               }
                             }
                           }
                           __kfree_skb() {
                             skb_release_head_state();
                             skb_release_data();
                             kfree_skbmem();
                           }
                           tcp_chrono_stop();
                           tcp_ack_update_rtt() {
                             tcp_rtt_estimator() {
                               jiffies_to_usecs();
                             }
                             __usecs_to_jiffies();
                           }
                           cubictcp_acked();
                         }
                         tcp_rack_update_reo_wnd();
                         tcp_schedule_loss_probe() {
                           tcp_schedule_loss_probe.part.0();
                         }
                         tcp_rearm_rto();
                         tcp_newly_delivered();
                         tcp_rate_gen();
                         cubictcp_cong_avoid();
                         tcp_update_pacing_rate();
                         tcp_xmit_recovery();
                       }
                       __kfree_skb() {
                         skb_release_head_state();
                         skb_release_data() {
                           skb_free_head() {
                             kfree() {
                               __kmem_cache_free();
                             }
                           }
                         }
                         kfree_skbmem() {
                           kmem_cache_free();
                         }
                       }
                       tcp_check_space();
                     }
                   }
                   __cond_resched();
                   _raw_spin_lock_bh();
                 }
                 tcp_release_cb();
                 _raw_spin_unlock_bh() {
                   __local_bh_enable_ip();
                 }
               }
             }
           }
         }
       }
     }
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_epoll_wait() {
   ktime_get_ts64();
   timespec64_add_safe();
   do_epoll_wait() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     ep_poll() {
       select_estimate_accuracy() {
         ktime_get_ts64();
         set_normalized_timespec64();
       }
       ep_send_events() {
         mutex_lock() {
           __cond_resched();
         }
         _raw_write_lock_irq();
         _raw_write_unlock_irq();
         ep_item_poll.isra.0() {
           sock_poll() {
             tcp_poll() {
               tcp_stream_memory_free();
             }
           }
         }
         ep_done_scan() {
           _raw_write_lock_irq();
           __pm_relax();
           _raw_write_unlock_irq();
         }
         mutex_unlock();
       }
       _raw_write_lock_irq();
       _raw_write_unlock_irq();
       schedule_hrtimeout_range() {
         schedule_hrtimeout_range_clock() {
           hrtimer_init_sleeper() {
             __hrtimer_init();
           }
           hrtimer_start_range_ns() {
             _raw_spin_lock_irqsave();
             __hrtimer_start_range_ns() {
               get_nohz_timer_target();
               enqueue_hrtimer();
             }
             _raw_spin_unlock_irqrestore();
           }
           schedule() {
             rcu_note_context_switch();
             raw_spin_rq_lock_nested() {
               _raw_spin_lock();
             }
             update_rq_clock();
             dequeue_task_fair() {
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                   cpuacct_charge();
                   __cgroup_account_cputime() {
                     cgroup_rstat_updated();
                   }
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group();
                 update_min_vruntime();
               }
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group() {
                   reweight_entity();
                 }
                 update_min_vruntime();
               }
               dequeue_entity() {
                 update_curr() {
                   __calc_delta();
                   update_min_vruntime();
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group() {
                   reweight_entity();
                 }
                 update_min_vruntime();
               }
               hrtick_update();
             }
             pick_next_task() {
               pick_next_task_fair() {
                 newidle_balance() {
                   __rcu_read_lock();
                   __msecs_to_jiffies();
                   __rcu_read_unlock();
                 }
               }
               put_prev_task_fair() {
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
               }
               pick_next_task_idle() {
                 __update_idle_core() {
                   __rcu_read_lock();
                   available_idle_cpu();
                   __rcu_read_unlock();
                 }
               }
             }
             psi_task_switch() {
               psi_flags_change();
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
             }
             __traceiter_sched_switch() {
               _raw_spin_lock_irqsave();
               _raw_spin_unlock_irqrestore();
             }
             finish_task_switch.isra.0() {
               raw_spin_rq_unlock() {
                 _raw_spin_unlock();
               }
             }
           }
           hrtimer_active();
           hrtimer_try_to_cancel.part.0() {
             _raw_spin_lock_irqsave();
             __remove_hrtimer();
             _raw_spin_unlock_irqrestore();
           }
         }
       }
       ep_send_events() {
         mutex_lock() {
           __cond_resched();
         }
         _raw_write_lock_irq();
         _raw_write_unlock_irq();
         ep_item_poll.isra.0() {
           sock_poll() {
             tcp_poll() {
               tcp_stream_memory_free();
             }
           }
         }
         ep_done_scan() {
           _raw_write_lock_irq();
           __pm_relax();
           _raw_write_unlock_irq();
         }
         mutex_unlock();
       }
     }
     fput();
   } /* do_epoll_wait */
 } /* __x64_sys_epoll_wait */
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_read() {
   ksys_read() {
     __fdget_pos() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     vfs_read() {
       rw_verify_area() {
         security_file_permission() {
           apparmor_file_permission() {
             aa_file_perm() {
               __rcu_read_lock();
               aa_label_is_subset();
               __rcu_read_unlock();
             }
           }
         }
       }
       __get_task_ioprio();
       sock_read_iter() {
         sock_recvmsg() {
           security_socket_recvmsg() {
             apparmor_socket_recvmsg() {
               aa_sk_perm() {
                 __cond_resched();
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
             }
           }
           inet_recvmsg() {
             tcp_recvmsg() {
               lock_sock_nested() {
                 __cond_resched();
                 _raw_spin_lock_bh();
                 _raw_spin_unlock_bh() {
                   __local_bh_enable_ip();
                 }
               }
               tcp_recvmsg_locked() {
                 sock_rfree() {
                   __sk_mem_reduce_allocated() {
                     mem_cgroup_uncharge_skmem() {
                       __mod_memcg_state() {
                         cgroup_rstat_updated();
                       }
                       refill_stock() {
                         __refill_stock();
                       }
                     }
                   }
                 }
                 skb_attempt_defer_free() {
                   _raw_spin_lock_irqsave();
                   _raw_spin_unlock_irqrestore();
                 }
                 tcp_cleanup_rbuf() {
                   __tcp_cleanup_rbuf();
                 }
               }
               release_sock() {
                 _raw_spin_lock_bh();
                 tcp_release_cb();
                 _raw_spin_unlock_bh() {
                   __local_bh_enable_ip();
                 }
               }
             }
           }
         }
       }
     }
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_epoll_ctl() {
   do_epoll_ctl() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     mutex_lock() {
       __cond_resched();
     }
     ep_remove() {
       __rcu_read_lock();
       remove_wait_queue() {
         _raw_spin_lock_irqsave();
         _raw_spin_unlock_irqrestore();
       }
       __rcu_read_unlock();
       kmem_cache_free() {
         obj_cgroup_uncharge() {
           refill_obj_stock();
         }
         mod_objcg_state();
         __rcu_read_lock();
         __rcu_read_unlock();
       }
       _raw_spin_lock();
       _raw_spin_unlock();
       kmem_cache_free() {
         obj_cgroup_uncharge() {
           refill_obj_stock();
         }
         mod_objcg_state();
         __rcu_read_lock();
         __rcu_read_unlock();
       }
       _raw_write_lock_irq();
       _raw_write_unlock_irq();
       wakeup_source_unregister();
       call_rcu() {
         __call_rcu_common.constprop.0() {
           rcu_segcblist_enqueue();
         }
       }
     }
     mutex_unlock();
     fput();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_close() {
   close_fd() {
     _raw_spin_lock();
     pick_file();
     _raw_spin_unlock();
     filp_close() {
       dnotify_flush();
       locks_remove_posix();
       fput() {
         task_work_add() {
           kick_process();
         }
       }
     }
   }
 }
 exit_to_user_mode_prepare() {
   exit_to_user_mode_loop() {
     task_work_run() {
       _raw_spin_lock_irq();
       _raw_spin_unlock_irq();
       ____fput() {
         __fput() {
           __cond_resched();
           locks_remove_file();
           ima_file_free();
           sock_close() {
             __sock_release() {
               down_write() {
                 __cond_resched();
               }
               inet_release() {
                 ip_mc_drop_socket();
                 tcp_close() {
                   lock_sock_nested() {
                     __cond_resched();
                     _raw_spin_lock_bh();
                     _raw_spin_unlock_bh() {
                       __local_bh_enable_ip();
                     }
                   }
                   __tcp_close() {
                     tcp_set_state() {
                       inet_sk_state_store();
                     }
                     tcp_send_fin() {
                       __alloc_skb() {
                         kmem_cache_alloc_node() {
                           __cond_resched();
                           should_failslab();
                         }
                         kmalloc_reserve() {
                           kmalloc_size_roundup() {
                             kmalloc_slab();
                           }
                           __kmalloc_node_track_caller() {
                             kmalloc_slab();
                             __kmem_cache_alloc_node() {
                               __cond_resched();
                               should_failslab();
                             }
                           }
                         }
                         __build_skb_around();
                       }
                       sk_forced_mem_schedule() {
                         mem_cgroup_charge_skmem() {
                           try_charge_memcg() {
                             consume_stock();
                           }
                           __mod_memcg_state() {
                             cgroup_rstat_updated();
                           }
                         }
                       }
                       tcp_current_mss() {
                         ipv4_mtu();
                         tcp_established_options();
                       }
                       __tcp_push_pending_frames() {
                         tcp_write_xmit() {
                           ktime_get();
                           tcp_mtu_probe();
                           tcp_tso_segs();
                           tcp_small_queue_check.isra.0();
                           __tcp_transmit_skb() {
                             skb_clone() {
                               __skb_clone() {
                                 __copy_skb_header();
                               }
                             }
                             tcp_established_options();
                             skb_push();
                             __tcp_select_window();
                             tcp_options_write();
                             bpf_skops_write_hdr_opt.isra.0();
                             tcp_v4_send_check();
                             ip_queue_xmit() {
                               __ip_queue_xmit() {
                                 __rcu_read_lock();
                                 __sk_dst_check() {
                                   ipv4_dst_check();
                                 }
                                 skb_push();
                                 ip_local_out() {
                                   __ip_local_out() {
                                     ip_send_check();
                                     __rcu_read_lock();
                                     __rcu_read_unlock();
                                   }
                                   ip_output() {
                                     __rcu_read_lock();
                                     nf_hook_slow() {
                                       apparmor_ip_postroute();
                                     }
                                     __rcu_read_unlock();
                                     ip_finish_output() {
                                       __ip_finish_output() {
                                         ip_finish_output2() {
                                           __dev_queue_xmit() {
                                             qdisc_pkt_len_init();
                                             netdev_core_pick_tx();
                                             validate_xmit_skb() {
                                               netif_skb_features() {
                                                 passthru_features_check();
                                                 skb_network_protocol();
                                               }
                                               skb_csum_hwoffload_help();
                                               validate_xmit_xfrm();
                                             }
                                             dev_hard_start_xmit() {
                                               veth_xmit [veth]() {
                                                 __rcu_read_lock();
                                                 skb_clone_tx_timestamp();
                                                 __dev_forward_skb() {
                                                   __dev_forward_skb2() {
                                                     skb_scrub_packet();
                                                     eth_type_trans();
                                                   }
                                                 }
                                                 __netif_rx() {
                                                   netif_rx_internal() {
                                                     enqueue_to_backlog() {
                                                       _raw_spin_lock_irqsave();
                                                       __raise_softirq_irqoff();
                                                       _raw_spin_unlock_irqrestore();
                                                     }
                                                   }
                                                 }
                                                 __rcu_read_unlock();
                                               }
                                             }
                                             __local_bh_enable_ip();
                                           }
                                           __local_bh_enable_ip() {
                                             do_softirq.part.0() {
                                               __do_softirq() {
                                                 net_rx_action() {
                                                   __usecs_to_jiffies();
                                                   _raw_spin_lock_irqsave();
                                                   _raw_spin_unlock_irqrestore();
                                                   napi_consume_skb() {
                                                     skb_release_head_state() {
                                                       __skb_ext_put() {
                                                         kmem_cache_free();
                                                       }
                                                     }
                                                     skb_release_data() {
                                                       skb_free_head() {
                                                         kfree() {
                                                           __kmem_cache_free();
                                                         }
                                                       }
                                                     }
                                                     kfree_skbmem() {
                                                       kmem_cache_free();
                                                     }
                                                   }
                                                   __napi_poll() {
                                                     process_backlog() {
                                                       _raw_spin_lock_irq();
                                                       _raw_spin_unlock_irq();
                                                       __rcu_read_lock();
                                                       __netif_receive_skb() {
                                                         __netif_receive_skb_one_core() {
                                                           __netif_receive_skb_core.constprop.0() {
                                                             br_handle_frame [bridge]() {
                                                               br_nf_pre_routing [br_netfilter]() {
                                                                 __rcu_read_lock();
                                                                 __rcu_read_unlock();
                                                                 __rcu_read_lock();
                                                                 __rcu_read_unlock();
                                                                 __rcu_read_lock();
                                                                 __rcu_read_unlock();
                                                                 skb_pull_rcsum();
                                                                 br_validate_ipv4 [br_netfilter]();
                                                                 skb_ext_add() {
                                                                   __skb_ext_alloc() {
                                                                     kmem_cache_alloc() {
                                                                       should_failslab();
                                                                     }
                                                                   }
                                                                 }
                                                                 setup_pre_routing [br_netfilter]() {
                                                                   brnf_get_logical_dev [br_netfilter]() {
                                                                     __rcu_read_lock();
                                                                     __rcu_read_unlock();
                                                                   }
                                                                   tcp_wfree() {
                                                                     sk_free();
                                                                   }
                                                                 }
                                                                 __rcu_read_lock();
                                                                 nf_hook_slow() {
                                                                   ip_sabotage_in [br_netfilter]();
                                                                   ipv4_conntrack_defrag [nf_defrag_ipv4]();
                                                                   ipv4_conntrack_in [nf_conntrack]() {
                                                                     nf_conntrack_in [nf_conntrack]() {
                                                                       get_l4proto [nf_conntrack]();
                                                                       resolve_normal_ct [nf_conntrack]() {
                                                                         nf_ct_get_tuple [nf_conntrack]();
                                                                         hash_conntrack_raw [nf_conntrack]();
                                                                         __nf_conntrack_find_get [nf_conntrack]() {
                                                                           __rcu_read_lock();
                                                                           __rcu_read_unlock();
                                                                         }
                                                                       }
                                                                       nf_conntrack_handle_packet [nf_conntrack]() {
                                                                         nf_conntrack_tcp_packet [nf_conntrack]() {
                                                                           nf_checksum() {
                                                                             nf_ip_checksum();
                                                                           }
                                                                           _raw_spin_lock_bh();
                                                                           tcp_in_window [nf_conntrack]() {
                                                                             nf_ct_seq_offset [nf_conntrack]();
                                                                           }
                                                                           _raw_spin_unlock_bh() {
                                                                             __local_bh_enable_ip();
                                                                           }
                                                                           __nf_ct_refresh_acct [nf_conntrack]() {
                                                                             nf_ct_acct_add [nf_conntrack]();
                                                                           }
                                                                         }
                                                                       }
                                                                     }
                                                                   }
                                                                   nf_nat_ipv4_pre_routing [nf_nat]() {
                                                                     nf_nat_inet_fn [nf_nat]();
                                                                   }
                                                                 }
                                                                 __rcu_read_unlock();
                                                                 br_nf_pre_routing_finish [br_netfilter]() {
                                                                   skb_push();
                                                                   br_nf_hook_thresh [br_netfilter]() {
                                                                     nf_hook_slow();
                                                                     br_handle_frame_finish [bridge]() {
                                                                       br_allowed_ingress [bridge]();
                                                                       nbp_switchdev_frame_mark [bridge]();
                                                                       br_fdb_update [bridge]() {
                                                                         fdb_find_rcu [bridge]();
                                                                       }
                                                                       br_fdb_find_rcu [bridge]() {
                                                                         fdb_find_rcu [bridge]();
                                                                       }
                                                                       br_pass_frame_up [bridge]() {
                                                                         br_allowed_egress [bridge]();
                                                                         br_handle_vlan [bridge]();
                                                                         br_multicast_count [bridge]();
                                                                         netif_receive_skb() {
                                                                           skb_defer_rx_timestamp();
                                                                           __rcu_read_lock();
                                                                           __netif_receive_skb() {
                                                                             __netif_receive_skb_one_core() {
                                                                               __netif_receive_skb_core.constprop.0();
                                                                               ip_rcv() {
                                                                                 ip_rcv_core();
                                                                                 __rcu_read_lock();
                                                                                 nf_hook_slow() {
                                                                                   ip_sabotage_in [br_netfilter]() {
                                                                                     ip_rcv_finish() {
                                                                                       ip_rcv_finish_core.constprop.0() {
                                                                                         tcp_v4_early_demux() {
                                                                                           __inet_lookup_established() {
                                                                                             inet_ehashfn();
                                                                                           }
                                                                                           ipv4_dst_check();
                                                                                         }
                                                                                       }
                                                                                       ip_local_deliver() {
                                                                                         __rcu_read_lock();
                                                                                         nf_hook_slow() {
                                                                                           nft_do_chain_ipv4 [nf_tables]() {
                                                                                             nft_do_chain [nf_tables]() {
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_counter_eval [nf_tables]() {
                                                                                                   __local_bh_enable_ip();
                                                                                                 }
                                                                                               }
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_immediate_eval [nf_tables]();
                                                                                               }
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_meta_get_eval [nf_tables]();
                                                                                               }
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_meta_get_eval [nf_tables]();
                                                                                               }
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_meta_get_eval [nf_tables]();
                                                                                               }
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_meta_get_eval [nf_tables]();
                                                                                               }
                                                                                             }
                                                                                           }
                                                                                           nf_nat_ipv4_local_in [nf_nat]() {
                                                                                             nf_nat_inet_fn [nf_nat]();
                                                                                           }
                                                                                           nf_confirm [nf_conntrack]();
                                                                                         }
                                                                                         __rcu_read_unlock();
                                                                                         ip_local_deliver_finish() {
                                                                                           __rcu_read_lock();
                                                                                           ip_protocol_deliver_rcu() {
                                                                                             raw_local_deliver() {
                                                                                               raw_v4_input() {
                                                                                                 __rcu_read_lock();
                                                                                                 __rcu_read_unlock();
                                                                                               }
                                                                                             }
                                                                                             tcp_v4_rcv() {
                                                                                               tcp_inbound_md5_hash() {
                                                                                                 tcp_parse_md5sig_option();
                                                                                               }
                                                                                               tcp_filter() {
                                                                                                 sk_filter_trim_cap() {
                                                                                                   security_sock_rcv_skb();
                                                                                                   __rcu_read_lock();
                                                                                                   __rcu_read_unlock();
                                                                                                 }
                                                                                               }
                                                                                               tcp_v4_fill_cb();
                                                                                               _raw_spin_lock();
                                                                                               tcp_v4_do_rcv() {
                                                                                                 tcp_rcv_state_process() {
                                                                                                   tcp_mstamp_refresh();
                                                                                                   tcp_validate_incoming();
                                                                                                   tcp_ack();
                                                                                                   tcp_set_state();
                                                                                                   inet_csk_reset_keepalive_timer();
                                                                                                   tcp_urg();
                                                                                                   tcp_data_queue();
                                                                                                 }
                                                                                               }
                                                                                               _raw_spin_unlock();
                                                                                               sk_free();
                                                                                             }
                                                                                           }
                                                                                           __rcu_read_unlock();
                                                                                         }
                                                                                       }
                                                                                     }
                                                                                   }
                                                                                 }
                                                                                 __rcu_read_unlock();
                                                                               }
                                                                             }
                                                                           }
                                                                           __rcu_read_unlock();
                                                                         }
                                                                       }
                                                                     }
                                                                   }
                                                                 }
                                                               }
                                                             }
                                                           }
                                                         }
                                                       }
                                                       __rcu_read_unlock();
                                                       _raw_spin_lock_irq();
                                                       _raw_spin_unlock_irq();
                                                       __rcu_read_lock();
                                                       __netif_receive_skb() {
                                                         __netif_receive_skb_one_core() {
                                                           __netif_receive_skb_core.constprop.0();
                                                           ip_rcv() {
                                                             ip_rcv_core() {
                                                               __sock_wfree() {
                                                                 __sk_free() {
                                                                   netlink_has_listeners() {
                                                                     __rcu_read_lock();
                                                                     __rcu_read_unlock();
                                                                   }
                                                                   sk_destruct() {
                                                                     __sk_destruct() {
                                                                       inet_sock_destruct() {
                                                                         kfree();
                                                                         dst_release();
                                                                         dst_release();
                                                                       }
                                                                       bpf_sk_storage_free() {
                                                                         __rcu_read_lock();
                                                                         __rcu_read_unlock();
                                                                       }
                                                                       put_pid();
                                                                       cgroup_sk_free() {
                                                                         __rcu_read_lock();
                                                                         __rcu_read_unlock();
                                                                         __rcu_read_lock();
                                                                         __rcu_read_unlock();
                                                                       }
                                                                       mem_cgroup_sk_free() {
                                                                         __rcu_read_lock();
                                                                         __rcu_read_unlock();
                                                                       }
                                                                       security_sk_free() {
                                                                         apparmor_sk_free_security() {
                                                                           path_put() {
                                                                             dput();
                                                                             mntput();
                                                                           }
                                                                         }
                                                                         kfree() {
                                                                           __kmem_cache_free() {
                                                                             __slab_free();
                                                                           }
                                                                         }
                                                                       }
                                                                       kmem_cache_free() {
                                                                         obj_cgroup_uncharge() {
                                                                           refill_obj_stock() {
                                                                             drain_obj_stock() {
                                                                               __rcu_read_lock();
                                                                               __mod_memcg_lruvec_state() {
                                                                                 cgroup_rstat_updated();
                                                                               }
                                                                               __rcu_read_unlock();
                                                                               __rcu_read_lock();
                                                                               __mod_memcg_lruvec_state() {
                                                                                 cgroup_rstat_updated();
                                                                               }
                                                                               __rcu_read_unlock();
                                                                             }
                                                                             __rcu_read_lock();
                                                                             __rcu_read_unlock();
                                                                             __rcu_read_lock();
                                                                             __rcu_read_unlock();
                                                                           }
                                                                         }
                                                                         mod_objcg_state();
                                                                         __rcu_read_lock();
                                                                         __rcu_read_unlock();
                                                                         __slab_free();
                                                                       }
                                                                       module_put();
                                                                     }
                                                                   }
                                                                 }
                                                               }
                                                             }
                                                             __rcu_read_lock();
                                                             __rcu_read_unlock();
                                                             ip_rcv_finish_core.constprop.0() {
                                                               tcp_v4_early_demux() {
                                                                 __inet_lookup_established() {
                                                                   inet_ehashfn();
                                                                 }
                                                                 ipv4_dst_check();
                                                               }
                                                             }
                                                             ip_local_deliver() {
                                                               __rcu_read_lock();
                                                               __rcu_read_unlock();
                                                               ip_local_deliver_finish() {
                                                                 __rcu_read_lock();
                                                                 ip_protocol_deliver_rcu() {
                                                                   raw_local_deliver() {
                                                                     raw_v4_input() {
                                                                       __rcu_read_lock();
                                                                       __rcu_read_unlock();
                                                                     }
                                                                   }
                                                                   tcp_v4_rcv() {
                                                                     tcp_inbound_md5_hash() {
                                                                       tcp_parse_md5sig_option();
                                                                     }
                                                                     tcp_filter() {
                                                                       sk_filter_trim_cap() {
                                                                         security_sock_rcv_skb() {
                                                                           apparmor_socket_sock_rcv_skb();
                                                                         }
                                                                         __rcu_read_lock();
                                                                         __rcu_read_unlock();
                                                                       }
                                                                     }
                                                                     tcp_v4_fill_cb();
                                                                     _raw_spin_lock();
                                                                     tcp_add_backlog() {
                                                                       skb_condense();
                                                                     }
                                                                     _raw_spin_unlock();
                                                                   }
                                                                 }
                                                                 __rcu_read_unlock();
                                                               }
                                                             }
                                                           }
                                                         }
                                                       }
                                                       __rcu_read_unlock();
                                                       _raw_spin_lock_irq();
                                                       _raw_spin_unlock_irq();
                                                     }
                                                   }
                                                 }
                                               }
                                             }
                                           }
                                         }
                                       }
                                     }
                                   }
                                 }
                                 __rcu_read_unlock();
                               }
                             }
                             tcp_update_skb_after_send();
                             tcp_rate_skb_sent();
                           }
                           tcp_event_new_data_sent() {
                             tcp_rbtree_insert();
                             tcp_rearm_rto() {
                               sk_reset_timer() {
                                 mod_timer() {
                                   lock_timer_base() {
                                     _raw_spin_lock_irqsave();
                                   }
                                   calc_wheel_index();
                                   detach_if_pending();
                                   get_nohz_timer_target();
                                   enqueue_timer();
                                   _raw_spin_unlock_irqrestore();
                                 }
                               }
                             }
                             tcp_check_space();
                           }
                           tcp_chrono_stop();
                           tcp_cwnd_validate();
                           tcp_schedule_loss_probe.part.0() {
                             __usecs_to_jiffies();
                             jiffies_to_usecs();
                             __usecs_to_jiffies();
                             sk_reset_timer() {
                               mod_timer();
                             }
                           }
                         }
                       }
                     }
                     sk_stream_wait_close();
                     _raw_write_lock_bh();
                     _raw_write_unlock_bh() {
                       __local_bh_enable_ip();
                     }
                     _raw_spin_lock();
                     __release_sock() {
                       _raw_spin_unlock_bh() {
                         __local_bh_enable_ip();
                       }
                       tcp_v4_do_rcv() {
                         tcp_rcv_state_process() {
                           tcp_mstamp_refresh() {
                             ktime_get();
                           }
                           tcp_validate_incoming();
                           tcp_ack() {
                             ktime_get_seconds();
                             tcp_clean_rtx_queue.constprop.0() {
                               tcp_rack_advance();
                               tcp_rate_skb_delivered();
                               tcp_ack_tstamp();
                               __sk_mem_reclaim() {
                                 __sk_mem_reduce_allocated() {
                                   mem_cgroup_uncharge_skmem() {
                                     __mod_memcg_state() {
                                       cgroup_rstat_updated();
                                     }
                                     refill_stock() {
                                       __refill_stock() {
                                         drain_stock() {
                                           page_counter_uncharge() {
                                             page_counter_cancel() {
                                               propagate_protected_usage();
                                             }
                                             page_counter_cancel() {
                                               propagate_protected_usage();
                                             }
                                             page_counter_cancel() {
                                               propagate_protected_usage();
                                             }
                                             page_counter_cancel() {
                                               propagate_protected_usage();
                                             }
                                             page_counter_cancel() {
                                               propagate_protected_usage();
                                             }
                                             page_counter_cancel() {
                                               propagate_protected_usage();
                                             }
                                             page_counter_cancel() {
                                               propagate_protected_usage();
                                             }
                                           }
                                           __rcu_read_lock();
                                           __rcu_read_unlock();
                                         }
                                         __rcu_read_lock();
                                         __rcu_read_unlock();
                                       }
                                     }
                                   }
                                 }
                               }
                               __kfree_skb() {
                                 skb_release_head_state();
                                 skb_release_data() {
                                   skb_free_head() {
                                     kfree() {
                                       __kmem_cache_free();
                                     }
                                   }
                                 }
                                 kfree_skbmem() {
                                   kmem_cache_free();
                                 }
                               }
                               tcp_chrono_stop();
                               tcp_ack_update_rtt() {
                                 tcp_rtt_estimator() {
                                   jiffies_to_usecs();
                                 }
                                 __usecs_to_jiffies();
                               }
                               cubictcp_acked();
                             }
                             tcp_rack_update_reo_wnd();
                             tcp_schedule_loss_probe() {
                               tcp_schedule_loss_probe.part.0();
                             }
                             tcp_rearm_rto();
                             tcp_newly_delivered();
                             tcp_rate_gen();
                             cubictcp_cong_avoid();
                             tcp_update_pacing_rate();
                             tcp_xmit_recovery();
                           }
                           tcp_update_metrics() {
                             __rcu_read_lock();
                             tcp_get_metrics() {
                               __tcp_get_metrics();
                             }
                             __rcu_read_unlock();
                           }
                           tcp_done() {
                             tcp_set_state() {
                               inet_unhash() {
                                 _raw_spin_lock_bh();
                                 _raw_spin_unlock_bh() {
                                   __local_bh_enable_ip();
                                 }
                               }
                               inet_put_port() {
                                 _raw_spin_lock();
                                 _raw_spin_lock();
                                 kmem_cache_free() {
                                   __slab_free();
                                 }
                                 _raw_spin_unlock();
                                 _raw_spin_unlock();
                                 __local_bh_enable_ip();
                               }
                               inet_sk_state_store();
                             }
                             hrtimer_try_to_cancel() {
                               hrtimer_active();
                             }
                             hrtimer_try_to_cancel() {
                               hrtimer_active();
                             }
                             inet_csk_clear_xmit_timers() {
                               sk_stop_timer() {
                                 timer_delete() {
                                   lock_timer_base() {
                                     _raw_spin_lock_irqsave();
                                   }
                                   detach_if_pending();
                                   _raw_spin_unlock_irqrestore();
                                 }
                               }
                               sk_stop_timer() {
                                 timer_delete() {
                                   lock_timer_base() {
                                     _raw_spin_lock_irqsave();
                                   }
                                   detach_if_pending();
                                   _raw_spin_unlock_irqrestore();
                                 }
                               }
                               sk_stop_timer() {
                                 timer_delete() {
                                   lock_timer_base() {
                                     _raw_spin_lock_irqsave();
                                   }
                                   detach_if_pending();
                                   _raw_spin_unlock_irqrestore();
                                 }
                               }
                             }
                             inet_csk_destroy_sock() {
                               tcp_v4_destroy_sock() {
                                 hrtimer_try_to_cancel() {
                                   hrtimer_active();
                                 }
                                 hrtimer_try_to_cancel() {
                                   hrtimer_active();
                                 }
                                 inet_csk_clear_xmit_timers() {
                                   sk_stop_timer() {
                                     timer_delete();
                                   }
                                   sk_stop_timer() {
                                     timer_delete();
                                   }
                                   sk_stop_timer() {
                                     timer_delete();
                                   }
                                 }
                                 tcp_cleanup_congestion_control() {
                                   module_put();
                                 }
                                 tcp_cleanup_ulp();
                                 tcp_write_queue_purge() {
                                   tcp_chrono_stop();
                                 }
                                 tcp_fastopen_active_disable_ofo_check();
                                 skb_rbtree_purge();
                                 tcp_free_fastopen_req();
                                 tcp_fastopen_destroy_cipher();
                                 kfree();
                               }
                               sk_stream_kill_queues() {
                                 skb_queue_purge() {
                                   skb_dequeue() {
                                     _raw_spin_lock_irqsave();
                                     _raw_spin_unlock_irqrestore();
                                   }
                                 }
                               }
                             }
                           }
                           __kfree_skb() {
                             skb_release_head_state();
                             skb_release_data() {
                               skb_free_head() {
                                 kfree() {
                                   __kmem_cache_free();
                                 }
                               }
                             }
                             kfree_skbmem() {
                               kmem_cache_free();
                             }
                           }
                         }
                       }
                       __cond_resched();
                       _raw_spin_lock_bh();
                     }
                     _raw_spin_unlock();
                     __local_bh_enable_ip();
                   }
                   release_sock() {
                     _raw_spin_lock_bh();
                     tcp_release_cb();
                     _raw_spin_unlock_bh() {
                       __local_bh_enable_ip();
                     }
                   }
                   sk_free() {
                     __sk_free() {
                       netlink_has_listeners() {
                         __rcu_read_lock();
                         __rcu_read_unlock();
                       }
                       sk_destruct() {
                         __sk_destruct() {
                           inet_sock_destruct() {
                             kfree();
                             dst_release();
                             dst_release();
                           }
                           bpf_sk_storage_free() {
                             __rcu_read_lock();
                             __rcu_read_unlock();
                           }
                           put_pid();
                           cgroup_sk_free() {
                             __rcu_read_lock();
                             __rcu_read_unlock();
                             __rcu_read_lock();
                             __rcu_read_unlock();
                           }
                           mem_cgroup_sk_free() {
                             __rcu_read_lock();
                             __rcu_read_unlock();
                           }
                           security_sk_free() {
                             apparmor_sk_free_security() {
                               path_put() {
                                 dput();
                                 mntput();
                               }
                             }
                             kfree() {
                               __kmem_cache_free() {
                                 __slab_free();
                               }
                             }
                           }
                           kmem_cache_free() {
                             __slab_free();
                           }
                           module_put();
                         }
                       }
                     }
                   }
                 }
               }
               up_write();
               module_put();
             }
           }
           module_put();
           put_pid();
           dput() {
             __cond_resched();
             __rcu_read_lock();
             _raw_spin_lock();
             __rcu_read_unlock();
             _raw_spin_trylock();
             __dentry_kill() {
               dentry_unlink_inode() {
                 _raw_spin_unlock();
                 _raw_spin_unlock();
                 iput() {
                   _raw_spin_lock();
                   _raw_spin_unlock();
                   evict() {
                     inode_wait_for_writeback() {
                       _raw_spin_lock();
                       __inode_wait_for_writeback() {
                         bit_waitqueue();
                       }
                       _raw_spin_unlock();
                     }
                     truncate_inode_pages_final() {
                       truncate_inode_pages_range();
                     }
                     clear_inode() {
                       _raw_spin_lock_irq();
                       _raw_spin_unlock_irq();
                     }
                     _raw_spin_lock();
                     wake_up_bit();
                     _raw_spin_unlock();
                     destroy_inode() {
                       __destroy_inode() {
                         inode_has_buffers();
                         security_inode_free() {
                           integrity_inode_free();
                           hook_inode_free_security();
                           apparmor_inode_free_security();
                           call_rcu() {
                             __call_rcu_common.constprop.0() {
                               rcu_segcblist_enqueue();
                             }
                           }
                         }
                         __fsnotify_inode_delete() {
                           fsnotify_destroy_marks() {
                             fsnotify_grab_connector() {
                               __srcu_read_lock();
                               __srcu_read_unlock();
                             }
                           }
                         }
                         locks_free_lock_context();
                       }
                       call_rcu() {
                         __call_rcu_common.constprop.0() {
                           rcu_segcblist_enqueue();
                         }
                       }
                     }
                   }
                 }
               }
               _raw_spin_lock();
               _raw_spin_unlock();
               dentry_free() {
                 kmem_cache_free() {
                   obj_cgroup_uncharge() {
                     refill_obj_stock() {
                       drain_obj_stock() {
                         __rcu_read_lock();
                         __mod_memcg_lruvec_state() {
                           cgroup_rstat_updated();
                         }
                         __rcu_read_unlock();
                       }
                       __rcu_read_lock();
                       __rcu_read_unlock();
                       __rcu_read_lock();
                       __rcu_read_unlock();
                     }
                   }
                   mod_objcg_state();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
               }
               __cond_resched();
             }
           }
           mntput() {
             mntput_no_expire() {
               __rcu_read_lock();
               __rcu_read_unlock();
             }
           }
           security_file_free() {
             apparmor_file_free_security();
             kmem_cache_free();
           }
           call_rcu() {
             __call_rcu_common.constprop.0() {
               rcu_segcblist_enqueue();
             }
           }
         }
       }
       __cond_resched();
     }
     mem_cgroup_handle_over_high();
     blkcg_maybe_throttle_current();
   }
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_epoll_wait() {
   ktime_get_ts64();
   timespec64_add_safe();
   do_epoll_wait() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     ep_poll() {
       select_estimate_accuracy() {
         ktime_get_ts64();
         set_normalized_timespec64();
       }
       _raw_write_lock_irq();
       _raw_write_unlock_irq();
       schedule_hrtimeout_range() {
         schedule_hrtimeout_range_clock() {
           hrtimer_init_sleeper() {
             __hrtimer_init();
           }
           hrtimer_start_range_ns() {
             _raw_spin_lock_irqsave();
             __hrtimer_start_range_ns() {
               get_nohz_timer_target();
               enqueue_hrtimer();
             }
             _raw_spin_unlock_irqrestore();
           }
           schedule() {
             rcu_note_context_switch();
             raw_spin_rq_lock_nested() {
               _raw_spin_lock();
             }
             update_rq_clock();
             dequeue_task_fair() {
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                   cpuacct_charge();
                   __cgroup_account_cputime() {
                     cgroup_rstat_updated();
                   }
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group();
                 update_min_vruntime();
               }
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group() {
                   reweight_entity();
                 }
                 update_min_vruntime();
               }
               dequeue_entity() {
                 update_curr() {
                   __calc_delta();
                   update_min_vruntime();
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group() {
                   reweight_entity();
                 }
                 update_min_vruntime();
               }
               hrtick_update();
             }
             pick_next_task() {
               pick_next_task_fair() {
                 newidle_balance() {
                   __rcu_read_lock();
                   __msecs_to_jiffies();
                   __rcu_read_unlock();
                 }
               }
               put_prev_task_fair() {
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
               }
               pick_next_task_idle() {
                 __update_idle_core() {
                   __rcu_read_lock();
                   available_idle_cpu();
                   __rcu_read_unlock();
                 }
               }
             }
             psi_task_switch() {
               psi_flags_change();
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
             }
             __traceiter_sched_switch() {
               _raw_spin_lock_irqsave();
               _raw_spin_unlock_irqrestore();
             }
             finish_task_switch.isra.0() {
               raw_spin_rq_unlock() {
                 _raw_spin_unlock();
               }
             }
           }
           hrtimer_active();
         }
       }
       _raw_write_lock_irq();
       _raw_write_unlock_irq();
     }
     fput();
   } /* do_epoll_wait */
 } /* __x64_sys_epoll_wait */
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_open() {
   do_sys_openat2() {
     getname() {
       getname_flags.part.0() {
         kmem_cache_alloc() {
           __cond_resched();
           should_failslab();
         }
         __check_object_size() {
           __check_object_size.part.0() {
             check_stack_object();
             is_vmalloc_addr();
             __virt_addr_valid();
             __check_heap_object();
           }
         }
       }
     }
     get_unused_fd_flags() {
       alloc_fd() {
         _raw_spin_lock();
         expand_files();
         _raw_spin_unlock();
       }
     }
     do_filp_open() {
       path_openat() {
         alloc_empty_file() {
           __alloc_file() {
             kmem_cache_alloc() {
               __cond_resched();
               should_failslab();
               __rcu_read_lock();
               __get_obj_cgroup_from_memcg() {
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               __rcu_read_unlock();
               obj_cgroup_charge() {
                 consume_obj_stock();
                 __rcu_read_lock();
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 __rcu_read_unlock();
                 try_charge_memcg() {
                   consume_stock();
                   page_counter_try_charge() {
                     propagate_protected_usage();
                     propagate_protected_usage();
                     propagate_protected_usage();
                   }
                   refill_stock() {
                     __refill_stock() {
                       drain_stock() {
                         page_counter_uncharge() {
                           page_counter_cancel() {
                             propagate_protected_usage();
                           }
                           page_counter_cancel() {
                             propagate_protected_usage();
                           }
                           page_counter_cancel() {
                             propagate_protected_usage();
                           }
                           page_counter_cancel() {
                             propagate_protected_usage();
                           }
                           page_counter_cancel() {
                             propagate_protected_usage();
                           }
                           page_counter_cancel() {
                             propagate_protected_usage();
                           }
                         }
                         __rcu_read_lock();
                         __rcu_read_unlock();
                       }
                       __rcu_read_lock();
                       __rcu_read_unlock();
                     }
                   }
                 }
                 memcg_account_kmem() {
                   __mod_memcg_state() {
                     cgroup_rstat_updated();
                   }
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 refill_obj_stock() {
                   drain_obj_stock() {
                     __rcu_read_lock();
                     __mod_memcg_lruvec_state() {
                       cgroup_rstat_updated();
                     }
                     __rcu_read_unlock();
                   }
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   obj_cgroup_uncharge_pages() {
                     __rcu_read_lock();
                     __rcu_read_lock();
                     __rcu_read_unlock();
                     __rcu_read_unlock();
                     memcg_account_kmem() {
                       __mod_memcg_state() {
                         cgroup_rstat_updated();
                       }
                     }
                     refill_stock() {
                       __refill_stock();
                     }
                     __rcu_read_lock();
                     __rcu_read_unlock();
                   }
                 }
               }
               ___slab_alloc();
               __rcu_read_lock();
               __rcu_read_unlock();
               mod_objcg_state();
               __rcu_read_lock();
               __rcu_read_unlock();
             }
             security_file_alloc() {
               kmem_cache_alloc() {
                 __cond_resched();
                 should_failslab();
               }
               hook_file_alloc_security();
               apparmor_file_alloc_security() {
                 __cond_resched();
               }
             }
             __mutex_init();
           }
         }
         path_init() {
           __rcu_read_lock();
           nd_jump_root() {
             set_root();
           }
         }
         link_path_walk.part.0.constprop.0() {
           mnt_user_ns();
           inode_permission() {
             ovl_permission [overlay]() {
               ovl_inode_upper [overlay]();
               ovl_i_path_real [overlay]();
               generic_permission() {
                 get_cached_acl_rcu() {
                   do_ovl_get_acl [overlay]() {
                     ovl_i_path_real [overlay]();
                     get_cached_acl_rcu();
                   }
                 }
               }
               ovl_override_creds [overlay]() {
                 override_creds();
               }
               mnt_user_ns();
               inode_permission() {
                 generic_permission();
                 security_inode_permission();
               }
               revert_creds();
             }
             security_inode_permission();
           }
           walk_component() {
             lookup_fast() {
               __d_lookup_rcu();
             }
             step_into() {
               __lookup_mnt();
             }
           }
           mnt_user_ns();
           inode_permission() {
             generic_permission();
             security_inode_permission();
           }
           walk_component() {
             lookup_fast() {
               __d_lookup_rcu();
               pid_revalidate() {
                 __rcu_read_lock();
                 pid_task();
                 task_dump_owner() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 security_task_to_inode();
                 __rcu_read_unlock();
               }
             }
             step_into();
           }
           mnt_user_ns();
           inode_permission() {
             proc_pid_permission() {
               get_pid_task() {
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               generic_permission();
             }
             security_inode_permission();
           }
         }
         open_last_lookups() {
           lookup_fast() {
             __d_lookup_rcu();
             pid_revalidate() {
               __rcu_read_lock();
               pid_task();
               task_dump_owner() {
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 _raw_spin_lock();
                 _raw_spin_unlock();
               }
               security_task_to_inode();
               __rcu_read_unlock();
             }
           }
           step_into();
         }
         do_open() {
           complete_walk() {
             try_to_unlazy() {
               legitimize_links();
               __legitimize_path() {
                 __legitimize_mnt();
               }
               __rcu_read_unlock();
             }
           }
           mnt_user_ns();
           may_open() {
             inode_permission() {
               generic_permission();
               security_inode_permission();
             }
           }
           vfs_open() {
             do_dentry_open() {
               path_get() {
                 mntget();
               }
               try_module_get();
               security_file_open() {
                 hook_file_open();
                 apparmor_file_open() {
                   mnt_user_ns();
                   aa_path_perm() {
                     aa_get_buffer() {
                       _raw_spin_trylock();
                       _raw_spin_unlock();
                     }
                     aa_label_next_confined();
                     profile_path_perm.part.0() {
                       path_name() {
                         aa_path_name() {
                           d_namespace_path.constprop.0() {
                             d_absolute_path() {
                               prepend_path() {
                                 __rcu_read_lock();
                                 __rcu_read_lock();
                                 prepend() {
                                   prepend_copy() {
                                     copy_from_kernel_nofault() {
                                       copy_from_kernel_nofault_allowed();
                                     }
                                   }
                                 }
                                 prepend() {
                                   prepend_copy() {
                                     copy_from_kernel_nofault() {
                                       copy_from_kernel_nofault_allowed();
                                     }
                                   }
                                 }
                                 prepend() {
                                   prepend_copy() {
                                     copy_from_kernel_nofault() {
                                       copy_from_kernel_nofault_allowed();
                                     }
                                   }
                                 }
                                 __rcu_read_unlock();
                                 __rcu_read_unlock();
                               }
                             }
                             our_mnt();
                             our_mnt();
                           }
                         }
                       }
                       __aa_path_perm() {
                         aa_str_perms() {
                           aa_dfa_match();
                         }
                         aa_audit_file();
                       }
                     }
                     aa_label_next_confined();
                     aa_put_buffer() {
                       _raw_spin_trylock();
                       _raw_spin_unlock();
                     }
                   }
                 }
               }
               proc_single_open() {
                 single_open() {
                   kmalloc_trace() {
                     __kmem_cache_alloc_node() {
                       __cond_resched();
                       should_failslab();
                       __rcu_read_lock();
                       __get_obj_cgroup_from_memcg() {
                         __rcu_read_lock();
                         __rcu_read_unlock();
                       }
                       __rcu_read_unlock();
                       obj_cgroup_charge() {
                         consume_obj_stock();
                       }
                       __rcu_read_lock();
                       __rcu_read_unlock();
                       mod_objcg_state();
                       __rcu_read_lock();
                       __rcu_read_unlock();
                     }
                   }
                   seq_open() {
                     kmem_cache_alloc() {
                       __cond_resched();
                       should_failslab();
                       __rcu_read_lock();
                       __get_obj_cgroup_from_memcg() {
                         __rcu_read_lock();
                         __rcu_read_unlock();
                       }
                       __rcu_read_unlock();
                       obj_cgroup_charge() {
                         consume_obj_stock();
                       }
                       __rcu_read_lock();
                       __rcu_read_unlock();
                       mod_objcg_state();
                       __rcu_read_lock();
                       __rcu_read_unlock();
                     }
                     __mutex_init();
                   }
                 }
               }
               file_ra_state_init() {
                 inode_to_bdi();
               }
             }
           }
           ima_file_check() {
             security_current_getsecid_subj() {
               apparmor_current_getsecid_subj();
             }
             process_measurement() {
               mnt_user_ns();
               ima_get_action() {
                 ima_match_policy() {
                   ima_template_desc_current();
                   __rcu_read_lock();
                   ima_match_rules();
                   ima_match_rules();
                   __rcu_read_unlock();
                 }
               }
               down_write() {
                 __cond_resched();
               }
               up_write();
             }
           }
         }
         terminate_walk() {
           dput() {
             __cond_resched();
             __rcu_read_lock();
             __rcu_read_unlock();
           }
           mntput() {
             mntput_no_expire() {
               __rcu_read_lock();
               __rcu_read_unlock();
             }
           }
         }
       }
     }
     fd_install();
     putname() {
       kmem_cache_free();
     }
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_read() {
   ksys_read() {
     __fdget_pos() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
       mutex_lock() {
         __cond_resched();
       }
     }
     vfs_read() {
       rw_verify_area() {
         security_file_permission() {
           apparmor_file_permission() {
             aa_file_perm() {
               __rcu_read_lock();
               aa_label_is_subset();
               __rcu_read_unlock();
             }
           }
         }
       }
       seq_read() {
         __get_task_ioprio();
         seq_read_iter() {
           mutex_lock() {
             __cond_resched();
           }
           kvmalloc_node() {
             __kmalloc_node() {
               kmalloc_slab();
               __kmem_cache_alloc_node() {
                 __cond_resched();
                 should_failslab();
                 __rcu_read_lock();
                 __get_obj_cgroup_from_memcg() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_unlock();
                 obj_cgroup_charge() {
                   consume_obj_stock();
                   __rcu_read_lock();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   __rcu_read_unlock();
                   try_charge_memcg() {
                     consume_stock();
                   }
                   memcg_account_kmem() {
                     __mod_memcg_state() {
                       cgroup_rstat_updated();
                     }
                   }
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   refill_obj_stock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 mod_objcg_state() {
                   __rcu_read_lock();
                   __mod_memcg_lruvec_state() {
                     cgroup_rstat_updated();
                   }
                   __rcu_read_unlock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
             }
           }
           single_start();
           proc_single_show() {
             get_pid_task() {
               __rcu_read_lock();
               __rcu_read_unlock();
             }
             proc_tgid_stat() {
               do_task_stat() {
                 ptrace_may_access() {
                   _raw_spin_lock();
                   __ptrace_may_access();
                   _raw_spin_unlock();
                 }
                 get_task_mm() {
                   _raw_spin_lock();
                   _raw_spin_unlock();
                 }
                 task_vsize();
                 __lock_task_sighand() {
                   __rcu_read_lock();
                   _raw_spin_lock_irqsave();
                   __rcu_read_unlock();
                 }
                 collect_sigign_sigcatch.constprop.0.isra.0();
                 thread_group_cputime_adjusted() {
                   thread_group_cputime() {
                     task_sched_runtime() {
                       task_rq_lock() {
                         _raw_spin_lock_irqsave();
                         raw_spin_rq_lock_nested() {
                           _raw_spin_lock();
                         }
                       }
                       update_rq_clock();
                       update_curr_fair() {
                         update_curr() {
                           update_min_vruntime();
                           cpuacct_charge();
                           __cgroup_account_cputime() {
                             cgroup_rstat_updated();
                           }
                         }
                       }
                       raw_spin_rq_unlock() {
                         _raw_spin_unlock();
                       }
                       _raw_spin_unlock_irqrestore();
                     }
                     __rcu_read_lock();
                     __rcu_read_unlock();
                   }
                   cputime_adjust() {
                     _raw_spin_lock_irqsave();
                     _raw_spin_unlock_irqrestore();
                   }
                 }
                 __task_pid_nr_ns() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __task_pid_nr_ns() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __task_pid_nr_ns() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 _raw_spin_unlock_irqrestore();
                 task_prio();
                 nsec_to_clock_t();
                 pid_nr_ns();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_puts();
                 proc_task_name() {
                   __get_task_comm() {
                     _raw_spin_lock();
                     _raw_spin_unlock();
                   }
                   seq_printf();
                 }
                 seq_puts();
                 seq_putc();
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 nsec_to_clock_t();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 nsec_to_clock_t();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 nsec_to_clock_t();
                 seq_put_decimal_ll();
                 nsec_to_clock_t();
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 nsec_to_clock_t();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 nsec_to_clock_t();
                 seq_put_decimal_ll();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ll();
                 seq_putc();
                 mmput() {
                   __cond_resched();
                 }
               }
             }
           }
           single_next();
           single_stop();
           __check_object_size() {
             __check_object_size.part.0() {
               check_stack_object();
               is_vmalloc_addr();
               __virt_addr_valid();
               __check_heap_object();
             }
           }
           mutex_unlock();
         }
       }
     }
     __f_unlock_pos() {
       mutex_unlock();
     }
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_close() {
   close_fd() {
     _raw_spin_lock();
     pick_file();
     _raw_spin_unlock();
     filp_close() {
       dnotify_flush();
       locks_remove_posix();
       fput() {
         task_work_add() {
           kick_process();
         }
       }
     }
   }
 }
 exit_to_user_mode_prepare() {
   exit_to_user_mode_loop() {
     task_work_run() {
       _raw_spin_lock_irq();
       _raw_spin_unlock_irq();
       ____fput() {
         __fput() {
           __cond_resched();
           locks_remove_file();
           ima_file_free() {
             integrity_iint_find();
           }
           single_release() {
             kvfree() {
               is_vmalloc_addr();
               kfree() {
                 __kmem_cache_free() {
                   obj_cgroup_uncharge() {
                     refill_obj_stock() {
                       obj_cgroup_uncharge_pages() {
                         __rcu_read_lock();
                         __rcu_read_lock();
                         __rcu_read_unlock();
                         __rcu_read_unlock();
                         memcg_account_kmem() {
                           __mod_memcg_state() {
                             cgroup_rstat_updated();
                           }
                         }
                         refill_stock() {
                           __refill_stock();
                         }
                         __rcu_read_lock();
                         __rcu_read_unlock();
                       }
                     }
                   }
                   mod_objcg_state();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
               }
             }
             kmem_cache_free() {
               obj_cgroup_uncharge() {
                 refill_obj_stock();
               }
               mod_objcg_state() {
                 __rcu_read_lock();
                 __mod_memcg_lruvec_state() {
                   cgroup_rstat_updated();
                 }
                 __rcu_read_unlock();
               }
               __rcu_read_lock();
               __rcu_read_unlock();
             }
             kfree() {
               __kmem_cache_free() {
                 obj_cgroup_uncharge() {
                   refill_obj_stock();
                 }
                 mod_objcg_state();
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
             }
           }
           module_put();
           put_pid();
           dput() {
             __cond_resched();
             __rcu_read_lock();
             _raw_spin_lock();
             __rcu_read_unlock();
             pid_delete_dentry();
             _raw_spin_unlock();
           }
           mntput() {
             mntput_no_expire() {
               __rcu_read_lock();
               __rcu_read_unlock();
             }
           }
           security_file_free() {
             apparmor_file_free_security();
             kmem_cache_free();
           }
           call_rcu() {
             __call_rcu_common.constprop.0() {
               rcu_segcblist_enqueue();
             }
           }
         }
       }
       __cond_resched();
     }
     mem_cgroup_handle_over_high();
     blkcg_maybe_throttle_current();
   }
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_epoll_wait() {
   ktime_get_ts64();
   timespec64_add_safe();
   do_epoll_wait() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     ep_poll() {
       select_estimate_accuracy() {
         ktime_get_ts64();
         set_normalized_timespec64();
       }
       _raw_write_lock_irq();
       _raw_write_unlock_irq();
       schedule_hrtimeout_range() {
         schedule_hrtimeout_range_clock() {
           hrtimer_init_sleeper() {
             __hrtimer_init();
           }
           hrtimer_start_range_ns() {
             _raw_spin_lock_irqsave();
             __hrtimer_start_range_ns() {
               get_nohz_timer_target();
               enqueue_hrtimer();
             }
             _raw_spin_unlock_irqrestore();
           }
           schedule() {
             rcu_note_context_switch();
             raw_spin_rq_lock_nested() {
               _raw_spin_lock();
             }
             update_rq_clock();
             dequeue_task_fair() {
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                   cpuacct_charge();
                   __cgroup_account_cputime() {
                     cgroup_rstat_updated();
                   }
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group();
                 update_min_vruntime();
               }
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group() {
                   reweight_entity();
                 }
                 update_min_vruntime();
               }
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group() {
                   reweight_entity();
                 }
                 update_min_vruntime();
               }
               hrtick_update();
             }
             pick_next_task() {
               pick_next_task_fair() {
                 newidle_balance() {
                   __rcu_read_lock();
                   __msecs_to_jiffies();
                   __rcu_read_unlock();
                 }
               }
               put_prev_task_fair() {
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
               }
               pick_next_task_idle() {
                 __update_idle_core() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
               }
             }
             psi_task_switch() {
               psi_flags_change();
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
             }
             __traceiter_sched_switch() {
               _raw_spin_lock_irqsave();
               _raw_spin_unlock_irqrestore();
             }
             finish_task_switch.isra.0() {
               raw_spin_rq_unlock() {
                 _raw_spin_unlock();
               }
             }
           }
           hrtimer_active();
           hrtimer_try_to_cancel.part.0() {
             _raw_spin_lock_irqsave();
             __remove_hrtimer();
             _raw_spin_unlock_irqrestore();
           }
         }
       }
       ep_send_events() {
         mutex_lock() {
           __cond_resched();
         }
         _raw_write_lock_irq();
         _raw_write_unlock_irq();
         ep_item_poll.isra.0() {
           sock_poll() {
             tcp_poll();
           }
         }
         ep_done_scan() {
           _raw_write_lock_irq();
           __pm_relax();
           _raw_write_unlock_irq();
         }
         mutex_unlock();
       }
     }
     fput();
   } /* do_epoll_wait */
 } /* __x64_sys_epoll_wait */
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_accept() {
   __sys_accept4() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     get_unused_fd_flags() {
       alloc_fd() {
         _raw_spin_lock();
         expand_files();
         _raw_spin_unlock();
       }
     }
     do_accept() {
       sock_alloc() {
         new_inode_pseudo() {
           alloc_inode() {
             sock_alloc_inode() {
               kmem_cache_alloc_lru() {
                 __cond_resched();
                 should_failslab();
                 __rcu_read_lock();
                 __get_obj_cgroup_from_memcg() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_unlock();
                 __rcu_read_lock();
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 __rcu_read_unlock();
                 memcg_list_lru_alloc() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 obj_cgroup_charge() {
                   consume_obj_stock();
                   __rcu_read_lock();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   __rcu_read_unlock();
                   try_charge_memcg() {
                     consume_stock();
                     page_counter_try_charge() {
                       propagate_protected_usage();
                       propagate_protected_usage();
                       propagate_protected_usage();
                     }
                     refill_stock() {
                       __refill_stock() {
                         drain_stock() {
                           page_counter_uncharge() {
                             page_counter_cancel() {
                               propagate_protected_usage();
                             }
                             page_counter_cancel() {
                               propagate_protected_usage();
                             }
                             page_counter_cancel() {
                               propagate_protected_usage();
                             }
                             page_counter_cancel() {
                               propagate_protected_usage();
                             }
                             page_counter_cancel() {
                               propagate_protected_usage();
                             }
                             page_counter_cancel() {
                               propagate_protected_usage();
                             }
                             page_counter_cancel() {
                               propagate_protected_usage();
                             }
                           }
                           __rcu_read_lock();
                           __rcu_read_unlock();
                         }
                         __rcu_read_lock();
                         __rcu_read_unlock();
                       }
                     }
                   }
                   memcg_account_kmem() {
                     __mod_memcg_state() {
                       cgroup_rstat_updated();
                     }
                   }
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   refill_obj_stock() {
                     drain_obj_stock() {
                       __rcu_read_lock();
                       __mod_memcg_lruvec_state() {
                         cgroup_rstat_updated();
                       }
                       __rcu_read_unlock();
                       __rcu_read_lock();
                       __mod_memcg_lruvec_state() {
                         cgroup_rstat_updated();
                       }
                       __rcu_read_unlock();
                     }
                     __rcu_read_lock();
                     __rcu_read_unlock();
                     __rcu_read_lock();
                     __rcu_read_unlock();
                     obj_cgroup_uncharge_pages() {
                       __rcu_read_lock();
                       __rcu_read_lock();
                       __rcu_read_unlock();
                       __rcu_read_unlock();
                       memcg_account_kmem() {
                         __mod_memcg_state() {
                           cgroup_rstat_updated();
                         }
                       }
                       refill_stock() {
                         __refill_stock();
                       }
                       __rcu_read_lock();
                       __rcu_read_unlock();
                     }
                   }
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 mod_objcg_state();
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               __init_waitqueue_head();
             }
             inode_init_always() {
               make_kuid() {
                 map_id_range_down();
               }
               make_kgid() {
                 map_id_range_down();
               }
               __init_rwsem();
               __init_rwsem();
               security_inode_alloc() {
                 kmem_cache_alloc() {
                   __cond_resched();
                   should_failslab();
                 }
                 apparmor_inode_alloc_security();
               }
             }
           }
           _raw_spin_lock();
           _raw_spin_unlock();
         }
         get_next_ino();
       }
       __module_get();
       sock_alloc_file() {
         alloc_file_pseudo() {
           d_alloc_pseudo() {
             __d_alloc() {
               kmem_cache_alloc_lru() {
                 __cond_resched();
                 should_failslab();
                 __rcu_read_lock();
                 __get_obj_cgroup_from_memcg() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_unlock();
                 __rcu_read_lock();
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 __rcu_read_unlock();
                 memcg_list_lru_alloc() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 obj_cgroup_charge() {
                   consume_obj_stock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 mod_objcg_state();
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               d_set_d_op();
             }
           }
           mntget();
           d_instantiate() {
             security_d_instantiate() {
               apparmor_d_instantiate() {
                 _raw_spin_lock();
                 _raw_spin_unlock();
               }
             }
             _raw_spin_lock();
             __d_instantiate() {
               d_flags_for_inode();
               _raw_spin_lock();
               _raw_spin_unlock();
             }
             _raw_spin_unlock();
           }
           alloc_file() {
             alloc_empty_file() {
               __alloc_file() {
                 kmem_cache_alloc() {
                   __cond_resched();
                   should_failslab();
                   __rcu_read_lock();
                   __get_obj_cgroup_from_memcg() {
                     __rcu_read_lock();
                     __rcu_read_unlock();
                   }
                   __rcu_read_unlock();
                   obj_cgroup_charge() {
                     consume_obj_stock();
                   }
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   mod_objcg_state();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 security_file_alloc() {
                   kmem_cache_alloc() {
                     __cond_resched();
                     should_failslab();
                   }
                   hook_file_alloc_security();
                   apparmor_file_alloc_security() {
                     __cond_resched();
                   }
                 }
                 __mutex_init();
               }
             }
           }
         }
         stream_open();
       }
       security_socket_accept() {
         apparmor_socket_accept() {
           aa_sk_perm() {
             __cond_resched();
             aa_label_sk_perm.part.0() {
               aa_label_next_confined();
               aa_profile_af_perm() {
                 aa_apply_modes_to_perms();
                 aa_check_perms();
               }
               aa_label_next_confined();
             }
           }
         }
       }
       inet_accept() {
         inet_csk_accept() {
           lock_sock_nested() {
             __cond_resched();
             _raw_spin_lock_bh();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           _raw_spin_lock_bh();
           _raw_spin_unlock_bh() {
             __local_bh_enable_ip();
           }
           release_sock() {
             _raw_spin_lock_bh();
             tcp_release_cb();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           lock_sock_nested() {
             __cond_resched();
             _raw_spin_lock_bh();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           mem_cgroup_sk_alloc() {
             __rcu_read_lock();
             __rcu_read_lock();
             __rcu_read_unlock();
             __rcu_read_unlock();
           }
           release_sock() {
             _raw_spin_lock_bh();
             tcp_release_cb();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           tcp_v4_reqsk_destructor() {
             kfree();
           }
           kfree();
           kmem_cache_free();
         }
         lock_sock_nested() {
           __cond_resched();
           _raw_spin_lock_bh();
           _raw_spin_unlock_bh() {
             __local_bh_enable_ip();
           }
         }
         _raw_write_lock_bh();
         security_sock_graft() {
           apparmor_sock_graft();
         }
         _raw_write_unlock_bh() {
           __local_bh_enable_ip();
         }
         release_sock() {
           _raw_spin_lock_bh();
           tcp_release_cb();
           _raw_spin_unlock_bh() {
             __local_bh_enable_ip();
           }
         }
       }
       inet_getname() {
         lock_sock_nested() {
           __cond_resched();
           _raw_spin_lock_bh();
           _raw_spin_unlock_bh() {
             __local_bh_enable_ip();
           }
         }
         release_sock() {
           _raw_spin_lock_bh();
           tcp_release_cb();
           _raw_spin_unlock_bh() {
             __local_bh_enable_ip();
           }
         }
       }
       move_addr_to_user() {
         __check_object_size() {
           __check_object_size.part.0() {
             check_stack_object();
           }
         }
       }
     }
     fd_install();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_fcntl() {
   __fdget_raw() {
     __fget_light() {
       __rcu_read_lock();
       __rcu_read_unlock();
     }
   }
   security_file_fcntl();
   do_fcntl();
   fput();
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_fcntl() {
   __fdget_raw() {
     __fget_light() {
       __rcu_read_lock();
       __rcu_read_unlock();
     }
   }
   security_file_fcntl();
   do_fcntl() {
     setfl() {
       _raw_spin_lock();
       _raw_spin_unlock();
     }
   }
   fput();
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_setsockopt() {
   __sys_setsockopt() {
     sockfd_lookup_light() {
       __fdget() {
         __fget_light() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
       }
     }
     security_socket_setsockopt() {
       apparmor_socket_setsockopt() {
         aa_sk_perm() {
           __cond_resched();
           aa_label_sk_perm.part.0() {
             aa_label_next_confined();
             aa_profile_af_perm() {
               aa_apply_modes_to_perms();
               aa_check_perms();
             }
             aa_label_next_confined();
           }
         }
       }
     }
     sock_common_setsockopt() {
       tcp_setsockopt() {
         do_tcp_setsockopt() {
           sockopt_lock_sock() {
             __cond_resched();
             _raw_spin_lock_bh();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           sockopt_release_sock() {
             release_sock() {
               _raw_spin_lock_bh();
               tcp_release_cb();
               _raw_spin_unlock_bh() {
                 __local_bh_enable_ip();
               }
             }
           }
         }
       }
     }
     kfree();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_setsockopt() {
   __sys_setsockopt() {
     sockfd_lookup_light() {
       __fdget() {
         __fget_light() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
       }
     }
     security_socket_setsockopt() {
       apparmor_socket_setsockopt() {
         aa_sk_perm() {
           __cond_resched();
           aa_label_sk_perm.part.0() {
             aa_label_next_confined();
             aa_profile_af_perm() {
               aa_apply_modes_to_perms();
               aa_check_perms();
             }
             aa_label_next_confined();
           }
         }
       }
     }
     sock_setsockopt() {
       sk_setsockopt() {
         __cond_resched();
         _raw_spin_lock_bh();
         _raw_spin_unlock_bh() {
           __local_bh_enable_ip();
         }
         tcp_set_keepalive() {
           inet_csk_reset_keepalive_timer() {
             sk_reset_timer() {
               mod_timer() {
                 lock_timer_base() {
                   _raw_spin_lock_irqsave();
                 }
                 detach_if_pending();
                 get_nohz_timer_target();
                 calc_wheel_index();
                 enqueue_timer();
                 _raw_spin_unlock_irqrestore();
               }
             }
           }
         }
         release_sock() {
           _raw_spin_lock_bh();
           tcp_release_cb();
           _raw_spin_unlock_bh() {
             __local_bh_enable_ip();
           }
         }
       }
     }
     kfree();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_setsockopt() {
   __sys_setsockopt() {
     sockfd_lookup_light() {
       __fdget() {
         __fget_light() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
       }
     }
     security_socket_setsockopt() {
       apparmor_socket_setsockopt() {
         aa_sk_perm() {
           __cond_resched();
           aa_label_sk_perm.part.0() {
             aa_label_next_confined();
             aa_profile_af_perm() {
               aa_apply_modes_to_perms();
               aa_check_perms();
             }
             aa_label_next_confined();
           }
         }
       }
     }
     sock_common_setsockopt() {
       tcp_setsockopt() {
         do_tcp_setsockopt() {
           sockopt_lock_sock() {
             __cond_resched();
             _raw_spin_lock_bh();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           tcp_sock_set_keepidle_locked() {
             inet_csk_reset_keepalive_timer() {
               sk_reset_timer() {
                 mod_timer() {
                   lock_timer_base() {
                     _raw_spin_lock_irqsave();
                   }
                   calc_wheel_index();
                   detach_if_pending();
                   get_nohz_timer_target();
                   enqueue_timer();
                   _raw_spin_unlock_irqrestore();
                 }
               }
             }
           }
           sockopt_release_sock() {
             release_sock() {
               _raw_spin_lock_bh();
               tcp_release_cb();
               _raw_spin_unlock_bh() {
                 __local_bh_enable_ip();
               }
             }
           }
         }
       }
     }
     kfree();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_setsockopt() {
   __sys_setsockopt() {
     sockfd_lookup_light() {
       __fdget() {
         __fget_light() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
       }
     }
     security_socket_setsockopt() {
       apparmor_socket_setsockopt() {
         aa_sk_perm() {
           __cond_resched();
           aa_label_sk_perm.part.0() {
             aa_label_next_confined();
             aa_profile_af_perm() {
               aa_apply_modes_to_perms();
               aa_check_perms();
             }
             aa_label_next_confined();
           }
         }
       }
     }
     sock_common_setsockopt() {
       tcp_setsockopt() {
         do_tcp_setsockopt() {
           sockopt_lock_sock() {
             __cond_resched();
             _raw_spin_lock_bh();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           sockopt_release_sock() {
             release_sock() {
               _raw_spin_lock_bh();
               tcp_release_cb();
               _raw_spin_unlock_bh() {
                 __local_bh_enable_ip();
               }
             }
           }
         }
       }
     }
     kfree();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_setsockopt() {
   __sys_setsockopt() {
     sockfd_lookup_light() {
       __fdget() {
         __fget_light() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
       }
     }
     security_socket_setsockopt() {
       apparmor_socket_setsockopt() {
         aa_sk_perm() {
           __cond_resched();
           aa_label_sk_perm.part.0() {
             aa_label_next_confined();
             aa_profile_af_perm() {
               aa_apply_modes_to_perms();
               aa_check_perms();
             }
             aa_label_next_confined();
           }
         }
       }
     }
     sock_common_setsockopt() {
       tcp_setsockopt() {
         do_tcp_setsockopt() {
           sockopt_lock_sock() {
             __cond_resched();
             _raw_spin_lock_bh();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           sockopt_release_sock() {
             release_sock() {
               _raw_spin_lock_bh();
               tcp_release_cb();
               _raw_spin_unlock_bh() {
                 __local_bh_enable_ip();
               }
             }
           }
         }
       }
     }
     kfree();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_epoll_ctl() {
   do_epoll_ctl() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     mutex_lock() {
       __cond_resched();
     }
     ep_insert() {
       kmem_cache_alloc() {
         __cond_resched();
         should_failslab();
         __rcu_read_lock();
         __get_obj_cgroup_from_memcg() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
         __rcu_read_unlock();
         obj_cgroup_charge() {
           consume_obj_stock();
         }
         ___slab_alloc();
         __rcu_read_lock();
         __rcu_read_unlock();
         mod_objcg_state();
         __rcu_read_lock();
         __rcu_read_unlock();
       }
       kmem_cache_alloc() {
         __cond_resched();
         should_failslab();
         __rcu_read_lock();
         __get_obj_cgroup_from_memcg() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
         __rcu_read_unlock();
         obj_cgroup_charge() {
           consume_obj_stock();
         }
         __rcu_read_lock();
         __rcu_read_unlock();
         mod_objcg_state();
         __rcu_read_lock();
         __rcu_read_unlock();
       }
       _raw_spin_lock();
       _raw_spin_unlock();
       ep_item_poll.isra.0() {
         sock_poll() {
           tcp_poll() {
             ep_ptable_queue_proc() {
               kmem_cache_alloc() {
                 __cond_resched();
                 should_failslab();
                 __rcu_read_lock();
                 __get_obj_cgroup_from_memcg() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_unlock();
                 obj_cgroup_charge() {
                   consume_obj_stock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 mod_objcg_state();
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               add_wait_queue() {
                 _raw_spin_lock_irqsave();
                 _raw_spin_unlock_irqrestore();
               }
             }
             tcp_stream_memory_free();
           }
         }
       }
       _raw_write_lock_irq();
       _raw_write_unlock_irq();
     }
     mutex_unlock();
     fput();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_accept() {
   __sys_accept4() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     get_unused_fd_flags() {
       alloc_fd() {
         _raw_spin_lock();
         expand_files();
         _raw_spin_unlock();
       }
     }
     do_accept() {
       sock_alloc() {
         new_inode_pseudo() {
           alloc_inode() {
             sock_alloc_inode() {
               kmem_cache_alloc_lru() {
                 __cond_resched();
                 should_failslab();
                 __rcu_read_lock();
                 __get_obj_cgroup_from_memcg() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_unlock();
                 __rcu_read_lock();
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 __rcu_read_unlock();
                 memcg_list_lru_alloc() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 obj_cgroup_charge() {
                   consume_obj_stock();
                   __rcu_read_lock();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   __rcu_read_unlock();
                   try_charge_memcg() {
                     consume_stock();
                   }
                   memcg_account_kmem() {
                     __mod_memcg_state() {
                       cgroup_rstat_updated();
                     }
                   }
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   refill_obj_stock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 mod_objcg_state();
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               __init_waitqueue_head();
             }
             inode_init_always() {
               make_kuid() {
                 map_id_range_down();
               }
               make_kgid() {
                 map_id_range_down();
               }
               __init_rwsem();
               __init_rwsem();
               security_inode_alloc() {
                 kmem_cache_alloc() {
                   __cond_resched();
                   should_failslab();
                 }
                 apparmor_inode_alloc_security();
               }
             }
           }
           _raw_spin_lock();
           _raw_spin_unlock();
         }
         get_next_ino();
       }
       __module_get();
       sock_alloc_file() {
         alloc_file_pseudo() {
           d_alloc_pseudo() {
             __d_alloc() {
               kmem_cache_alloc_lru() {
                 __cond_resched();
                 should_failslab();
                 __rcu_read_lock();
                 __get_obj_cgroup_from_memcg() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_unlock();
                 __rcu_read_lock();
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 __rcu_read_unlock();
                 memcg_list_lru_alloc() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 obj_cgroup_charge() {
                   consume_obj_stock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 mod_objcg_state();
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               d_set_d_op();
             }
           }
           mntget();
           d_instantiate() {
             security_d_instantiate() {
               apparmor_d_instantiate() {
                 _raw_spin_lock();
                 _raw_spin_unlock();
               }
             }
             _raw_spin_lock();
             __d_instantiate() {
               d_flags_for_inode();
               _raw_spin_lock();
               _raw_spin_unlock();
             }
             _raw_spin_unlock();
           }
           alloc_file() {
             alloc_empty_file() {
               __alloc_file() {
                 kmem_cache_alloc() {
                   __cond_resched();
                   should_failslab();
                   __rcu_read_lock();
                   __get_obj_cgroup_from_memcg() {
                     __rcu_read_lock();
                     __rcu_read_unlock();
                   }
                   __rcu_read_unlock();
                   obj_cgroup_charge() {
                     consume_obj_stock();
                   }
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   mod_objcg_state();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 security_file_alloc() {
                   kmem_cache_alloc() {
                     __cond_resched();
                     should_failslab();
                   }
                   hook_file_alloc_security();
                   apparmor_file_alloc_security() {
                     __cond_resched();
                   }
                 }
                 __mutex_init();
               }
             }
           }
         }
         stream_open();
       }
       security_socket_accept() {
         apparmor_socket_accept() {
           aa_sk_perm() {
             __cond_resched();
             aa_label_sk_perm.part.0() {
               aa_label_next_confined();
               aa_profile_af_perm() {
                 aa_apply_modes_to_perms();
                 aa_check_perms();
               }
               aa_label_next_confined();
             }
           }
         }
       }
       inet_accept() {
         inet_csk_accept() {
           lock_sock_nested() {
             __cond_resched();
             _raw_spin_lock_bh();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           release_sock() {
             _raw_spin_lock_bh();
             tcp_release_cb();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
         }
       }
       fput() {
         task_work_add() {
           kick_process();
         }
       }
     }
     put_unused_fd() {
       _raw_spin_lock();
       _raw_spin_unlock();
     }
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   exit_to_user_mode_loop() {
     task_work_run() {
       _raw_spin_lock_irq();
       _raw_spin_unlock_irq();
       ____fput() {
         __fput() {
           __cond_resched();
           locks_remove_file();
           ima_file_free();
           sock_close() {
             __sock_release() {
               down_write() {
                 __cond_resched();
               }
               inet_release();
               up_write();
               module_put();
             }
           }
           module_put();
           put_pid();
           dput() {
             __cond_resched();
             __rcu_read_lock();
             _raw_spin_lock();
             __rcu_read_unlock();
             _raw_spin_trylock();
             __dentry_kill() {
               dentry_unlink_inode() {
                 _raw_spin_unlock();
                 _raw_spin_unlock();
                 iput() {
                   _raw_spin_lock();
                   _raw_spin_unlock();
                   evict() {
                     inode_wait_for_writeback() {
                       _raw_spin_lock();
                       __inode_wait_for_writeback() {
                         bit_waitqueue();
                       }
                       _raw_spin_unlock();
                     }
                     truncate_inode_pages_final() {
                       truncate_inode_pages_range();
                     }
                     clear_inode() {
                       _raw_spin_lock_irq();
                       _raw_spin_unlock_irq();
                     }
                     _raw_spin_lock();
                     wake_up_bit();
                     _raw_spin_unlock();
                     destroy_inode() {
                       __destroy_inode() {
                         inode_has_buffers();
                         security_inode_free() {
                           integrity_inode_free();
                           hook_inode_free_security();
                           apparmor_inode_free_security();
                           call_rcu() {
                             __call_rcu_common.constprop.0() {
                               rcu_segcblist_enqueue();
                             }
                           }
                         }
                         __fsnotify_inode_delete() {
                           fsnotify_destroy_marks() {
                             fsnotify_grab_connector() {
                               __srcu_read_lock();
                               __srcu_read_unlock();
                             }
                           }
                         }
                         locks_free_lock_context();
                       }
                       call_rcu() {
                         __call_rcu_common.constprop.0() {
                           rcu_segcblist_enqueue();
                         }
                       }
                     }
                   }
                 }
               }
               _raw_spin_lock();
               _raw_spin_unlock();
               dentry_free() {
                 kmem_cache_free() {
                   obj_cgroup_uncharge() {
                     refill_obj_stock();
                   }
                   mod_objcg_state();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
               }
               __cond_resched();
             }
           }
           mntput() {
             mntput_no_expire() {
               __rcu_read_lock();
               __rcu_read_unlock();
             }
           }
           security_file_free() {
             apparmor_file_free_security();
             kmem_cache_free();
           }
           call_rcu() {
             __call_rcu_common.constprop.0() {
               rcu_segcblist_enqueue();
             }
           }
         }
       }
       __cond_resched();
     }
     mem_cgroup_handle_over_high();
     blkcg_maybe_throttle_current();
   }
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_epoll_wait() {
   ktime_get_ts64();
   timespec64_add_safe();
   do_epoll_wait() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     ep_poll() {
       select_estimate_accuracy() {
         ktime_get_ts64();
         set_normalized_timespec64();
       }
       ep_send_events() {
         mutex_lock() {
           __cond_resched();
         }
         _raw_write_lock_irq();
         _raw_write_unlock_irq();
         ep_item_poll.isra.0() {
           sock_poll() {
             tcp_poll();
           }
         }
         ep_item_poll.isra.0() {
           sock_poll() {
             tcp_poll() {
               tcp_stream_memory_free();
             }
           }
         }
         ep_done_scan() {
           _raw_write_lock_irq();
           __pm_relax();
           _raw_write_unlock_irq();
         }
         mutex_unlock();
       }
     }
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_read() {
   ksys_read() {
     __fdget_pos() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     vfs_read() {
       rw_verify_area() {
         security_file_permission() {
           apparmor_file_permission() {
             aa_file_perm() {
               __rcu_read_lock();
               __rcu_read_unlock();
               aa_sock_file_perm() {
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
               aa_sock_file_perm() {
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
               update_file_ctx() {
                 _raw_spin_lock();
                 aa_label_merge();
                 _raw_spin_unlock();
               }
             }
           }
         }
       }
       __get_task_ioprio();
       sock_read_iter() {
         sock_recvmsg() {
           security_socket_recvmsg() {
             apparmor_socket_recvmsg() {
               aa_sk_perm() {
                 __cond_resched();
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
             }
           }
           inet_recvmsg() {
             tcp_recvmsg() {
               lock_sock_nested() {
                 __cond_resched();
                 _raw_spin_lock_bh();
                 _raw_spin_unlock_bh() {
                   __local_bh_enable_ip();
                 }
               }
               tcp_recvmsg_locked() {
                 skb_copy_datagram_iter() {
                   __skb_datagram_iter() {
                     __cond_resched();
                     simple_copy_to_iter() {
                       __check_object_size() {
                         __check_object_size.part.0() {
                           check_stack_object();
                           is_vmalloc_addr();
                           __virt_addr_valid();
                         }
                       }
                     }
                   }
                 }
                 tcp_rcv_space_adjust() {
                   tcp_mstamp_refresh() {
                     ktime_get();
                   }
                 }
                 sock_rfree() {
                   __sk_mem_reduce_allocated() {
                     mem_cgroup_uncharge_skmem() {
                       __mod_memcg_state() {
                         cgroup_rstat_updated();
                       }
                       refill_stock() {
                         __refill_stock();
                       }
                     }
                   }
                 }
                 skb_attempt_defer_free() {
                   _raw_spin_lock_irqsave();
                   _raw_spin_unlock_irqrestore();
                 }
                 tcp_cleanup_rbuf() {
                   __tcp_cleanup_rbuf();
                 }
               }
               release_sock() {
                 _raw_spin_lock_bh();
                 tcp_release_cb();
                 _raw_spin_unlock_bh() {
                   __local_bh_enable_ip();
                 }
               }
             }
           }
         }
       }
     }
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_write() {
   ksys_write() {
     __fdget_pos() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     vfs_write() {
       rw_verify_area() {
         security_file_permission() {
           apparmor_file_permission() {
             aa_file_perm() {
               __rcu_read_lock();
               __rcu_read_unlock();
               aa_sock_file_perm() {
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
               aa_sock_file_perm() {
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
               update_file_ctx() {
                 _raw_spin_lock();
                 aa_label_merge();
                 _raw_spin_unlock();
               }
             }
           }
         }
       }
       __get_task_ioprio();
       sock_write_iter() {
         sock_sendmsg() {
           security_socket_sendmsg() {
             apparmor_socket_sendmsg() {
               aa_sk_perm() {
                 __cond_resched();
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
             }
           }
           inet_sendmsg() {
             inet_send_prepare();
             tcp_sendmsg() {
               lock_sock_nested() {
                 __cond_resched();
                 _raw_spin_lock_bh();
                 _raw_spin_unlock_bh() {
                   __local_bh_enable_ip();
                 }
               }
               tcp_sendmsg_locked() {
                 tcp_rate_check_app_limited();
                 tcp_send_mss() {
                   tcp_current_mss() {
                     ipv4_mtu();
                     tcp_established_options();
                   }
                 }
                 tcp_stream_memory_free();
                 tcp_stream_alloc_skb() {
                   __alloc_skb() {
                     kmem_cache_alloc_node() {
                       __cond_resched();
                       should_failslab();
                     }
                     kmalloc_reserve() {
                       kmalloc_size_roundup() {
                         kmalloc_slab();
                       }
                       __kmalloc_node_track_caller() {
                         kmalloc_slab();
                         __kmem_cache_alloc_node() {
                           __cond_resched();
                           should_failslab();
                         }
                       }
                     }
                     __build_skb_around();
                   }
                   sk_forced_mem_schedule() {
                     mem_cgroup_charge_skmem() {
                       try_charge_memcg() {
                         consume_stock();
                       }
                       __mod_memcg_state() {
                         cgroup_rstat_updated();
                       }
                     }
                   }
                 }
                 tcp_skb_entail() {
                   tcp_chrono_start();
                 }
                 sk_page_frag_refill() {
                   skb_page_frag_refill();
                 }
                 tcp_wmem_schedule();
                 __check_object_size() {
                   __check_object_size.part.0() {
                     check_stack_object();
                     is_vmalloc_addr();
                     __virt_addr_valid();
                   }
                 }
                 tcp_tx_timestamp();
                 tcp_push() {
                   __tcp_push_pending_frames() {
                     tcp_write_xmit() {
                       ktime_get();
                       tcp_mtu_probe();
                       tcp_tso_segs();
                       tcp_small_queue_check.isra.0();
                       __tcp_transmit_skb() {
                         skb_clone() {
                           __skb_clone() {
                             __copy_skb_header();
                           }
                         }
                         tcp_established_options();
                         skb_push();
                         __tcp_select_window();
                         tcp_options_write();
                         bpf_skops_write_hdr_opt.isra.0();
                         tcp_v4_send_check();
                         cubictcp_cwnd_event();
                         ip_queue_xmit() {
                           __ip_queue_xmit() {
                             __rcu_read_lock();
                             __sk_dst_check() {
                               ipv4_dst_check();
                             }
                             skb_push();
                             ip_local_out() {
                               __ip_local_out() {
                                 ip_send_check();
                                 __rcu_read_lock();
                                 __rcu_read_unlock();
                               }
                               ip_output() {
                                 __rcu_read_lock();
                                 nf_hook_slow() {
                                   apparmor_ip_postroute();
                                 }
                                 __rcu_read_unlock();
                                 ip_finish_output() {
                                   __ip_finish_output() {
                                     ip_finish_output2() {
                                       __dev_queue_xmit() {
                                         qdisc_pkt_len_init();
                                         netdev_core_pick_tx();
                                         validate_xmit_skb() {
                                           netif_skb_features() {
                                             passthru_features_check();
                                             skb_network_protocol();
                                           }
                                           skb_csum_hwoffload_help();
                                           validate_xmit_xfrm();
                                         }
                                         dev_hard_start_xmit() {
                                           veth_xmit [veth]() {
                                             __rcu_read_lock();
                                             skb_clone_tx_timestamp();
                                             __dev_forward_skb() {
                                               __dev_forward_skb2() {
                                                 skb_scrub_packet();
                                                 eth_type_trans();
                                               }
                                             }
                                             __netif_rx() {
                                               netif_rx_internal() {
                                                 enqueue_to_backlog() {
                                                   _raw_spin_lock_irqsave();
                                                   __raise_softirq_irqoff();
                                                   _raw_spin_unlock_irqrestore();
                                                 }
                                               }
                                             }
                                             __rcu_read_unlock();
                                           }
                                         }
                                         __local_bh_enable_ip();
                                       }
                                       __local_bh_enable_ip() {
                                         do_softirq.part.0() {
                                           __do_softirq() {
                                             net_rx_action() {
                                               __usecs_to_jiffies();
                                               __napi_poll() {
                                                 process_backlog() {
                                                   _raw_spin_lock_irq();
                                                   _raw_spin_unlock_irq();
                                                   __rcu_read_lock();
                                                   __netif_receive_skb() {
                                                     __netif_receive_skb_one_core() {
                                                       __netif_receive_skb_core.constprop.0() {
                                                         br_handle_frame [bridge]() {
                                                           br_nf_pre_routing [br_netfilter]() {
                                                             __rcu_read_lock();
                                                             __rcu_read_unlock();
                                                             __rcu_read_lock();
                                                             __rcu_read_unlock();
                                                             __rcu_read_lock();
                                                             __rcu_read_unlock();
                                                             skb_pull_rcsum();
                                                             br_validate_ipv4 [br_netfilter]();
                                                             skb_ext_add() {
                                                               __skb_ext_alloc() {
                                                                 kmem_cache_alloc() {
                                                                   should_failslab();
                                                                 }
                                                               }
                                                             }
                                                             setup_pre_routing [br_netfilter]() {
                                                               brnf_get_logical_dev [br_netfilter]() {
                                                                 __rcu_read_lock();
                                                                 __rcu_read_unlock();
                                                               }
                                                               tcp_wfree() {
                                                                 sk_free();
                                                               }
                                                             }
                                                             __rcu_read_lock();
                                                             nf_hook_slow() {
                                                               ip_sabotage_in [br_netfilter]();
                                                               ipv4_conntrack_defrag [nf_defrag_ipv4]();
                                                               ipv4_conntrack_in [nf_conntrack]() {
                                                                 nf_conntrack_in [nf_conntrack]() {
                                                                   get_l4proto [nf_conntrack]();
                                                                   resolve_normal_ct [nf_conntrack]() {
                                                                     nf_ct_get_tuple [nf_conntrack]();
                                                                     hash_conntrack_raw [nf_conntrack]();
                                                                     __nf_conntrack_find_get [nf_conntrack]() {
                                                                       __rcu_read_lock();
                                                                       __rcu_read_unlock();
                                                                     }
                                                                   }
                                                                   nf_conntrack_handle_packet [nf_conntrack]() {
                                                                     nf_conntrack_tcp_packet [nf_conntrack]() {
                                                                       nf_checksum() {
                                                                         nf_ip_checksum();
                                                                       }
                                                                       _raw_spin_lock_bh();
                                                                       tcp_in_window [nf_conntrack]() {
                                                                         nf_ct_seq_offset [nf_conntrack]();
                                                                       }
                                                                       _raw_spin_unlock_bh() {
                                                                         __local_bh_enable_ip();
                                                                       }
                                                                       __nf_ct_refresh_acct [nf_conntrack]() {
                                                                         nf_ct_acct_add [nf_conntrack]();
                                                                       }
                                                                     }
                                                                   }
                                                                 }
                                                               }
                                                               nf_nat_ipv4_pre_routing [nf_nat]() {
                                                                 nf_nat_inet_fn [nf_nat]();
                                                               }
                                                             }
                                                             __rcu_read_unlock();
                                                             br_nf_pre_routing_finish [br_netfilter]() {
                                                               skb_push();
                                                               br_nf_hook_thresh [br_netfilter]() {
                                                                 nf_hook_slow();
                                                                 br_handle_frame_finish [bridge]() {
                                                                   br_allowed_ingress [bridge]();
                                                                   nbp_switchdev_frame_mark [bridge]();
                                                                   br_fdb_update [bridge]() {
                                                                     fdb_find_rcu [bridge]();
                                                                   }
                                                                   br_fdb_find_rcu [bridge]() {
                                                                     fdb_find_rcu [bridge]();
                                                                   }
                                                                   br_pass_frame_up [bridge]() {
                                                                     br_allowed_egress [bridge]();
                                                                     br_handle_vlan [bridge]();
                                                                     br_multicast_count [bridge]();
                                                                     netif_receive_skb() {
                                                                       skb_defer_rx_timestamp();
                                                                       __rcu_read_lock();
                                                                       __netif_receive_skb() {
                                                                         __netif_receive_skb_one_core() {
                                                                           __netif_receive_skb_core.constprop.0();
                                                                           ip_rcv() {
                                                                             ip_rcv_core();
                                                                             __rcu_read_lock();
                                                                             nf_hook_slow() {
                                                                               ip_sabotage_in [br_netfilter]() {
                                                                                 ip_rcv_finish() {
                                                                                   ip_rcv_finish_core.constprop.0() {
                                                                                     tcp_v4_early_demux() {
                                                                                       __inet_lookup_established() {
                                                                                         inet_ehashfn();
                                                                                       }
                                                                                     }
                                                                                     ip_route_input_noref() {
                                                                                       __rcu_read_lock();
                                                                                       ip_route_input_slow() {
                                                                                         make_kuid() {
                                                                                           map_id_range_down();
                                                                                         }
                                                                                         __rcu_read_lock();
                                                                                         fib_table_lookup() {
                                                                                           fib_lookup_good_nhc();
                                                                                         }
                                                                                         __rcu_read_unlock();
                                                                                         fib_validate_source() {
                                                                                           __fib_validate_source() {
                                                                                             l3mdev_master_ifindex_rcu();
                                                                                             make_kuid() {
                                                                                               map_id_range_down();
                                                                                             }
                                                                                             __rcu_read_lock();
                                                                                             fib_table_lookup() {
                                                                                               fib_lookup_good_nhc();
                                                                                             }
                                                                                             __rcu_read_unlock();
                                                                                             fib_info_nh_uses_dev();
                                                                                           }
                                                                                         }
                                                                                       }
                                                                                       __rcu_read_unlock();
                                                                                     }
                                                                                   }
                                                                                   ip_local_deliver() {
                                                                                     __rcu_read_lock();
                                                                                     nf_hook_slow() {
                                                                                       nft_do_chain_ipv4 [nf_tables]() {
                                                                                         nft_do_chain [nf_tables]() {
                                                                                           expr_call_ops_eval [nf_tables]() {
                                                                                             nft_counter_eval [nf_tables]() {
                                                                                               __local_bh_enable_ip();
                                                                                             }
                                                                                           }
                                                                                           expr_call_ops_eval [nf_tables]() {
                                                                                             nft_immediate_eval [nf_tables]();
                                                                                           }
                                                                                           expr_call_ops_eval [nf_tables]() {
                                                                                             nft_meta_get_eval [nf_tables]();
                                                                                           }
                                                                                           expr_call_ops_eval [nf_tables]() {
                                                                                             nft_meta_get_eval [nf_tables]();
                                                                                           }
                                                                                           expr_call_ops_eval [nf_tables]() {
                                                                                             nft_meta_get_eval [nf_tables]();
                                                                                           }
                                                                                           expr_call_ops_eval [nf_tables]() {
                                                                                             nft_meta_get_eval [nf_tables]();
                                                                                           }
                                                                                         }
                                                                                       }
                                                                                       nf_nat_ipv4_local_in [nf_nat]() {
                                                                                         nf_nat_inet_fn [nf_nat]();
                                                                                       }
                                                                                       nf_confirm [nf_conntrack]();
                                                                                     }
                                                                                     __rcu_read_unlock();
                                                                                     ip_local_deliver_finish() {
                                                                                       __rcu_read_lock();
                                                                                       ip_protocol_deliver_rcu() {
                                                                                         raw_local_deliver() {
                                                                                           raw_v4_input() {
                                                                                             __rcu_read_lock();
                                                                                             __rcu_read_unlock();
                                                                                           }
                                                                                         }
                                                                                         tcp_v4_rcv() {
                                                                                           tcp_inbound_md5_hash() {
                                                                                             tcp_parse_md5sig_option();
                                                                                           }
                                                                                           tcp_filter() {
                                                                                             sk_filter_trim_cap() {
                                                                                               security_sock_rcv_skb() {
                                                                                                 apparmor_socket_sock_rcv_skb();
                                                                                               }
                                                                                               __rcu_read_lock();
                                                                                               __rcu_read_unlock();
                                                                                             }
                                                                                           }
                                                                                           tcp_v4_fill_cb();
                                                                                           _raw_spin_lock();
                                                                                           tcp_v4_do_rcv() {
                                                                                             tcp_rcv_established() {
                                                                                               tcp_mstamp_refresh() {
                                                                                                 ktime_get();
                                                                                               }
                                                                                               inet_sk_rx_dst_set();
                                                                                               tcp_ack() {
                                                                                                 ktime_get_seconds();
                                                                                               }
                                                                                               tcp_urg();
                                                                                               tcp_data_queue() {
                                                                                                 sk_forced_mem_schedule() {
                                                                                                   mem_cgroup_charge_skmem();
                                                                                                 }
                                                                                                 tcp_queue_rcv();
                                                                                                 tcp_event_data_recv();
                                                                                                 tcp_data_ready() {
                                                                                                   sock_def_readable();
                                                                                                 }
                                                                                               }
                                                                                               tcp_check_space();
                                                                                               __tcp_ack_snd_check() {
                                                                                                 tcp_send_ack() {
                                                                                                   __tcp_send_ack.part.0();
                                                                                                 }
                                                                                               }
                                                                                             }
                                                                                           }
                                                                                           _raw_spin_unlock();
                                                                                         }
                                                                                       }
                                                                                       __rcu_read_unlock();
                                                                                     }
                                                                                   }
                                                                                 }
                                                                               }
                                                                             }
                                                                             __rcu_read_unlock();
                                                                           }
                                                                         }
                                                                       }
                                                                       __rcu_read_unlock();
                                                                     }
                                                                   }
                                                                 }
                                                               }
                                                             }
                                                           }
                                                         }
                                                       }
                                                     }
                                                   }
                                                   __rcu_read_unlock();
                                                   _raw_spin_lock_irq();
                                                   _raw_spin_unlock_irq();
                                                   __rcu_read_lock();
                                                   __netif_receive_skb() {
                                                     __netif_receive_skb_one_core() {
                                                       __netif_receive_skb_core.constprop.0();
                                                       ip_rcv() {
                                                         ip_rcv_core() {
                                                           __sock_wfree();
                                                         }
                                                         __rcu_read_lock();
                                                         __rcu_read_unlock();
                                                         ip_rcv_finish_core.constprop.0() {
                                                           tcp_v4_early_demux() {
                                                             __inet_lookup_established() {
                                                               inet_ehashfn();
                                                             }
                                                             ipv4_dst_check();
                                                           }
                                                         }
                                                         ip_local_deliver() {
                                                           __rcu_read_lock();
                                                           __rcu_read_unlock();
                                                           ip_local_deliver_finish() {
                                                             __rcu_read_lock();
                                                             ip_protocol_deliver_rcu() {
                                                               raw_local_deliver() {
                                                                 raw_v4_input() {
                                                                   __rcu_read_lock();
                                                                   __rcu_read_unlock();
                                                                 }
                                                               }
                                                               tcp_v4_rcv() {
                                                                 tcp_inbound_md5_hash() {
                                                                   tcp_parse_md5sig_option();
                                                                 }
                                                                 tcp_filter() {
                                                                   sk_filter_trim_cap() {
                                                                     security_sock_rcv_skb() {
                                                                       apparmor_socket_sock_rcv_skb();
                                                                     }
                                                                     __rcu_read_lock();
                                                                     __rcu_read_unlock();
                                                                   }
                                                                 }
                                                                 tcp_v4_fill_cb();
                                                                 _raw_spin_lock();
                                                                 tcp_add_backlog() {
                                                                   skb_condense();
                                                                 }
                                                                 _raw_spin_unlock();
                                                               }
                                                             }
                                                             __rcu_read_unlock();
                                                           }
                                                         }
                                                       }
                                                     }
                                                   }
                                                   __rcu_read_unlock();
                                                   _raw_spin_lock_irq();
                                                   _raw_spin_unlock_irq();
                                                 }
                                               }
                                               _raw_spin_lock_irqsave();
                                               _raw_spin_unlock_irqrestore();
                                               napi_consume_skb() {
                                                 skb_release_head_state() {
                                                   __skb_ext_put() {
                                                     kmem_cache_free();
                                                   }
                                                 }
                                                 skb_release_data();
                                                 kfree_skbmem();
                                               }
                                             }
                                           }
                                         }
                                       }
                                     }
                                   }
                                 }
                               }
                             }
                             __rcu_read_unlock();
                           }
                         }
                         tcp_update_skb_after_send();
                         tcp_rate_skb_sent();
                       }
                       tcp_event_new_data_sent() {
                         tcp_rbtree_insert();
                         tcp_rearm_rto() {
                           sk_reset_timer() {
                             mod_timer() {
                               lock_timer_base() {
                                 _raw_spin_lock_irqsave();
                               }
                               detach_if_pending();
                               get_nohz_timer_target();
                               calc_wheel_index();
                               enqueue_timer();
                               _raw_spin_unlock_irqrestore();
                             }
                           }
                         }
                         tcp_check_space();
                       }
                       tcp_chrono_stop();
                       tcp_cwnd_validate();
                       tcp_schedule_loss_probe.part.0() {
                         __usecs_to_jiffies();
                         jiffies_to_usecs();
                         __usecs_to_jiffies();
                         sk_reset_timer() {
                           mod_timer();
                         }
                       }
                     }
                   }
                 }
               }
               release_sock() {
                 _raw_spin_lock_bh();
                 __release_sock() {
                   _raw_spin_unlock_bh() {
                     __local_bh_enable_ip();
                   }
                   tcp_v4_do_rcv() {
                     ipv4_dst_check();
                     tcp_rcv_established() {
                       tcp_mstamp_refresh() {
                         ktime_get();
                       }
                       ktime_get_seconds();
                       tcp_ack() {
                         tcp_clean_rtx_queue.constprop.0() {
                           tcp_rack_advance();
                           tcp_rate_skb_delivered();
                           tcp_ack_tstamp();
                           __sk_mem_reclaim() {
                             __sk_mem_reduce_allocated() {
                               mem_cgroup_uncharge_skmem() {
                                 __mod_memcg_state() {
                                   cgroup_rstat_updated();
                                 }
                                 refill_stock() {
                                   __refill_stock() {
                                     drain_stock() {
                                       page_counter_uncharge() {
                                         page_counter_cancel() {
                                           propagate_protected_usage();
                                         }
                                         page_counter_cancel() {
                                           propagate_protected_usage();
                                         }
                                         page_counter_cancel() {
                                           propagate_protected_usage();
                                         }
                                         page_counter_cancel() {
                                           propagate_protected_usage();
                                         }
                                         page_counter_cancel() {
                                           propagate_protected_usage();
                                         }
                                         page_counter_cancel() {
                                           propagate_protected_usage();
                                         }
                                         page_counter_cancel() {
                                           propagate_protected_usage();
                                         }
                                       }
                                       __rcu_read_lock();
                                       __rcu_read_unlock();
                                     }
                                     __rcu_read_lock();
                                     __rcu_read_unlock();
                                   }
                                 }
                               }
                             }
                           }
                           __kfree_skb() {
                             skb_release_head_state();
                             skb_release_data() {
                               skb_free_head() {
                                 kfree() {
                                   __kmem_cache_free();
                                 }
                               }
                             }
                             kfree_skbmem() {
                               kmem_cache_free();
                             }
                           }
                           tcp_chrono_stop();
                           tcp_ack_update_rtt() {
                             tcp_rtt_estimator() {
                               jiffies_to_usecs();
                             }
                             __usecs_to_jiffies();
                           }
                           cubictcp_acked();
                         }
                         tcp_rack_update_reo_wnd();
                         tcp_schedule_loss_probe() {
                           tcp_schedule_loss_probe.part.0();
                         }
                         tcp_rearm_rto();
                         tcp_newly_delivered();
                         tcp_rate_gen();
                         cubictcp_cong_avoid();
                         tcp_update_pacing_rate();
                         tcp_xmit_recovery();
                       }
                       __kfree_skb() {
                         skb_release_head_state();
                         skb_release_data() {
                           skb_free_head() {
                             kfree() {
                               __kmem_cache_free();
                             }
                           }
                         }
                         kfree_skbmem() {
                           kmem_cache_free();
                         }
                       }
                       tcp_check_space();
                     }
                   }
                   __cond_resched();
                   _raw_spin_lock_bh();
                 }
                 tcp_release_cb();
                 _raw_spin_unlock_bh() {
                   __local_bh_enable_ip();
                 }
               }
             }
           }
         }
       }
     }
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_epoll_wait() {
   ktime_get_ts64();
   timespec64_add_safe();
   do_epoll_wait() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     ep_poll() {
       select_estimate_accuracy() {
         ktime_get_ts64();
         set_normalized_timespec64();
       }
       ep_send_events() {
         mutex_lock() {
           __cond_resched();
         }
         _raw_write_lock_irq();
         _raw_write_unlock_irq();
         ep_item_poll.isra.0() {
           sock_poll() {
             tcp_poll() {
               tcp_stream_memory_free();
             }
           }
         }
         ep_done_scan() {
           _raw_write_lock_irq();
           __pm_relax();
           _raw_write_unlock_irq();
         }
         mutex_unlock();
       }
       _raw_write_lock_irq();
       _raw_write_unlock_irq();
       schedule_hrtimeout_range() {
         schedule_hrtimeout_range_clock() {
           hrtimer_init_sleeper() {
             __hrtimer_init();
           }
           hrtimer_start_range_ns() {
             _raw_spin_lock_irqsave();
             __hrtimer_start_range_ns() {
               get_nohz_timer_target();
               enqueue_hrtimer();
             }
             _raw_spin_unlock_irqrestore();
           }
           schedule() {
             rcu_note_context_switch();
             raw_spin_rq_lock_nested() {
               _raw_spin_lock();
             }
             update_rq_clock();
             dequeue_task_fair() {
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                   cpuacct_charge();
                   __cgroup_account_cputime() {
                     cgroup_rstat_updated();
                   }
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group();
                 update_min_vruntime();
               }
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group() {
                   reweight_entity();
                 }
                 update_min_vruntime();
               }
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group() {
                   reweight_entity();
                 }
                 update_min_vruntime();
               }
               hrtick_update();
             }
             pick_next_task() {
               pick_next_task_fair() {
                 newidle_balance() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   raw_spin_rq_unlock() {
                     _raw_spin_unlock();
                   }
                   update_blocked_averages() {
                     raw_spin_rq_lock_nested() {
                       _raw_spin_lock();
                     }
                     update_rq_clock();
                     update_rt_rq_load_avg();
                     update_dl_rq_load_avg();
                     __update_blocked_fair() {
                       __update_load_avg_cfs_rq();
                       __update_load_avg_se();
                       __update_load_avg_cfs_rq();
                       __update_load_avg_cfs_rq();
                       __update_load_avg_se();
                       __update_load_avg_cfs_rq();
                       __update_load_avg_cfs_rq();
                       __update_load_avg_cfs_rq();
                       __update_load_avg_se();
                       __update_load_avg_cfs_rq();
                       __update_load_avg_cfs_rq();
                       __update_load_avg_se();
                       __update_load_avg_cfs_rq();
                       __update_load_avg_cfs_rq();
                     }
                     raw_spin_rq_unlock() {
                       _raw_spin_unlock();
                     }
                   }
                   __rcu_read_lock();
                   __msecs_to_jiffies();
                   load_balance();
                   __rcu_read_unlock();
                   raw_spin_rq_lock_nested() {
                     _raw_spin_lock();
                   }
                 }
               }
               put_prev_task_fair() {
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
               }
               pick_next_task_idle() {
                 __update_idle_core() {
                   __rcu_read_lock();
                   available_idle_cpu();
                   __rcu_read_unlock();
                 }
               }
             }
             psi_task_switch() {
               psi_flags_change();
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
             }
             __traceiter_sched_switch() {
               _raw_spin_lock_irqsave();
               _raw_spin_unlock_irqrestore();
             }
             finish_task_switch.isra.0() {
               raw_spin_rq_unlock() {
                 _raw_spin_unlock();
               }
             }
           }
           hrtimer_active();
           hrtimer_try_to_cancel.part.0() {
             _raw_spin_lock_irqsave();
             __remove_hrtimer();
             _raw_spin_unlock_irqrestore();
           }
         }
       }
       ep_send_events() {
         mutex_lock() {
           __cond_resched();
         }
         _raw_write_lock_irq();
         _raw_write_unlock_irq();
         ep_item_poll.isra.0() {
           sock_poll() {
             tcp_poll() {
               tcp_stream_memory_free();
             }
           }
         }
         ep_done_scan() {
           _raw_write_lock_irq();
           __pm_relax();
           _raw_write_unlock_irq();
         }
         mutex_unlock();
       }
     }
     fput();
   } /* do_epoll_wait */
 } /* __x64_sys_epoll_wait */
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_read() {
   ksys_read() {
     __fdget_pos() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     vfs_read() {
       rw_verify_area() {
         security_file_permission() {
           apparmor_file_permission() {
             aa_file_perm() {
               __rcu_read_lock();
               aa_label_is_subset();
               __rcu_read_unlock();
             }
           }
         }
       }
       __get_task_ioprio();
       sock_read_iter() {
         sock_recvmsg() {
           security_socket_recvmsg() {
             apparmor_socket_recvmsg() {
               aa_sk_perm() {
                 __cond_resched();
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
             }
           }
           inet_recvmsg() {
             tcp_recvmsg() {
               lock_sock_nested() {
                 __cond_resched();
                 _raw_spin_lock_bh();
                 _raw_spin_unlock_bh() {
                   __local_bh_enable_ip();
                 }
               }
               tcp_recvmsg_locked() {
                 sock_rfree() {
                   __sk_mem_reduce_allocated() {
                     mem_cgroup_uncharge_skmem() {
                       __mod_memcg_state() {
                         cgroup_rstat_updated();
                       }
                       refill_stock() {
                         __refill_stock() {
                           drain_stock() {
                             page_counter_uncharge() {
                               page_counter_cancel() {
                                 propagate_protected_usage();
                               }
                               page_counter_cancel() {
                                 propagate_protected_usage();
                               }
                               page_counter_cancel() {
                                 propagate_protected_usage();
                               }
                               page_counter_cancel() {
                                 propagate_protected_usage();
                               }
                               page_counter_cancel() {
                                 propagate_protected_usage();
                               }
                               page_counter_cancel() {
                                 propagate_protected_usage();
                               }
                             }
                             __rcu_read_lock();
                             __rcu_read_unlock();
                           }
                           __rcu_read_lock();
                           __rcu_read_unlock();
                         }
                       }
                     }
                   }
                 }
                 skb_attempt_defer_free() {
                   _raw_spin_lock_irqsave();
                   _raw_spin_unlock_irqrestore();
                 }
                 tcp_cleanup_rbuf() {
                   __tcp_cleanup_rbuf();
                 }
               }
               release_sock() {
                 _raw_spin_lock_bh();
                 tcp_release_cb();
                 _raw_spin_unlock_bh() {
                   __local_bh_enable_ip();
                 }
               }
             }
           }
         }
       }
     }
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_epoll_ctl() {
   do_epoll_ctl() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     mutex_lock() {
       __cond_resched();
     }
     ep_remove() {
       __rcu_read_lock();
       remove_wait_queue() {
         _raw_spin_lock_irqsave();
         _raw_spin_unlock_irqrestore();
       }
       __rcu_read_unlock();
       kmem_cache_free() {
         obj_cgroup_uncharge() {
           refill_obj_stock() {
             drain_obj_stock() {
               __rcu_read_lock();
               __mod_memcg_lruvec_state() {
                 cgroup_rstat_updated();
               }
               __rcu_read_unlock();
             }
             __rcu_read_lock();
             __rcu_read_unlock();
             __rcu_read_lock();
             __rcu_read_unlock();
           }
         }
         mod_objcg_state();
         __rcu_read_lock();
         __rcu_read_unlock();
       }
       _raw_spin_lock();
       _raw_spin_unlock();
       kmem_cache_free() {
         obj_cgroup_uncharge() {
           refill_obj_stock();
         }
         mod_objcg_state();
         __rcu_read_lock();
         __rcu_read_unlock();
       }
       _raw_write_lock_irq();
       _raw_write_unlock_irq();
       wakeup_source_unregister();
       call_rcu() {
         __call_rcu_common.constprop.0() {
           rcu_segcblist_enqueue();
         }
       }
     }
     mutex_unlock();
     fput();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_close() {
   close_fd() {
     _raw_spin_lock();
     pick_file();
     _raw_spin_unlock();
     filp_close() {
       dnotify_flush();
       locks_remove_posix();
       fput() {
         task_work_add() {
           kick_process();
         }
       }
     }
   }
 }
 exit_to_user_mode_prepare() {
   exit_to_user_mode_loop() {
     task_work_run() {
       _raw_spin_lock_irq();
       _raw_spin_unlock_irq();
       ____fput() {
         __fput() {
           __cond_resched();
           locks_remove_file();
           ima_file_free();
           sock_close() {
             __sock_release() {
               down_write() {
                 __cond_resched();
               }
               inet_release() {
                 ip_mc_drop_socket();
                 tcp_close() {
                   lock_sock_nested() {
                     __cond_resched();
                     _raw_spin_lock_bh();
                     _raw_spin_unlock_bh() {
                       __local_bh_enable_ip();
                     }
                   }
                   __tcp_close() {
                     tcp_set_state() {
                       inet_sk_state_store();
                     }
                     tcp_send_fin() {
                       __alloc_skb() {
                         kmem_cache_alloc_node() {
                           __cond_resched();
                           should_failslab();
                         }
                         kmalloc_reserve() {
                           kmalloc_size_roundup() {
                             kmalloc_slab();
                           }
                           __kmalloc_node_track_caller() {
                             kmalloc_slab();
                             __kmem_cache_alloc_node() {
                               __cond_resched();
                               should_failslab();
                             }
                           }
                         }
                         __build_skb_around();
                       }
                       sk_forced_mem_schedule() {
                         mem_cgroup_charge_skmem() {
                           try_charge_memcg() {
                             consume_stock();
                           }
                           __mod_memcg_state() {
                             cgroup_rstat_updated();
                           }
                         }
                       }
                       tcp_current_mss() {
                         ipv4_mtu();
                         tcp_established_options();
                       }
                       __tcp_push_pending_frames() {
                         tcp_write_xmit() {
                           ktime_get();
                           tcp_mtu_probe();
                           tcp_tso_segs();
                           tcp_small_queue_check.isra.0();
                           __tcp_transmit_skb() {
                             skb_clone() {
                               __skb_clone() {
                                 __copy_skb_header();
                               }
                             }
                             tcp_established_options();
                             skb_push();
                             __tcp_select_window();
                             tcp_options_write();
                             bpf_skops_write_hdr_opt.isra.0();
                             tcp_v4_send_check();
                             ip_queue_xmit() {
                               __ip_queue_xmit() {
                                 __rcu_read_lock();
                                 __sk_dst_check() {
                                   ipv4_dst_check();
                                 }
                                 skb_push();
                                 ip_local_out() {
                                   __ip_local_out() {
                                     ip_send_check();
                                     __rcu_read_lock();
                                     __rcu_read_unlock();
                                   }
                                   ip_output() {
                                     __rcu_read_lock();
                                     nf_hook_slow() {
                                       apparmor_ip_postroute();
                                     }
                                     __rcu_read_unlock();
                                     ip_finish_output() {
                                       __ip_finish_output() {
                                         ip_finish_output2() {
                                           __dev_queue_xmit() {
                                             qdisc_pkt_len_init();
                                             netdev_core_pick_tx();
                                             validate_xmit_skb() {
                                               netif_skb_features() {
                                                 passthru_features_check();
                                                 skb_network_protocol();
                                               }
                                               skb_csum_hwoffload_help();
                                               validate_xmit_xfrm();
                                             }
                                             dev_hard_start_xmit() {
                                               veth_xmit [veth]() {
                                                 __rcu_read_lock();
                                                 skb_clone_tx_timestamp();
                                                 __dev_forward_skb() {
                                                   __dev_forward_skb2() {
                                                     skb_scrub_packet();
                                                     eth_type_trans();
                                                   }
                                                 }
                                                 __netif_rx() {
                                                   netif_rx_internal() {
                                                     enqueue_to_backlog() {
                                                       _raw_spin_lock_irqsave();
                                                       __raise_softirq_irqoff();
                                                       _raw_spin_unlock_irqrestore();
                                                     }
                                                   }
                                                 }
                                                 __rcu_read_unlock();
                                               }
                                             }
                                             __local_bh_enable_ip();
                                           }
                                           __local_bh_enable_ip() {
                                             do_softirq.part.0() {
                                               __do_softirq() {
                                                 net_rx_action() {
                                                   __usecs_to_jiffies();
                                                   __napi_poll() {
                                                     process_backlog() {
                                                       _raw_spin_lock_irq();
                                                       _raw_spin_unlock_irq();
                                                       __rcu_read_lock();
                                                       __netif_receive_skb() {
                                                         __netif_receive_skb_one_core() {
                                                           __netif_receive_skb_core.constprop.0() {
                                                             br_handle_frame [bridge]() {
                                                               br_nf_pre_routing [br_netfilter]() {
                                                                 __rcu_read_lock();
                                                                 __rcu_read_unlock();
                                                                 __rcu_read_lock();
                                                                 __rcu_read_unlock();
                                                                 __rcu_read_lock();
                                                                 __rcu_read_unlock();
                                                                 skb_pull_rcsum();
                                                                 br_validate_ipv4 [br_netfilter]();
                                                                 skb_ext_add() {
                                                                   __skb_ext_alloc() {
                                                                     kmem_cache_alloc() {
                                                                       should_failslab();
                                                                     }
                                                                   }
                                                                 }
                                                                 setup_pre_routing [br_netfilter]() {
                                                                   brnf_get_logical_dev [br_netfilter]() {
                                                                     __rcu_read_lock();
                                                                     __rcu_read_unlock();
                                                                   }
                                                                   tcp_wfree() {
                                                                     sk_free();
                                                                   }
                                                                 }
                                                                 __rcu_read_lock();
                                                                 nf_hook_slow() {
                                                                   ip_sabotage_in [br_netfilter]();
                                                                   ipv4_conntrack_defrag [nf_defrag_ipv4]();
                                                                   ipv4_conntrack_in [nf_conntrack]() {
                                                                     nf_conntrack_in [nf_conntrack]() {
                                                                       get_l4proto [nf_conntrack]();
                                                                       resolve_normal_ct [nf_conntrack]() {
                                                                         nf_ct_get_tuple [nf_conntrack]();
                                                                         hash_conntrack_raw [nf_conntrack]();
                                                                         __nf_conntrack_find_get [nf_conntrack]() {
                                                                           __rcu_read_lock();
                                                                           __rcu_read_unlock();
                                                                         }
                                                                       }
                                                                       nf_conntrack_handle_packet [nf_conntrack]() {
                                                                         nf_conntrack_tcp_packet [nf_conntrack]() {
                                                                           nf_checksum() {
                                                                             nf_ip_checksum();
                                                                           }
                                                                           _raw_spin_lock_bh();
                                                                           tcp_in_window [nf_conntrack]() {
                                                                             nf_ct_seq_offset [nf_conntrack]();
                                                                           }
                                                                           _raw_spin_unlock_bh() {
                                                                             __local_bh_enable_ip();
                                                                           }
                                                                           __nf_ct_refresh_acct [nf_conntrack]() {
                                                                             nf_ct_acct_add [nf_conntrack]();
                                                                           }
                                                                         }
                                                                       }
                                                                     }
                                                                   }
                                                                   nf_nat_ipv4_pre_routing [nf_nat]() {
                                                                     nf_nat_inet_fn [nf_nat]();
                                                                   }
                                                                 }
                                                                 __rcu_read_unlock();
                                                                 br_nf_pre_routing_finish [br_netfilter]() {
                                                                   skb_push();
                                                                   br_nf_hook_thresh [br_netfilter]() {
                                                                     nf_hook_slow();
                                                                     br_handle_frame_finish [bridge]() {
                                                                       br_allowed_ingress [bridge]();
                                                                       nbp_switchdev_frame_mark [bridge]();
                                                                       br_fdb_update [bridge]() {
                                                                         fdb_find_rcu [bridge]();
                                                                       }
                                                                       br_fdb_find_rcu [bridge]() {
                                                                         fdb_find_rcu [bridge]();
                                                                       }
                                                                       br_pass_frame_up [bridge]() {
                                                                         br_allowed_egress [bridge]();
                                                                         br_handle_vlan [bridge]();
                                                                         br_multicast_count [bridge]();
                                                                         netif_receive_skb() {
                                                                           skb_defer_rx_timestamp();
                                                                           __rcu_read_lock();
                                                                           __netif_receive_skb() {
                                                                             __netif_receive_skb_one_core() {
                                                                               __netif_receive_skb_core.constprop.0();
                                                                               ip_rcv() {
                                                                                 ip_rcv_core();
                                                                                 __rcu_read_lock();
                                                                                 nf_hook_slow() {
                                                                                   ip_sabotage_in [br_netfilter]() {
                                                                                     ip_rcv_finish() {
                                                                                       ip_rcv_finish_core.constprop.0() {
                                                                                         tcp_v4_early_demux() {
                                                                                           __inet_lookup_established() {
                                                                                             inet_ehashfn();
                                                                                           }
                                                                                           ipv4_dst_check();
                                                                                         }
                                                                                       }
                                                                                       ip_local_deliver() {
                                                                                         __rcu_read_lock();
                                                                                         nf_hook_slow() {
                                                                                           nft_do_chain_ipv4 [nf_tables]() {
                                                                                             nft_do_chain [nf_tables]() {
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_counter_eval [nf_tables]() {
                                                                                                   __local_bh_enable_ip();
                                                                                                 }
                                                                                               }
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_immediate_eval [nf_tables]();
                                                                                               }
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_meta_get_eval [nf_tables]();
                                                                                               }
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_meta_get_eval [nf_tables]();
                                                                                               }
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_meta_get_eval [nf_tables]();
                                                                                               }
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_meta_get_eval [nf_tables]();
                                                                                               }
                                                                                             }
                                                                                           }
                                                                                           nf_nat_ipv4_local_in [nf_nat]() {
                                                                                             nf_nat_inet_fn [nf_nat]();
                                                                                           }
                                                                                           nf_confirm [nf_conntrack]();
                                                                                         }
                                                                                         __rcu_read_unlock();
                                                                                         ip_local_deliver_finish() {
                                                                                           __rcu_read_lock();
                                                                                           ip_protocol_deliver_rcu() {
                                                                                             raw_local_deliver() {
                                                                                               raw_v4_input() {
                                                                                                 __rcu_read_lock();
                                                                                                 __rcu_read_unlock();
                                                                                               }
                                                                                             }
                                                                                             tcp_v4_rcv() {
                                                                                               tcp_inbound_md5_hash() {
                                                                                                 tcp_parse_md5sig_option();
                                                                                               }
                                                                                               tcp_filter() {
                                                                                                 sk_filter_trim_cap() {
                                                                                                   security_sock_rcv_skb();
                                                                                                   __rcu_read_lock();
                                                                                                   __rcu_read_unlock();
                                                                                                 }
                                                                                               }
                                                                                               tcp_v4_fill_cb();
                                                                                               _raw_spin_lock();
                                                                                               tcp_v4_do_rcv() {
                                                                                                 tcp_rcv_state_process() {
                                                                                                   tcp_mstamp_refresh();
                                                                                                   tcp_validate_incoming();
                                                                                                   tcp_ack();
                                                                                                   tcp_set_state();
                                                                                                   inet_csk_reset_keepalive_timer();
                                                                                                   tcp_urg();
                                                                                                   tcp_data_queue();
                                                                                                 }
                                                                                               }
                                                                                               _raw_spin_unlock();
                                                                                               sk_free();
                                                                                             }
                                                                                           }
                                                                                           __rcu_read_unlock();
                                                                                         }
                                                                                       }
                                                                                     }
                                                                                   }
                                                                                 }
                                                                                 __rcu_read_unlock();
                                                                               }
                                                                             }
                                                                           }
                                                                           __rcu_read_unlock();
                                                                         }
                                                                       }
                                                                     }
                                                                   }
                                                                 }
                                                               }
                                                             }
                                                           }
                                                         }
                                                       }
                                                       __rcu_read_unlock();
                                                       _raw_spin_lock_irq();
                                                       _raw_spin_unlock_irq();
                                                       __rcu_read_lock();
                                                       __netif_receive_skb() {
                                                         __netif_receive_skb_one_core() {
                                                           __netif_receive_skb_core.constprop.0();
                                                           ip_rcv() {
                                                             ip_rcv_core() {
                                                               __sock_wfree() {
                                                                 __sk_free() {
                                                                   netlink_has_listeners() {
                                                                     __rcu_read_lock();
                                                                     __rcu_read_unlock();
                                                                   }
                                                                   sk_destruct() {
                                                                     __sk_destruct() {
                                                                       inet_sock_destruct() {
                                                                         kfree();
                                                                         dst_release();
                                                                         dst_release();
                                                                       }
                                                                       bpf_sk_storage_free() {
                                                                         __rcu_read_lock();
                                                                         __rcu_read_unlock();
                                                                       }
                                                                       put_pid();
                                                                       cgroup_sk_free() {
                                                                         __rcu_read_lock();
                                                                         __rcu_read_unlock();
                                                                         __rcu_read_lock();
                                                                         __rcu_read_unlock();
                                                                       }
                                                                       mem_cgroup_sk_free() {
                                                                         __rcu_read_lock();
                                                                         __rcu_read_unlock();
                                                                       }
                                                                       security_sk_free() {
                                                                         apparmor_sk_free_security() {
                                                                           path_put() {
                                                                             dput();
                                                                             mntput();
                                                                           }
                                                                         }
                                                                         kfree() {
                                                                           __kmem_cache_free();
                                                                         }
                                                                       }
                                                                       kmem_cache_free() {
                                                                         obj_cgroup_uncharge() {
                                                                           refill_obj_stock() {
                                                                             drain_obj_stock() {
                                                                               __rcu_read_lock();
                                                                               __mod_memcg_lruvec_state() {
                                                                                 cgroup_rstat_updated();
                                                                               }
                                                                               __rcu_read_unlock();
                                                                             }
                                                                             __rcu_read_lock();
                                                                             __rcu_read_unlock();
                                                                             __rcu_read_lock();
                                                                             __rcu_read_unlock();
                                                                           }
                                                                         }
                                                                         mod_objcg_state();
                                                                         __rcu_read_lock();
                                                                         __rcu_read_unlock();
                                                                       }
                                                                       module_put();
                                                                     }
                                                                   }
                                                                 }
                                                               }
                                                             }
                                                             __rcu_read_lock();
                                                             __rcu_read_unlock();
                                                             ip_rcv_finish_core.constprop.0() {
                                                               tcp_v4_early_demux() {
                                                                 __inet_lookup_established() {
                                                                   inet_ehashfn();
                                                                 }
                                                                 ipv4_dst_check();
                                                               }
                                                             }
                                                             ip_local_deliver() {
                                                               __rcu_read_lock();
                                                               __rcu_read_unlock();
                                                               ip_local_deliver_finish() {
                                                                 __rcu_read_lock();
                                                                 ip_protocol_deliver_rcu() {
                                                                   raw_local_deliver() {
                                                                     raw_v4_input() {
                                                                       __rcu_read_lock();
                                                                       __rcu_read_unlock();
                                                                     }
                                                                   }
                                                                   tcp_v4_rcv() {
                                                                     tcp_inbound_md5_hash() {
                                                                       tcp_parse_md5sig_option();
                                                                     }
                                                                     tcp_filter() {
                                                                       sk_filter_trim_cap() {
                                                                         security_sock_rcv_skb() {
                                                                           apparmor_socket_sock_rcv_skb();
                                                                         }
                                                                         __rcu_read_lock();
                                                                         __rcu_read_unlock();
                                                                       }
                                                                     }
                                                                     tcp_v4_fill_cb();
                                                                     _raw_spin_lock();
                                                                     tcp_add_backlog() {
                                                                       skb_condense();
                                                                     }
                                                                     _raw_spin_unlock();
                                                                   }
                                                                 }
                                                                 __rcu_read_unlock();
                                                               }
                                                             }
                                                           }
                                                         }
                                                       }
                                                       __rcu_read_unlock();
                                                       _raw_spin_lock_irq();
                                                       _raw_spin_unlock_irq();
                                                     }
                                                   }
                                                 }
                                               }
                                             }
                                           }
                                         }
                                       }
                                     }
                                   }
                                 }
                                 __rcu_read_unlock();
                               }
                             }
                             tcp_update_skb_after_send();
                             tcp_rate_skb_sent();
                           }
                           tcp_event_new_data_sent() {
                             tcp_rbtree_insert();
                             tcp_rearm_rto() {
                               sk_reset_timer() {
                                 mod_timer() {
                                   lock_timer_base() {
                                     _raw_spin_lock_irqsave();
                                   }
                                   calc_wheel_index();
                                   detach_if_pending();
                                   get_nohz_timer_target();
                                   enqueue_timer();
                                   _raw_spin_unlock_irqrestore();
                                 }
                               }
                             }
                             tcp_check_space();
                           }
                           tcp_chrono_stop();
                           tcp_cwnd_validate();
                           tcp_schedule_loss_probe.part.0() {
                             __usecs_to_jiffies();
                             jiffies_to_usecs();
                             __usecs_to_jiffies();
                             sk_reset_timer() {
                               mod_timer();
                             }
                           }
                         }
                       }
                     }
                     sk_stream_wait_close();
                     _raw_write_lock_bh();
                     _raw_write_unlock_bh() {
                       __local_bh_enable_ip();
                     }
                     _raw_spin_lock();
                     __release_sock() {
                       _raw_spin_unlock_bh() {
                         __local_bh_enable_ip();
                       }
                       tcp_v4_do_rcv() {
                         tcp_rcv_state_process() {
                           tcp_mstamp_refresh() {
                             ktime_get();
                           }
                           tcp_validate_incoming();
                           tcp_ack() {
                             ktime_get_seconds();
                             tcp_clean_rtx_queue.constprop.0() {
                               tcp_rack_advance();
                               tcp_rate_skb_delivered();
                               tcp_ack_tstamp();
                               __sk_mem_reclaim() {
                                 __sk_mem_reduce_allocated() {
                                   mem_cgroup_uncharge_skmem() {
                                     __mod_memcg_state() {
                                       cgroup_rstat_updated();
                                     }
                                     refill_stock() {
                                       __refill_stock() {
                                         drain_stock() {
                                           page_counter_uncharge() {
                                             page_counter_cancel() {
                                               propagate_protected_usage();
                                             }
                                             page_counter_cancel() {
                                               propagate_protected_usage();
                                             }
                                             page_counter_cancel() {
                                               propagate_protected_usage();
                                             }
                                             page_counter_cancel() {
                                               propagate_protected_usage();
                                             }
                                             page_counter_cancel() {
                                               propagate_protected_usage();
                                             }
                                             page_counter_cancel() {
                                               propagate_protected_usage();
                                             }
                                             page_counter_cancel() {
                                               propagate_protected_usage();
                                             }
                                           }
                                           __rcu_read_lock();
                                           __rcu_read_unlock();
                                         }
                                         __rcu_read_lock();
                                         __rcu_read_unlock();
                                       }
                                     }
                                   }
                                 }
                               }
                               __kfree_skb() {
                                 skb_release_head_state();
                                 skb_release_data() {
                                   skb_free_head() {
                                     kfree() {
                                       __kmem_cache_free();
                                     }
                                   }
                                 }
                                 kfree_skbmem() {
                                   kmem_cache_free();
                                 }
                               }
                               tcp_chrono_stop();
                               tcp_ack_update_rtt() {
                                 tcp_rtt_estimator() {
                                   jiffies_to_usecs();
                                 }
                                 __usecs_to_jiffies();
                               }
                               cubictcp_acked();
                             }
                             tcp_rack_update_reo_wnd();
                             tcp_schedule_loss_probe() {
                               tcp_schedule_loss_probe.part.0();
                             }
                             tcp_rearm_rto();
                             tcp_newly_delivered();
                             tcp_rate_gen();
                             cubictcp_cong_avoid();
                             tcp_update_pacing_rate();
                             tcp_xmit_recovery();
                           }
                           tcp_update_metrics() {
                             __rcu_read_lock();
                             tcp_get_metrics() {
                               __tcp_get_metrics();
                             }
                             __rcu_read_unlock();
                           }
                           tcp_done() {
                             tcp_set_state() {
                               inet_unhash() {
                                 _raw_spin_lock_bh();
                                 _raw_spin_unlock_bh() {
                                   __local_bh_enable_ip();
                                 }
                               }
                               inet_put_port() {
                                 _raw_spin_lock();
                                 _raw_spin_lock();
                                 kmem_cache_free();
                                 _raw_spin_unlock();
                                 _raw_spin_unlock();
                                 __local_bh_enable_ip();
                               }
                               inet_sk_state_store();
                             }
                             hrtimer_try_to_cancel() {
                               hrtimer_active();
                             }
                             hrtimer_try_to_cancel() {
                               hrtimer_active();
                             }
                             inet_csk_clear_xmit_timers() {
                               sk_stop_timer() {
                                 timer_delete() {
                                   lock_timer_base() {
                                     _raw_spin_lock_irqsave();
                                   }
                                   detach_if_pending();
                                   _raw_spin_unlock_irqrestore();
                                 }
                               }
                               sk_stop_timer() {
                                 timer_delete() {
                                   lock_timer_base() {
                                     _raw_spin_lock_irqsave();
                                   }
                                   detach_if_pending();
                                   _raw_spin_unlock_irqrestore();
                                 }
                               }
                               sk_stop_timer() {
                                 timer_delete() {
                                   lock_timer_base() {
                                     _raw_spin_lock_irqsave();
                                   }
                                   detach_if_pending();
                                   _raw_spin_unlock_irqrestore();
                                 }
                               }
                             }
                             inet_csk_destroy_sock() {
                               tcp_v4_destroy_sock() {
                                 hrtimer_try_to_cancel() {
                                   hrtimer_active();
                                 }
                                 hrtimer_try_to_cancel() {
                                   hrtimer_active();
                                 }
                                 inet_csk_clear_xmit_timers() {
                                   sk_stop_timer() {
                                     timer_delete();
                                   }
                                   sk_stop_timer() {
                                     timer_delete();
                                   }
                                   sk_stop_timer() {
                                     timer_delete();
                                   }
                                 }
                                 tcp_cleanup_congestion_control() {
                                   module_put();
                                 }
                                 tcp_cleanup_ulp();
                                 tcp_write_queue_purge() {
                                   tcp_chrono_stop();
                                 }
                                 tcp_fastopen_active_disable_ofo_check();
                                 skb_rbtree_purge();
                                 tcp_free_fastopen_req();
                                 tcp_fastopen_destroy_cipher();
                                 kfree();
                               }
                               sk_stream_kill_queues() {
                                 skb_queue_purge() {
                                   skb_dequeue() {
                                     _raw_spin_lock_irqsave();
                                     _raw_spin_unlock_irqrestore();
                                   }
                                 }
                               }
                             }
                           }
                           __kfree_skb() {
                             skb_release_head_state();
                             skb_release_data() {
                               skb_free_head() {
                                 kfree() {
                                   __kmem_cache_free();
                                 }
                               }
                             }
                             kfree_skbmem() {
                               kmem_cache_free();
                             }
                           }
                         }
                       }
                       __cond_resched();
                       _raw_spin_lock_bh();
                     }
                     _raw_spin_unlock();
                     __local_bh_enable_ip();
                   }
                   release_sock() {
                     _raw_spin_lock_bh();
                     tcp_release_cb();
                     _raw_spin_unlock_bh() {
                       __local_bh_enable_ip();
                     }
                   }
                   sk_free() {
                     __sk_free() {
                       netlink_has_listeners() {
                         __rcu_read_lock();
                         __rcu_read_unlock();
                       }
                       sk_destruct() {
                         __sk_destruct() {
                           inet_sock_destruct() {
                             kfree();
                             dst_release();
                             dst_release();
                           }
                           bpf_sk_storage_free() {
                             __rcu_read_lock();
                             __rcu_read_unlock();
                           }
                           put_pid();
                           cgroup_sk_free() {
                             __rcu_read_lock();
                             __rcu_read_unlock();
                             __rcu_read_lock();
                             __rcu_read_unlock();
                           }
                           mem_cgroup_sk_free() {
                             __rcu_read_lock();
                             __rcu_read_unlock();
                           }
                           security_sk_free() {
                             apparmor_sk_free_security() {
                               path_put() {
                                 dput();
                                 mntput();
                               }
                             }
                             kfree() {
                               __kmem_cache_free();
                             }
                           }
                           kmem_cache_free();
                           module_put();
                         }
                       }
                     }
                   }
                 }
               }
               up_write();
               module_put();
             }
           }
           module_put();
           put_pid();
           dput() {
             __cond_resched();
             __rcu_read_lock();
             _raw_spin_lock();
             __rcu_read_unlock();
             _raw_spin_trylock();
             __dentry_kill() {
               dentry_unlink_inode() {
                 _raw_spin_unlock();
                 _raw_spin_unlock();
                 iput() {
                   _raw_spin_lock();
                   _raw_spin_unlock();
                   evict() {
                     inode_wait_for_writeback() {
                       _raw_spin_lock();
                       __inode_wait_for_writeback() {
                         bit_waitqueue();
                       }
                       _raw_spin_unlock();
                     }
                     truncate_inode_pages_final() {
                       truncate_inode_pages_range();
                     }
                     clear_inode() {
                       _raw_spin_lock_irq();
                       _raw_spin_unlock_irq();
                     }
                     _raw_spin_lock();
                     wake_up_bit();
                     _raw_spin_unlock();
                     destroy_inode() {
                       __destroy_inode() {
                         inode_has_buffers();
                         security_inode_free() {
                           integrity_inode_free();
                           hook_inode_free_security();
                           apparmor_inode_free_security();
                           call_rcu() {
                             __call_rcu_common.constprop.0() {
                               rcu_segcblist_enqueue();
                             }
                           }
                         }
                         __fsnotify_inode_delete() {
                           fsnotify_destroy_marks() {
                             fsnotify_grab_connector() {
                               __srcu_read_lock();
                               __srcu_read_unlock();
                             }
                           }
                         }
                         locks_free_lock_context();
                       }
                       call_rcu() {
                         __call_rcu_common.constprop.0() {
                           rcu_segcblist_enqueue();
                         }
                       }
                     }
                   }
                 }
               }
               _raw_spin_lock();
               _raw_spin_unlock();
               dentry_free() {
                 kmem_cache_free() {
                   obj_cgroup_uncharge() {
                     refill_obj_stock() {
                       drain_obj_stock() {
                         __rcu_read_lock();
                         __mod_memcg_lruvec_state() {
                           cgroup_rstat_updated();
                         }
                         __rcu_read_unlock();
                       }
                       __rcu_read_lock();
                       __rcu_read_unlock();
                       __rcu_read_lock();
                       __rcu_read_unlock();
                     }
                   }
                   mod_objcg_state();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
               }
               __cond_resched();
             }
           }
           mntput() {
             mntput_no_expire() {
               __rcu_read_lock();
               __rcu_read_unlock();
             }
           }
           security_file_free() {
             apparmor_file_free_security();
             kmem_cache_free();
           }
           call_rcu() {
             __call_rcu_common.constprop.0() {
               rcu_segcblist_enqueue();
             }
           }
         }
       }
       __cond_resched();
     }
     mem_cgroup_handle_over_high();
     blkcg_maybe_throttle_current();
   }
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_epoll_wait() {
   ktime_get_ts64();
   timespec64_add_safe();
   do_epoll_wait() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     ep_poll() {
       select_estimate_accuracy() {
         ktime_get_ts64();
         set_normalized_timespec64();
       }
       _raw_write_lock_irq();
       _raw_write_unlock_irq();
       schedule_hrtimeout_range() {
         schedule_hrtimeout_range_clock() {
           hrtimer_init_sleeper() {
             __hrtimer_init();
           }
           hrtimer_start_range_ns() {
             _raw_spin_lock_irqsave();
             __hrtimer_start_range_ns() {
               get_nohz_timer_target();
               enqueue_hrtimer();
             }
             _raw_spin_unlock_irqrestore();
           }
           schedule() {
             rcu_note_context_switch();
             raw_spin_rq_lock_nested() {
               _raw_spin_lock();
             }
             update_rq_clock();
             dequeue_task_fair() {
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                   cpuacct_charge();
                   __cgroup_account_cputime() {
                     cgroup_rstat_updated();
                   }
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group();
                 update_min_vruntime();
               }
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group() {
                   reweight_entity();
                 }
                 update_min_vruntime();
               }
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group() {
                   reweight_entity();
                 }
                 update_min_vruntime();
               }
               hrtick_update();
             }
             pick_next_task() {
               pick_next_task_fair() {
                 newidle_balance() {
                   __rcu_read_lock();
                   __msecs_to_jiffies();
                   __rcu_read_unlock();
                 }
               }
               put_prev_task_fair() {
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
               }
               pick_next_task_idle() {
                 __update_idle_core() {
                   __rcu_read_lock();
                   available_idle_cpu();
                   __rcu_read_unlock();
                 }
               }
             }
             psi_task_switch() {
               psi_flags_change();
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
             }
             __traceiter_sched_switch() {
               _raw_spin_lock_irqsave();
               _raw_spin_unlock_irqrestore();
             }
             finish_task_switch.isra.0() {
               raw_spin_rq_unlock() {
                 _raw_spin_unlock();
               }
             }
           }
           hrtimer_active();
         }
       }
       _raw_write_lock_irq();
       _raw_write_unlock_irq();
     }
     fput();
   } /* do_epoll_wait */
 } /* __x64_sys_epoll_wait */
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_open() {
   do_sys_openat2() {
     getname() {
       getname_flags.part.0() {
         kmem_cache_alloc() {
           __cond_resched();
           should_failslab();
         }
         __check_object_size() {
           __check_object_size.part.0() {
             check_stack_object();
             is_vmalloc_addr();
             __virt_addr_valid();
             __check_heap_object();
           }
         }
       }
     }
     get_unused_fd_flags() {
       alloc_fd() {
         _raw_spin_lock();
         expand_files();
         _raw_spin_unlock();
       }
     }
     do_filp_open() {
       path_openat() {
         alloc_empty_file() {
           __alloc_file() {
             kmem_cache_alloc() {
               __cond_resched();
               should_failslab();
               __rcu_read_lock();
               __get_obj_cgroup_from_memcg() {
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               __rcu_read_unlock();
               obj_cgroup_charge() {
                 consume_obj_stock();
                 __rcu_read_lock();
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 __rcu_read_unlock();
                 try_charge_memcg() {
                   consume_stock();
                   page_counter_try_charge() {
                     propagate_protected_usage();
                     propagate_protected_usage();
                     propagate_protected_usage();
                   }
                   refill_stock() {
                     __refill_stock() {
                       drain_stock() {
                         page_counter_uncharge() {
                           page_counter_cancel() {
                             propagate_protected_usage();
                           }
                           page_counter_cancel() {
                             propagate_protected_usage();
                           }
                           page_counter_cancel() {
                             propagate_protected_usage();
                           }
                           page_counter_cancel() {
                             propagate_protected_usage();
                           }
                           page_counter_cancel() {
                             propagate_protected_usage();
                           }
                           page_counter_cancel() {
                             propagate_protected_usage();
                           }
                         }
                         __rcu_read_lock();
                         __rcu_read_unlock();
                       }
                       __rcu_read_lock();
                       __rcu_read_unlock();
                     }
                   }
                 }
                 memcg_account_kmem() {
                   __mod_memcg_state() {
                     cgroup_rstat_updated();
                   }
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 refill_obj_stock() {
                   drain_obj_stock() {
                     __rcu_read_lock();
                     __mod_memcg_lruvec_state() {
                       cgroup_rstat_updated();
                     }
                     __rcu_read_unlock();
                   }
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   obj_cgroup_uncharge_pages() {
                     __rcu_read_lock();
                     __rcu_read_lock();
                     __rcu_read_unlock();
                     __rcu_read_unlock();
                     memcg_account_kmem() {
                       __mod_memcg_state() {
                         cgroup_rstat_updated();
                       }
                     }
                     refill_stock() {
                       __refill_stock();
                     }
                     __rcu_read_lock();
                     __rcu_read_unlock();
                   }
                 }
               }
               ___slab_alloc();
               __rcu_read_lock();
               __rcu_read_unlock();
               mod_objcg_state();
               __rcu_read_lock();
               __rcu_read_unlock();
             }
             security_file_alloc() {
               kmem_cache_alloc() {
                 __cond_resched();
                 should_failslab();
               }
               hook_file_alloc_security();
               apparmor_file_alloc_security() {
                 __cond_resched();
               }
             }
             __mutex_init();
           }
         }
         path_init() {
           __rcu_read_lock();
           nd_jump_root() {
             set_root();
           }
         }
         link_path_walk.part.0.constprop.0() {
           mnt_user_ns();
           inode_permission() {
             ovl_permission [overlay]() {
               ovl_inode_upper [overlay]();
               ovl_i_path_real [overlay]();
               generic_permission() {
                 get_cached_acl_rcu() {
                   do_ovl_get_acl [overlay]() {
                     ovl_i_path_real [overlay]();
                     get_cached_acl_rcu();
                   }
                 }
               }
               ovl_override_creds [overlay]() {
                 override_creds();
               }
               mnt_user_ns();
               inode_permission() {
                 generic_permission();
                 security_inode_permission();
               }
               revert_creds();
             }
             security_inode_permission();
           }
           walk_component() {
             lookup_fast() {
               __d_lookup_rcu();
             }
             step_into() {
               __lookup_mnt();
             }
           }
           mnt_user_ns();
           inode_permission() {
             generic_permission();
             security_inode_permission();
           }
           walk_component() {
             lookup_fast() {
               __d_lookup_rcu();
               pid_revalidate() {
                 __rcu_read_lock();
                 pid_task();
                 task_dump_owner() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 security_task_to_inode();
                 __rcu_read_unlock();
               }
             }
             step_into();
           }
           mnt_user_ns();
           inode_permission() {
             proc_pid_permission() {
               get_pid_task() {
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               generic_permission();
             }
             security_inode_permission();
           }
         }
         open_last_lookups() {
           lookup_fast() {
             __d_lookup_rcu();
             pid_revalidate() {
               __rcu_read_lock();
               pid_task();
               task_dump_owner() {
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 _raw_spin_lock();
                 _raw_spin_unlock();
               }
               security_task_to_inode();
               __rcu_read_unlock();
             }
           }
           step_into();
         }
         do_open() {
           complete_walk() {
             try_to_unlazy() {
               legitimize_links();
               __legitimize_path() {
                 __legitimize_mnt();
               }
               __rcu_read_unlock();
             }
           }
           mnt_user_ns();
           may_open() {
             inode_permission() {
               generic_permission();
               security_inode_permission();
             }
           }
           vfs_open() {
             do_dentry_open() {
               path_get() {
                 mntget();
               }
               try_module_get();
               security_file_open() {
                 hook_file_open();
                 apparmor_file_open() {
                   mnt_user_ns();
                   aa_path_perm() {
                     aa_get_buffer() {
                       _raw_spin_trylock();
                       _raw_spin_unlock();
                     }
                     aa_label_next_confined();
                     profile_path_perm.part.0() {
                       path_name() {
                         aa_path_name() {
                           d_namespace_path.constprop.0() {
                             d_absolute_path() {
                               prepend_path() {
                                 __rcu_read_lock();
                                 __rcu_read_lock();
                                 prepend() {
                                   prepend_copy() {
                                     copy_from_kernel_nofault() {
                                       copy_from_kernel_nofault_allowed();
                                     }
                                   }
                                 }
                                 prepend() {
                                   prepend_copy() {
                                     copy_from_kernel_nofault() {
                                       copy_from_kernel_nofault_allowed();
                                     }
                                   }
                                 }
                                 prepend() {
                                   prepend_copy() {
                                     copy_from_kernel_nofault() {
                                       copy_from_kernel_nofault_allowed();
                                     }
                                   }
                                 }
                                 __rcu_read_unlock();
                                 __rcu_read_unlock();
                               }
                             }
                             our_mnt();
                             our_mnt();
                           }
                         }
                       }
                       __aa_path_perm() {
                         aa_str_perms() {
                           aa_dfa_match();
                         }
                         aa_audit_file();
                       }
                     }
                     aa_label_next_confined();
                     aa_put_buffer() {
                       _raw_spin_trylock();
                       _raw_spin_unlock();
                     }
                   }
                 }
               }
               proc_single_open() {
                 single_open() {
                   kmalloc_trace() {
                     __kmem_cache_alloc_node() {
                       __cond_resched();
                       should_failslab();
                       __rcu_read_lock();
                       __get_obj_cgroup_from_memcg() {
                         __rcu_read_lock();
                         __rcu_read_unlock();
                       }
                       __rcu_read_unlock();
                       obj_cgroup_charge() {
                         consume_obj_stock();
                       }
                       __rcu_read_lock();
                       __rcu_read_unlock();
                       mod_objcg_state();
                       __rcu_read_lock();
                       __rcu_read_unlock();
                     }
                   }
                   seq_open() {
                     kmem_cache_alloc() {
                       __cond_resched();
                       should_failslab();
                       __rcu_read_lock();
                       __get_obj_cgroup_from_memcg() {
                         __rcu_read_lock();
                         __rcu_read_unlock();
                       }
                       __rcu_read_unlock();
                       obj_cgroup_charge() {
                         consume_obj_stock();
                       }
                       __rcu_read_lock();
                       __rcu_read_unlock();
                       mod_objcg_state();
                       __rcu_read_lock();
                       __rcu_read_unlock();
                     }
                     __mutex_init();
                   }
                 }
               }
               file_ra_state_init() {
                 inode_to_bdi();
               }
             }
           }
           ima_file_check() {
             security_current_getsecid_subj() {
               apparmor_current_getsecid_subj();
             }
             process_measurement() {
               mnt_user_ns();
               ima_get_action() {
                 ima_match_policy() {
                   ima_template_desc_current();
                   __rcu_read_lock();
                   ima_match_rules();
                   ima_match_rules();
                   __rcu_read_unlock();
                 }
               }
               down_write() {
                 __cond_resched();
               }
               up_write();
             }
           }
         }
         terminate_walk() {
           dput() {
             __cond_resched();
             __rcu_read_lock();
             __rcu_read_unlock();
           }
           mntput() {
             mntput_no_expire() {
               __rcu_read_lock();
               __rcu_read_unlock();
             }
           }
         }
       }
     }
     fd_install();
     putname() {
       kmem_cache_free();
     }
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_read() {
   ksys_read() {
     __fdget_pos() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
       mutex_lock() {
         __cond_resched();
       }
     }
     vfs_read() {
       rw_verify_area() {
         security_file_permission() {
           apparmor_file_permission() {
             aa_file_perm() {
               __rcu_read_lock();
               aa_label_is_subset();
               __rcu_read_unlock();
             }
           }
         }
       }
       seq_read() {
         __get_task_ioprio();
         seq_read_iter() {
           mutex_lock() {
             __cond_resched();
           }
           kvmalloc_node() {
             __kmalloc_node() {
               kmalloc_slab();
               __kmem_cache_alloc_node() {
                 __cond_resched();
                 should_failslab();
                 __rcu_read_lock();
                 __get_obj_cgroup_from_memcg() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_unlock();
                 obj_cgroup_charge() {
                   consume_obj_stock();
                   __rcu_read_lock();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   __rcu_read_unlock();
                   try_charge_memcg() {
                     consume_stock();
                   }
                   memcg_account_kmem() {
                     __mod_memcg_state() {
                       cgroup_rstat_updated();
                     }
                   }
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   refill_obj_stock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 mod_objcg_state() {
                   __rcu_read_lock();
                   __mod_memcg_lruvec_state() {
                     cgroup_rstat_updated();
                   }
                   __rcu_read_unlock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
             }
           }
           single_start();
           proc_single_show() {
             get_pid_task() {
               __rcu_read_lock();
               __rcu_read_unlock();
             }
             proc_tgid_stat() {
               do_task_stat() {
                 ptrace_may_access() {
                   _raw_spin_lock();
                   __ptrace_may_access();
                   _raw_spin_unlock();
                 }
                 get_task_mm() {
                   _raw_spin_lock();
                   _raw_spin_unlock();
                 }
                 task_vsize();
                 __lock_task_sighand() {
                   __rcu_read_lock();
                   _raw_spin_lock_irqsave();
                   __rcu_read_unlock();
                 }
                 collect_sigign_sigcatch.constprop.0.isra.0();
                 thread_group_cputime_adjusted() {
                   thread_group_cputime() {
                     task_sched_runtime() {
                       task_rq_lock() {
                         _raw_spin_lock_irqsave();
                         raw_spin_rq_lock_nested() {
                           _raw_spin_lock();
                         }
                       }
                       update_rq_clock();
                       update_curr_fair() {
                         update_curr() {
                           update_min_vruntime();
                           cpuacct_charge();
                           __cgroup_account_cputime() {
                             cgroup_rstat_updated();
                           }
                         }
                       }
                       raw_spin_rq_unlock() {
                         _raw_spin_unlock();
                       }
                       _raw_spin_unlock_irqrestore();
                     }
                     __rcu_read_lock();
                     __rcu_read_unlock();
                   }
                   cputime_adjust() {
                     _raw_spin_lock_irqsave();
                     _raw_spin_unlock_irqrestore();
                   }
                 }
                 __task_pid_nr_ns() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __task_pid_nr_ns() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __task_pid_nr_ns() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 _raw_spin_unlock_irqrestore();
                 task_prio();
                 nsec_to_clock_t();
                 pid_nr_ns();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_puts();
                 proc_task_name() {
                   __get_task_comm() {
                     _raw_spin_lock();
                     _raw_spin_unlock();
                   }
                   seq_printf();
                 }
                 seq_puts();
                 seq_putc();
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 nsec_to_clock_t();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 nsec_to_clock_t();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 nsec_to_clock_t();
                 seq_put_decimal_ll();
                 nsec_to_clock_t();
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 nsec_to_clock_t();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 nsec_to_clock_t();
                 seq_put_decimal_ll();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ll();
                 seq_putc();
                 mmput() {
                   __cond_resched();
                 }
               }
             }
           }
           single_next();
           single_stop();
           __check_object_size() {
             __check_object_size.part.0() {
               check_stack_object();
               is_vmalloc_addr();
               __virt_addr_valid();
               __check_heap_object();
             }
           }
           mutex_unlock();
         }
       }
     }
     __f_unlock_pos() {
       mutex_unlock();
     }
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_close() {
   close_fd() {
     _raw_spin_lock();
     pick_file();
     _raw_spin_unlock();
     filp_close() {
       dnotify_flush();
       locks_remove_posix();
       fput() {
         task_work_add() {
           kick_process();
         }
       }
     }
   }
 }
 exit_to_user_mode_prepare() {
   exit_to_user_mode_loop() {
     task_work_run() {
       _raw_spin_lock_irq();
       _raw_spin_unlock_irq();
       ____fput() {
         __fput() {
           __cond_resched();
           locks_remove_file();
           ima_file_free() {
             integrity_iint_find();
           }
           single_release() {
             kvfree() {
               is_vmalloc_addr();
               kfree() {
                 __kmem_cache_free() {
                   obj_cgroup_uncharge() {
                     refill_obj_stock() {
                       obj_cgroup_uncharge_pages() {
                         __rcu_read_lock();
                         __rcu_read_lock();
                         __rcu_read_unlock();
                         __rcu_read_unlock();
                         memcg_account_kmem() {
                           __mod_memcg_state() {
                             cgroup_rstat_updated();
                           }
                         }
                         refill_stock() {
                           __refill_stock();
                         }
                         __rcu_read_lock();
                         __rcu_read_unlock();
                       }
                     }
                   }
                   mod_objcg_state();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
               }
             }
             kmem_cache_free() {
               obj_cgroup_uncharge() {
                 refill_obj_stock();
               }
               mod_objcg_state() {
                 __rcu_read_lock();
                 __mod_memcg_lruvec_state() {
                   cgroup_rstat_updated();
                 }
                 __rcu_read_unlock();
               }
               __rcu_read_lock();
               __rcu_read_unlock();
             }
             kfree() {
               __kmem_cache_free() {
                 obj_cgroup_uncharge() {
                   refill_obj_stock();
                 }
                 mod_objcg_state();
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
             }
           }
           module_put();
           put_pid();
           dput() {
             __cond_resched();
             __rcu_read_lock();
             _raw_spin_lock();
             __rcu_read_unlock();
             pid_delete_dentry();
             _raw_spin_unlock();
           }
           mntput() {
             mntput_no_expire() {
               __rcu_read_lock();
               __rcu_read_unlock();
             }
           }
           security_file_free() {
             apparmor_file_free_security();
             kmem_cache_free();
           }
           call_rcu() {
             __call_rcu_common.constprop.0() {
               rcu_segcblist_enqueue();
             }
           }
         }
       }
       __cond_resched();
     }
     mem_cgroup_handle_over_high();
     blkcg_maybe_throttle_current();
   }
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_epoll_wait() {
   ktime_get_ts64();
   timespec64_add_safe();
   do_epoll_wait() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     ep_poll() {
       select_estimate_accuracy() {
         ktime_get_ts64();
         set_normalized_timespec64();
       }
       _raw_write_lock_irq();
       _raw_write_unlock_irq();
       schedule_hrtimeout_range() {
         schedule_hrtimeout_range_clock() {
           hrtimer_init_sleeper() {
             __hrtimer_init();
           }
           hrtimer_start_range_ns() {
             _raw_spin_lock_irqsave();
             __hrtimer_start_range_ns() {
               get_nohz_timer_target();
               enqueue_hrtimer();
             }
             _raw_spin_unlock_irqrestore();
           }
           schedule() {
             rcu_note_context_switch();
             raw_spin_rq_lock_nested() {
               _raw_spin_lock();
             }
             update_rq_clock();
             dequeue_task_fair() {
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                   cpuacct_charge();
                   __cgroup_account_cputime() {
                     cgroup_rstat_updated();
                   }
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group();
                 update_min_vruntime();
               }
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group() {
                   reweight_entity();
                 }
                 update_min_vruntime();
               }
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group() {
                   reweight_entity();
                 }
                 update_min_vruntime();
               }
               hrtick_update();
             }
             pick_next_task() {
               pick_next_task_fair() {
                 newidle_balance() {
                   __rcu_read_lock();
                   __msecs_to_jiffies();
                   __rcu_read_unlock();
                 }
               }
               put_prev_task_fair() {
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
               }
               pick_next_task_idle() {
                 __update_idle_core() {
                   __rcu_read_lock();
                   available_idle_cpu();
                   __rcu_read_unlock();
                 }
               }
             }
             psi_task_switch() {
               psi_flags_change();
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
             }
             __traceiter_sched_switch() {
               _raw_spin_lock_irqsave();
               _raw_spin_unlock_irqrestore();
             }
             finish_task_switch.isra.0() {
               raw_spin_rq_unlock() {
                 _raw_spin_unlock();
               }
             }
           }
           hrtimer_active();
           hrtimer_try_to_cancel.part.0() {
             _raw_spin_lock_irqsave();
             __remove_hrtimer();
             _raw_spin_unlock_irqrestore();
           }
         }
       }
       ep_send_events() {
         mutex_lock() {
           __cond_resched();
         }
         _raw_write_lock_irq();
         _raw_write_unlock_irq();
         ep_item_poll.isra.0() {
           sock_poll() {
             tcp_poll();
           }
         }
         ep_done_scan() {
           _raw_write_lock_irq();
           __pm_relax();
           _raw_write_unlock_irq();
         }
         mutex_unlock();
       }
     }
     fput();
   } /* do_epoll_wait */
 } /* __x64_sys_epoll_wait */
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_accept() {
   __sys_accept4() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     get_unused_fd_flags() {
       alloc_fd() {
         _raw_spin_lock();
         expand_files();
         _raw_spin_unlock();
       }
     }
     do_accept() {
       sock_alloc() {
         new_inode_pseudo() {
           alloc_inode() {
             sock_alloc_inode() {
               kmem_cache_alloc_lru() {
                 __cond_resched();
                 should_failslab();
                 __rcu_read_lock();
                 __get_obj_cgroup_from_memcg() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_unlock();
                 __rcu_read_lock();
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 __rcu_read_unlock();
                 memcg_list_lru_alloc() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 obj_cgroup_charge() {
                   consume_obj_stock();
                   __rcu_read_lock();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   __rcu_read_unlock();
                   try_charge_memcg() {
                     consume_stock();
                     page_counter_try_charge() {
                       propagate_protected_usage();
                       propagate_protected_usage();
                       propagate_protected_usage();
                     }
                     refill_stock() {
                       __refill_stock() {
                         drain_stock() {
                           page_counter_uncharge() {
                             page_counter_cancel() {
                               propagate_protected_usage();
                             }
                             page_counter_cancel() {
                               propagate_protected_usage();
                             }
                             page_counter_cancel() {
                               propagate_protected_usage();
                             }
                             page_counter_cancel() {
                               propagate_protected_usage();
                             }
                             page_counter_cancel() {
                               propagate_protected_usage();
                             }
                             page_counter_cancel() {
                               propagate_protected_usage();
                             }
                           }
                           __rcu_read_lock();
                           __rcu_read_unlock();
                         }
                         __rcu_read_lock();
                         __rcu_read_unlock();
                       }
                     }
                   }
                   memcg_account_kmem() {
                     __mod_memcg_state() {
                       cgroup_rstat_updated();
                     }
                   }
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   refill_obj_stock() {
                     drain_obj_stock() {
                       __rcu_read_lock();
                       __mod_memcg_lruvec_state() {
                         cgroup_rstat_updated();
                       }
                       __rcu_read_unlock();
                       __rcu_read_lock();
                       __mod_memcg_lruvec_state() {
                         cgroup_rstat_updated();
                       }
                       __rcu_read_unlock();
                     }
                     __rcu_read_lock();
                     __rcu_read_unlock();
                     __rcu_read_lock();
                     __rcu_read_unlock();
                     obj_cgroup_uncharge_pages() {
                       __rcu_read_lock();
                       __rcu_read_lock();
                       __rcu_read_unlock();
                       __rcu_read_unlock();
                       memcg_account_kmem() {
                         __mod_memcg_state() {
                           cgroup_rstat_updated();
                         }
                       }
                       refill_stock() {
                         __refill_stock();
                       }
                       __rcu_read_lock();
                       __rcu_read_unlock();
                     }
                   }
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 mod_objcg_state();
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               __init_waitqueue_head();
             }
             inode_init_always() {
               make_kuid() {
                 map_id_range_down();
               }
               make_kgid() {
                 map_id_range_down();
               }
               __init_rwsem();
               __init_rwsem();
               security_inode_alloc() {
                 kmem_cache_alloc() {
                   __cond_resched();
                   should_failslab();
                 }
                 apparmor_inode_alloc_security();
               }
             }
           }
           _raw_spin_lock();
           _raw_spin_unlock();
         }
         get_next_ino();
       }
       __module_get();
       sock_alloc_file() {
         alloc_file_pseudo() {
           d_alloc_pseudo() {
             __d_alloc() {
               kmem_cache_alloc_lru() {
                 __cond_resched();
                 should_failslab();
                 __rcu_read_lock();
                 __get_obj_cgroup_from_memcg() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_unlock();
                 __rcu_read_lock();
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 __rcu_read_unlock();
                 memcg_list_lru_alloc() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 obj_cgroup_charge() {
                   consume_obj_stock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 mod_objcg_state();
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               d_set_d_op();
             }
           }
           mntget();
           d_instantiate() {
             security_d_instantiate() {
               apparmor_d_instantiate() {
                 _raw_spin_lock();
                 _raw_spin_unlock();
               }
             }
             _raw_spin_lock();
             __d_instantiate() {
               d_flags_for_inode();
               _raw_spin_lock();
               _raw_spin_unlock();
             }
             _raw_spin_unlock();
           }
           alloc_file() {
             alloc_empty_file() {
               __alloc_file() {
                 kmem_cache_alloc() {
                   __cond_resched();
                   should_failslab();
                   __rcu_read_lock();
                   __get_obj_cgroup_from_memcg() {
                     __rcu_read_lock();
                     __rcu_read_unlock();
                   }
                   __rcu_read_unlock();
                   obj_cgroup_charge() {
                     consume_obj_stock();
                   }
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   mod_objcg_state();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 security_file_alloc() {
                   kmem_cache_alloc() {
                     __cond_resched();
                     should_failslab();
                   }
                   hook_file_alloc_security();
                   apparmor_file_alloc_security() {
                     __cond_resched();
                   }
                 }
                 __mutex_init();
               }
             }
           }
         }
         stream_open();
       }
       security_socket_accept() {
         apparmor_socket_accept() {
           aa_sk_perm() {
             __cond_resched();
             aa_label_sk_perm.part.0() {
               aa_label_next_confined();
               aa_profile_af_perm() {
                 aa_apply_modes_to_perms();
                 aa_check_perms();
               }
               aa_label_next_confined();
             }
           }
         }
       }
       inet_accept() {
         inet_csk_accept() {
           lock_sock_nested() {
             __cond_resched();
             _raw_spin_lock_bh();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           _raw_spin_lock_bh();
           _raw_spin_unlock_bh() {
             __local_bh_enable_ip();
           }
           release_sock() {
             _raw_spin_lock_bh();
             tcp_release_cb();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           lock_sock_nested() {
             __cond_resched();
             _raw_spin_lock_bh();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           mem_cgroup_sk_alloc() {
             __rcu_read_lock();
             __rcu_read_lock();
             __rcu_read_unlock();
             __rcu_read_unlock();
           }
           mem_cgroup_charge_skmem() {
             try_charge_memcg() {
               consume_stock();
             }
             __mod_memcg_state() {
               cgroup_rstat_updated();
             }
           }
           release_sock() {
             _raw_spin_lock_bh();
             tcp_release_cb();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           tcp_v4_reqsk_destructor() {
             kfree();
           }
           kfree();
           kmem_cache_free() {
             __slab_free();
           }
         }
         lock_sock_nested() {
           __cond_resched();
           _raw_spin_lock_bh();
           _raw_spin_unlock_bh() {
             __local_bh_enable_ip();
           }
         }
         _raw_write_lock_bh();
         security_sock_graft() {
           apparmor_sock_graft();
         }
         _raw_write_unlock_bh() {
           __local_bh_enable_ip();
         }
         release_sock() {
           _raw_spin_lock_bh();
           tcp_release_cb();
           _raw_spin_unlock_bh() {
             __local_bh_enable_ip();
           }
         }
       }
       inet_getname() {
         lock_sock_nested() {
           __cond_resched();
           _raw_spin_lock_bh();
           _raw_spin_unlock_bh() {
             __local_bh_enable_ip();
           }
         }
         release_sock() {
           _raw_spin_lock_bh();
           tcp_release_cb();
           _raw_spin_unlock_bh() {
             __local_bh_enable_ip();
           }
         }
       }
       move_addr_to_user() {
         __check_object_size() {
           __check_object_size.part.0() {
             check_stack_object();
           }
         }
       }
     }
     fd_install();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_fcntl() {
   __fdget_raw() {
     __fget_light() {
       __rcu_read_lock();
       __rcu_read_unlock();
     }
   }
   security_file_fcntl();
   do_fcntl();
   fput();
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_fcntl() {
   __fdget_raw() {
     __fget_light() {
       __rcu_read_lock();
       __rcu_read_unlock();
     }
   }
   security_file_fcntl();
   do_fcntl() {
     setfl() {
       _raw_spin_lock();
       _raw_spin_unlock();
     }
   }
   fput();
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_setsockopt() {
   __sys_setsockopt() {
     sockfd_lookup_light() {
       __fdget() {
         __fget_light() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
       }
     }
     security_socket_setsockopt() {
       apparmor_socket_setsockopt() {
         aa_sk_perm() {
           __cond_resched();
           aa_label_sk_perm.part.0() {
             aa_label_next_confined();
             aa_profile_af_perm() {
               aa_apply_modes_to_perms();
               aa_check_perms();
             }
             aa_label_next_confined();
           }
         }
       }
     }
     sock_common_setsockopt() {
       tcp_setsockopt() {
         do_tcp_setsockopt() {
           sockopt_lock_sock() {
             __cond_resched();
             _raw_spin_lock_bh();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           sockopt_release_sock() {
             release_sock() {
               _raw_spin_lock_bh();
               tcp_release_cb();
               _raw_spin_unlock_bh() {
                 __local_bh_enable_ip();
               }
             }
           }
         }
       }
     }
     kfree();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_setsockopt() {
   __sys_setsockopt() {
     sockfd_lookup_light() {
       __fdget() {
         __fget_light() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
       }
     }
     security_socket_setsockopt() {
       apparmor_socket_setsockopt() {
         aa_sk_perm() {
           __cond_resched();
           aa_label_sk_perm.part.0() {
             aa_label_next_confined();
             aa_profile_af_perm() {
               aa_apply_modes_to_perms();
               aa_check_perms();
             }
             aa_label_next_confined();
           }
         }
       }
     }
     sock_setsockopt() {
       sk_setsockopt() {
         __cond_resched();
         _raw_spin_lock_bh();
         _raw_spin_unlock_bh() {
           __local_bh_enable_ip();
         }
         tcp_set_keepalive() {
           inet_csk_reset_keepalive_timer() {
             sk_reset_timer() {
               mod_timer() {
                 lock_timer_base() {
                   _raw_spin_lock_irqsave();
                 }
                 detach_if_pending();
                 get_nohz_timer_target();
                 _raw_spin_unlock();
                 _raw_spin_lock();
                 calc_wheel_index();
                 enqueue_timer();
                 _raw_spin_unlock_irqrestore();
               }
             }
           }
         }
         release_sock() {
           _raw_spin_lock_bh();
           tcp_release_cb();
           _raw_spin_unlock_bh() {
             __local_bh_enable_ip();
           }
         }
       }
     }
     kfree();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_setsockopt() {
   __sys_setsockopt() {
     sockfd_lookup_light() {
       __fdget() {
         __fget_light() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
       }
     }
     security_socket_setsockopt() {
       apparmor_socket_setsockopt() {
         aa_sk_perm() {
           __cond_resched();
           aa_label_sk_perm.part.0() {
             aa_label_next_confined();
             aa_profile_af_perm() {
               aa_apply_modes_to_perms();
               aa_check_perms();
             }
             aa_label_next_confined();
           }
         }
       }
     }
     sock_common_setsockopt() {
       tcp_setsockopt() {
         do_tcp_setsockopt() {
           sockopt_lock_sock() {
             __cond_resched();
             _raw_spin_lock_bh();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           tcp_sock_set_keepidle_locked() {
             inet_csk_reset_keepalive_timer() {
               sk_reset_timer() {
                 mod_timer() {
                   lock_timer_base() {
                     _raw_spin_lock_irqsave();
                   }
                   calc_wheel_index();
                   detach_if_pending();
                   get_nohz_timer_target();
                   enqueue_timer();
                   _raw_spin_unlock_irqrestore();
                 }
               }
             }
           }
           sockopt_release_sock() {
             release_sock() {
               _raw_spin_lock_bh();
               tcp_release_cb();
               _raw_spin_unlock_bh() {
                 __local_bh_enable_ip();
               }
             }
           }
         }
       }
     }
     kfree();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_setsockopt() {
   __sys_setsockopt() {
     sockfd_lookup_light() {
       __fdget() {
         __fget_light() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
       }
     }
     security_socket_setsockopt() {
       apparmor_socket_setsockopt() {
         aa_sk_perm() {
           __cond_resched();
           aa_label_sk_perm.part.0() {
             aa_label_next_confined();
             aa_profile_af_perm() {
               aa_apply_modes_to_perms();
               aa_check_perms();
             }
             aa_label_next_confined();
           }
         }
       }
     }
     sock_common_setsockopt() {
       tcp_setsockopt() {
         do_tcp_setsockopt() {
           sockopt_lock_sock() {
             __cond_resched();
             _raw_spin_lock_bh();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           sockopt_release_sock() {
             release_sock() {
               _raw_spin_lock_bh();
               tcp_release_cb();
               _raw_spin_unlock_bh() {
                 __local_bh_enable_ip();
               }
             }
           }
         }
       }
     }
     kfree();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_setsockopt() {
   __sys_setsockopt() {
     sockfd_lookup_light() {
       __fdget() {
         __fget_light() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
       }
     }
     security_socket_setsockopt() {
       apparmor_socket_setsockopt() {
         aa_sk_perm() {
           __cond_resched();
           aa_label_sk_perm.part.0() {
             aa_label_next_confined();
             aa_profile_af_perm() {
               aa_apply_modes_to_perms();
               aa_check_perms();
             }
             aa_label_next_confined();
           }
         }
       }
     }
     sock_common_setsockopt() {
       tcp_setsockopt() {
         do_tcp_setsockopt() {
           sockopt_lock_sock() {
             __cond_resched();
             _raw_spin_lock_bh();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           sockopt_release_sock() {
             release_sock() {
               _raw_spin_lock_bh();
               tcp_release_cb();
               _raw_spin_unlock_bh() {
                 __local_bh_enable_ip();
               }
             }
           }
         }
       }
     }
     kfree();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_epoll_ctl() {
   do_epoll_ctl() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     mutex_lock() {
       __cond_resched();
     }
     ep_insert() {
       kmem_cache_alloc() {
         __cond_resched();
         should_failslab();
         __rcu_read_lock();
         __get_obj_cgroup_from_memcg() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
         __rcu_read_unlock();
         obj_cgroup_charge() {
           consume_obj_stock();
         }
         __rcu_read_lock();
         __rcu_read_unlock();
         mod_objcg_state();
         __rcu_read_lock();
         __rcu_read_unlock();
       }
       kmem_cache_alloc() {
         __cond_resched();
         should_failslab();
         __rcu_read_lock();
         __get_obj_cgroup_from_memcg() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
         __rcu_read_unlock();
         obj_cgroup_charge() {
           consume_obj_stock();
         }
         __rcu_read_lock();
         __rcu_read_unlock();
         mod_objcg_state();
         __rcu_read_lock();
         __rcu_read_unlock();
       }
       _raw_spin_lock();
       _raw_spin_unlock();
       ep_item_poll.isra.0() {
         sock_poll() {
           tcp_poll() {
             ep_ptable_queue_proc() {
               kmem_cache_alloc() {
                 __cond_resched();
                 should_failslab();
                 __rcu_read_lock();
                 __get_obj_cgroup_from_memcg() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_unlock();
                 obj_cgroup_charge() {
                   consume_obj_stock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 mod_objcg_state();
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               add_wait_queue() {
                 _raw_spin_lock_irqsave();
                 _raw_spin_unlock_irqrestore();
               }
             }
             tcp_stream_memory_free();
           }
         }
       }
       _raw_write_lock_irq();
       _raw_write_unlock_irq();
     }
     mutex_unlock();
     fput();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_accept() {
   __sys_accept4() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     get_unused_fd_flags() {
       alloc_fd() {
         _raw_spin_lock();
         expand_files();
         _raw_spin_unlock();
       }
     }
     do_accept() {
       sock_alloc() {
         new_inode_pseudo() {
           alloc_inode() {
             sock_alloc_inode() {
               kmem_cache_alloc_lru() {
                 __cond_resched();
                 should_failslab();
                 __rcu_read_lock();
                 __get_obj_cgroup_from_memcg() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_unlock();
                 __rcu_read_lock();
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 __rcu_read_unlock();
                 memcg_list_lru_alloc() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 obj_cgroup_charge() {
                   consume_obj_stock();
                   __rcu_read_lock();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   __rcu_read_unlock();
                   try_charge_memcg() {
                     consume_stock();
                   }
                   memcg_account_kmem() {
                     __mod_memcg_state() {
                       cgroup_rstat_updated();
                     }
                   }
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   refill_obj_stock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 mod_objcg_state();
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               __init_waitqueue_head();
             }
             inode_init_always() {
               make_kuid() {
                 map_id_range_down();
               }
               make_kgid() {
                 map_id_range_down();
               }
               __init_rwsem();
               __init_rwsem();
               security_inode_alloc() {
                 kmem_cache_alloc() {
                   __cond_resched();
                   should_failslab();
                 }
                 apparmor_inode_alloc_security();
               }
             }
           }
           _raw_spin_lock();
           _raw_spin_unlock();
         }
         get_next_ino();
       }
       __module_get();
       sock_alloc_file() {
         alloc_file_pseudo() {
           d_alloc_pseudo() {
             __d_alloc() {
               kmem_cache_alloc_lru() {
                 __cond_resched();
                 should_failslab();
                 __rcu_read_lock();
                 __get_obj_cgroup_from_memcg() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_unlock();
                 __rcu_read_lock();
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 __rcu_read_unlock();
                 memcg_list_lru_alloc() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 obj_cgroup_charge() {
                   consume_obj_stock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 mod_objcg_state();
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               d_set_d_op();
             }
           }
           mntget();
           d_instantiate() {
             security_d_instantiate() {
               apparmor_d_instantiate() {
                 _raw_spin_lock();
                 _raw_spin_unlock();
               }
             }
             _raw_spin_lock();
             __d_instantiate() {
               d_flags_for_inode();
               _raw_spin_lock();
               _raw_spin_unlock();
             }
             _raw_spin_unlock();
           }
           alloc_file() {
             alloc_empty_file() {
               __alloc_file() {
                 kmem_cache_alloc() {
                   __cond_resched();
                   should_failslab();
                   __rcu_read_lock();
                   __get_obj_cgroup_from_memcg() {
                     __rcu_read_lock();
                     __rcu_read_unlock();
                   }
                   __rcu_read_unlock();
                   obj_cgroup_charge() {
                     consume_obj_stock();
                   }
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   mod_objcg_state();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 security_file_alloc() {
                   kmem_cache_alloc() {
                     __cond_resched();
                     should_failslab();
                     ___slab_alloc();
                   }
                   hook_file_alloc_security();
                   apparmor_file_alloc_security() {
                     __cond_resched();
                   }
                 }
                 __mutex_init();
               }
             }
           }
         }
         stream_open();
       }
       security_socket_accept() {
         apparmor_socket_accept() {
           aa_sk_perm() {
             __cond_resched();
             aa_label_sk_perm.part.0() {
               aa_label_next_confined();
               aa_profile_af_perm() {
                 aa_apply_modes_to_perms();
                 aa_check_perms();
               }
               aa_label_next_confined();
             }
           }
         }
       }
       inet_accept() {
         inet_csk_accept() {
           lock_sock_nested() {
             __cond_resched();
             _raw_spin_lock_bh();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           release_sock() {
             _raw_spin_lock_bh();
             tcp_release_cb();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
         }
       }
       fput() {
         task_work_add() {
           kick_process();
         }
       }
     }
     put_unused_fd() {
       _raw_spin_lock();
       _raw_spin_unlock();
     }
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   exit_to_user_mode_loop() {
     task_work_run() {
       _raw_spin_lock_irq();
       _raw_spin_unlock_irq();
       ____fput() {
         __fput() {
           __cond_resched();
           locks_remove_file();
           ima_file_free();
           sock_close() {
             __sock_release() {
               down_write() {
                 __cond_resched();
               }
               inet_release();
               up_write();
               module_put();
             }
           }
           module_put();
           put_pid();
           dput() {
             __cond_resched();
             __rcu_read_lock();
             _raw_spin_lock();
             __rcu_read_unlock();
             _raw_spin_trylock();
             __dentry_kill() {
               dentry_unlink_inode() {
                 _raw_spin_unlock();
                 _raw_spin_unlock();
                 iput() {
                   _raw_spin_lock();
                   _raw_spin_unlock();
                   evict() {
                     inode_wait_for_writeback() {
                       _raw_spin_lock();
                       __inode_wait_for_writeback() {
                         bit_waitqueue();
                       }
                       _raw_spin_unlock();
                     }
                     truncate_inode_pages_final() {
                       truncate_inode_pages_range();
                     }
                     clear_inode() {
                       _raw_spin_lock_irq();
                       _raw_spin_unlock_irq();
                     }
                     _raw_spin_lock();
                     wake_up_bit();
                     _raw_spin_unlock();
                     destroy_inode() {
                       __destroy_inode() {
                         inode_has_buffers();
                         security_inode_free() {
                           integrity_inode_free();
                           hook_inode_free_security();
                           apparmor_inode_free_security();
                           call_rcu() {
                             __call_rcu_common.constprop.0() {
                               rcu_segcblist_enqueue();
                             }
                           }
                         }
                         __fsnotify_inode_delete() {
                           fsnotify_destroy_marks() {
                             fsnotify_grab_connector() {
                               __srcu_read_lock();
                               __srcu_read_unlock();
                             }
                           }
                         }
                         locks_free_lock_context();
                       }
                       call_rcu() {
                         __call_rcu_common.constprop.0() {
                           rcu_segcblist_enqueue();
                         }
                       }
                     }
                   }
                 }
               }
               _raw_spin_lock();
               _raw_spin_unlock();
               dentry_free() {
                 kmem_cache_free() {
                   obj_cgroup_uncharge() {
                     refill_obj_stock();
                   }
                   mod_objcg_state();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
               }
               __cond_resched();
             }
           }
           mntput() {
             mntput_no_expire() {
               __rcu_read_lock();
               __rcu_read_unlock();
             }
           }
           security_file_free() {
             apparmor_file_free_security();
             kmem_cache_free();
           }
           call_rcu() {
             __call_rcu_common.constprop.0() {
               rcu_segcblist_enqueue();
             }
           }
         }
       }
       __cond_resched();
     }
     mem_cgroup_handle_over_high();
     blkcg_maybe_throttle_current();
   }
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_epoll_wait() {
   ktime_get_ts64();
   timespec64_add_safe();
   do_epoll_wait() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     ep_poll() {
       select_estimate_accuracy() {
         ktime_get_ts64();
         set_normalized_timespec64();
       }
       ep_send_events() {
         mutex_lock() {
           __cond_resched();
         }
         _raw_write_lock_irq();
         _raw_write_unlock_irq();
         ep_item_poll.isra.0() {
           sock_poll() {
             tcp_poll();
           }
         }
         ep_item_poll.isra.0() {
           sock_poll() {
             tcp_poll() {
               tcp_stream_memory_free();
             }
           }
         }
         ep_done_scan() {
           _raw_write_lock_irq();
           __pm_relax();
           _raw_write_unlock_irq();
         }
         mutex_unlock();
       }
     }
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_read() {
   ksys_read() {
     __fdget_pos() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     vfs_read() {
       rw_verify_area() {
         security_file_permission() {
           apparmor_file_permission() {
             aa_file_perm() {
               __rcu_read_lock();
               __rcu_read_unlock();
               aa_sock_file_perm() {
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
               aa_sock_file_perm() {
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
               update_file_ctx() {
                 _raw_spin_lock();
                 aa_label_merge();
                 _raw_spin_unlock();
               }
             }
           }
         }
       }
       __get_task_ioprio();
       sock_read_iter() {
         sock_recvmsg() {
           security_socket_recvmsg() {
             apparmor_socket_recvmsg() {
               aa_sk_perm() {
                 __cond_resched();
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
             }
           }
           inet_recvmsg() {
             tcp_recvmsg() {
               lock_sock_nested() {
                 __cond_resched();
                 _raw_spin_lock_bh();
                 _raw_spin_unlock_bh() {
                   __local_bh_enable_ip();
                 }
               }
               tcp_recvmsg_locked() {
                 skb_copy_datagram_iter() {
                   __skb_datagram_iter() {
                     __cond_resched();
                     simple_copy_to_iter() {
                       __check_object_size() {
                         __check_object_size.part.0() {
                           check_stack_object();
                           is_vmalloc_addr();
                           __virt_addr_valid();
                         }
                       }
                     }
                   }
                 }
                 tcp_rcv_space_adjust() {
                   tcp_mstamp_refresh() {
                     ktime_get();
                   }
                 }
                 sock_rfree() {
                   __sk_mem_reduce_allocated() {
                     mem_cgroup_uncharge_skmem() {
                       __mod_memcg_state() {
                         cgroup_rstat_updated();
                       }
                       refill_stock() {
                         __refill_stock();
                       }
                     }
                   }
                 }
                 skb_attempt_defer_free() {
                   _raw_spin_lock_irqsave();
                   _raw_spin_unlock_irqrestore();
                 }
                 tcp_cleanup_rbuf() {
                   __tcp_cleanup_rbuf();
                 }
               }
               release_sock() {
                 _raw_spin_lock_bh();
                 tcp_release_cb();
                 _raw_spin_unlock_bh() {
                   __local_bh_enable_ip();
                 }
               }
             }
           }
         }
       }
     }
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 lock_mm_and_find_vma() {
   down_read_trylock();
   __cond_resched();
   find_vma() {
     __rcu_read_lock();
     __rcu_read_unlock();
   }
 }
 handle_mm_fault() {
   __rcu_read_lock();
   mem_cgroup_from_task();
   __count_memcg_events() {
     cgroup_rstat_updated();
   }
   __rcu_read_unlock();
   __handle_mm_fault() {
     handle_pte_fault() {
       do_anonymous_page() {
         vma_alloc_folio() {
           __get_vma_policy();
           policy_nodemask();
           policy_node();
           __folio_alloc() {
             __alloc_pages() {
               __cond_resched();
               should_fail_alloc_page();
               __next_zones_zonelist();
               get_page_from_freelist() {
                 _raw_spin_trylock();
                 _raw_spin_unlock();
               }
             }
           }
         }
         __mem_cgroup_charge() {
           get_mem_cgroup_from_mm() {
             __rcu_read_lock();
             __rcu_read_lock();
             __rcu_read_unlock();
             __rcu_read_unlock();
           }
           charge_memcg() {
             try_charge_memcg() {
               consume_stock();
             }
             __rcu_read_lock();
             __rcu_read_unlock();
             __count_memcg_events() {
               cgroup_rstat_updated();
             }
             memcg_check_events();
           }
           __rcu_read_lock();
           __rcu_read_unlock();
         }
         __cgroup_throttle_swaprate() {
           blk_cgroup_congested() {
             __rcu_read_lock();
             kthread_blkcg();
             __rcu_read_unlock();
           }
         }
         _raw_spin_lock();
         page_add_new_anon_rmap() {
           __mod_lruvec_page_state() {
             __rcu_read_lock();
             __mod_lruvec_state() {
               __mod_node_page_state();
               __mod_memcg_lruvec_state() {
                 cgroup_rstat_updated();
               }
             }
             __rcu_read_unlock();
           }
           __page_set_anon_rmap();
         }
         lru_cache_add_inactive_or_unevictable() {
           folio_add_lru_vma() {
             folio_add_lru();
           }
         }
         _raw_spin_unlock();
       }
     }
   }
 }
 up_read();
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_write() {
   ksys_write() {
     __fdget_pos() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     vfs_write() {
       rw_verify_area() {
         security_file_permission() {
           apparmor_file_permission() {
             aa_file_perm() {
               __rcu_read_lock();
               __rcu_read_unlock();
               aa_sock_file_perm() {
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
               aa_sock_file_perm() {
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
               update_file_ctx() {
                 _raw_spin_lock();
                 aa_label_merge();
                 _raw_spin_unlock();
               }
             }
           }
         }
       }
       __get_task_ioprio();
       sock_write_iter() {
         sock_sendmsg() {
           security_socket_sendmsg() {
             apparmor_socket_sendmsg() {
               aa_sk_perm() {
                 __cond_resched();
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
             }
           }
           inet_sendmsg() {
             inet_send_prepare();
             tcp_sendmsg() {
               lock_sock_nested() {
                 __cond_resched();
                 _raw_spin_lock_bh();
                 _raw_spin_unlock_bh() {
                   __local_bh_enable_ip();
                 }
               }
               tcp_sendmsg_locked() {
                 tcp_rate_check_app_limited();
                 tcp_send_mss() {
                   tcp_current_mss() {
                     ipv4_mtu();
                     tcp_established_options();
                   }
                 }
                 tcp_stream_memory_free();
                 tcp_stream_alloc_skb() {
                   __alloc_skb() {
                     kmem_cache_alloc_node() {
                       __cond_resched();
                       should_failslab();
                     }
                     kmalloc_reserve() {
                       kmalloc_size_roundup() {
                         kmalloc_slab();
                       }
                       __kmalloc_node_track_caller() {
                         kmalloc_slab();
                         __kmem_cache_alloc_node() {
                           __cond_resched();
                           should_failslab();
                         }
                       }
                     }
                     __build_skb_around();
                   }
                   sk_forced_mem_schedule() {
                     mem_cgroup_charge_skmem() {
                       try_charge_memcg() {
                         consume_stock();
                       }
                       __mod_memcg_state() {
                         cgroup_rstat_updated();
                       }
                     }
                   }
                 }
                 tcp_skb_entail() {
                   tcp_chrono_start();
                 }
                 sk_page_frag_refill() {
                   skb_page_frag_refill();
                 }
                 tcp_wmem_schedule();
                 __check_object_size() {
                   __check_object_size.part.0() {
                     check_stack_object();
                     is_vmalloc_addr();
                     __virt_addr_valid();
                   }
                 }
                 tcp_tx_timestamp();
                 tcp_push() {
                   __tcp_push_pending_frames() {
                     tcp_write_xmit() {
                       ktime_get();
                       tcp_mtu_probe();
                       tcp_tso_segs();
                       tcp_small_queue_check.isra.0();
                       __tcp_transmit_skb() {
                         skb_clone() {
                           __skb_clone() {
                             __copy_skb_header();
                           }
                         }
                         tcp_established_options();
                         skb_push();
                         __tcp_select_window();
                         tcp_options_write();
                         bpf_skops_write_hdr_opt.isra.0();
                         tcp_v4_send_check();
                         cubictcp_cwnd_event();
                         ip_queue_xmit() {
                           __ip_queue_xmit() {
                             __rcu_read_lock();
                             __sk_dst_check() {
                               ipv4_dst_check();
                             }
                             skb_push();
                             ip_local_out() {
                               __ip_local_out() {
                                 ip_send_check();
                                 __rcu_read_lock();
                                 __rcu_read_unlock();
                               }
                               ip_output() {
                                 __rcu_read_lock();
                                 nf_hook_slow() {
                                   apparmor_ip_postroute();
                                 }
                                 __rcu_read_unlock();
                                 ip_finish_output() {
                                   __ip_finish_output() {
                                     ip_finish_output2() {
                                       __dev_queue_xmit() {
                                         qdisc_pkt_len_init();
                                         netdev_core_pick_tx();
                                         validate_xmit_skb() {
                                           netif_skb_features() {
                                             passthru_features_check();
                                             skb_network_protocol();
                                           }
                                           skb_csum_hwoffload_help();
                                           validate_xmit_xfrm();
                                         }
                                         dev_hard_start_xmit() {
                                           veth_xmit [veth]() {
                                             __rcu_read_lock();
                                             skb_clone_tx_timestamp();
                                             __dev_forward_skb() {
                                               __dev_forward_skb2() {
                                                 skb_scrub_packet();
                                                 eth_type_trans();
                                               }
                                             }
                                             __netif_rx() {
                                               netif_rx_internal() {
                                                 enqueue_to_backlog() {
                                                   _raw_spin_lock_irqsave();
                                                   __raise_softirq_irqoff();
                                                   _raw_spin_unlock_irqrestore();
                                                 }
                                               }
                                             }
                                             __rcu_read_unlock();
                                           }
                                         }
                                         __local_bh_enable_ip();
                                       }
                                       __local_bh_enable_ip() {
                                         do_softirq.part.0() {
                                           __do_softirq() {
                                             net_rx_action() {
                                               __usecs_to_jiffies();
                                               __napi_poll() {
                                                 process_backlog() {
                                                   _raw_spin_lock_irq();
                                                   _raw_spin_unlock_irq();
                                                   __rcu_read_lock();
                                                   __netif_receive_skb() {
                                                     __netif_receive_skb_one_core() {
                                                       __netif_receive_skb_core.constprop.0() {
                                                         br_handle_frame [bridge]() {
                                                           br_nf_pre_routing [br_netfilter]() {
                                                             __rcu_read_lock();
                                                             __rcu_read_unlock();
                                                             __rcu_read_lock();
                                                             __rcu_read_unlock();
                                                             __rcu_read_lock();
                                                             __rcu_read_unlock();
                                                             skb_pull_rcsum();
                                                             br_validate_ipv4 [br_netfilter]();
                                                             skb_ext_add() {
                                                               __skb_ext_alloc() {
                                                                 kmem_cache_alloc() {
                                                                   should_failslab();
                                                                 }
                                                               }
                                                             }
                                                             setup_pre_routing [br_netfilter]() {
                                                               brnf_get_logical_dev [br_netfilter]() {
                                                                 __rcu_read_lock();
                                                                 __rcu_read_unlock();
                                                               }
                                                               tcp_wfree() {
                                                                 sk_free();
                                                               }
                                                             }
                                                             __rcu_read_lock();
                                                             nf_hook_slow() {
                                                               ip_sabotage_in [br_netfilter]();
                                                               ipv4_conntrack_defrag [nf_defrag_ipv4]();
                                                               ipv4_conntrack_in [nf_conntrack]() {
                                                                 nf_conntrack_in [nf_conntrack]() {
                                                                   get_l4proto [nf_conntrack]();
                                                                   resolve_normal_ct [nf_conntrack]() {
                                                                     nf_ct_get_tuple [nf_conntrack]();
                                                                     hash_conntrack_raw [nf_conntrack]();
                                                                     __nf_conntrack_find_get [nf_conntrack]() {
                                                                       __rcu_read_lock();
                                                                       __rcu_read_unlock();
                                                                     }
                                                                   }
                                                                   nf_conntrack_handle_packet [nf_conntrack]() {
                                                                     nf_conntrack_tcp_packet [nf_conntrack]() {
                                                                       nf_checksum() {
                                                                         nf_ip_checksum();
                                                                       }
                                                                       _raw_spin_lock_bh();
                                                                       tcp_in_window [nf_conntrack]() {
                                                                         nf_ct_seq_offset [nf_conntrack]();
                                                                       }
                                                                       _raw_spin_unlock_bh() {
                                                                         __local_bh_enable_ip();
                                                                       }
                                                                       __nf_ct_refresh_acct [nf_conntrack]() {
                                                                         nf_ct_acct_add [nf_conntrack]();
                                                                       }
                                                                     }
                                                                   }
                                                                 }
                                                               }
                                                               nf_nat_ipv4_pre_routing [nf_nat]() {
                                                                 nf_nat_inet_fn [nf_nat]();
                                                               }
                                                             }
                                                             __rcu_read_unlock();
                                                             br_nf_pre_routing_finish [br_netfilter]() {
                                                               skb_push();
                                                               br_nf_hook_thresh [br_netfilter]() {
                                                                 nf_hook_slow();
                                                                 br_handle_frame_finish [bridge]() {
                                                                   br_allowed_ingress [bridge]();
                                                                   nbp_switchdev_frame_mark [bridge]();
                                                                   br_fdb_update [bridge]() {
                                                                     fdb_find_rcu [bridge]();
                                                                   }
                                                                   br_fdb_find_rcu [bridge]() {
                                                                     fdb_find_rcu [bridge]();
                                                                   }
                                                                   br_pass_frame_up [bridge]() {
                                                                     br_allowed_egress [bridge]();
                                                                     br_handle_vlan [bridge]();
                                                                     br_multicast_count [bridge]();
                                                                     netif_receive_skb() {
                                                                       skb_defer_rx_timestamp();
                                                                       __rcu_read_lock();
                                                                       __netif_receive_skb() {
                                                                         __netif_receive_skb_one_core() {
                                                                           __netif_receive_skb_core.constprop.0();
                                                                           ip_rcv() {
                                                                             ip_rcv_core();
                                                                             __rcu_read_lock();
                                                                             nf_hook_slow() {
                                                                               ip_sabotage_in [br_netfilter]() {
                                                                                 ip_rcv_finish() {
                                                                                   ip_rcv_finish_core.constprop.0() {
                                                                                     tcp_v4_early_demux() {
                                                                                       __inet_lookup_established() {
                                                                                         inet_ehashfn();
                                                                                       }
                                                                                     }
                                                                                     ip_route_input_noref() {
                                                                                       __rcu_read_lock();
                                                                                       ip_route_input_slow() {
                                                                                         make_kuid() {
                                                                                           map_id_range_down();
                                                                                         }
                                                                                         __rcu_read_lock();
                                                                                         fib_table_lookup() {
                                                                                           fib_lookup_good_nhc();
                                                                                         }
                                                                                         __rcu_read_unlock();
                                                                                         fib_validate_source() {
                                                                                           __fib_validate_source() {
                                                                                             l3mdev_master_ifindex_rcu();
                                                                                             make_kuid() {
                                                                                               map_id_range_down();
                                                                                             }
                                                                                             __rcu_read_lock();
                                                                                             fib_table_lookup() {
                                                                                               fib_lookup_good_nhc();
                                                                                             }
                                                                                             __rcu_read_unlock();
                                                                                             fib_info_nh_uses_dev();
                                                                                           }
                                                                                         }
                                                                                       }
                                                                                       __rcu_read_unlock();
                                                                                     }
                                                                                   }
                                                                                   ip_local_deliver() {
                                                                                     __rcu_read_lock();
                                                                                     nf_hook_slow() {
                                                                                       nft_do_chain_ipv4 [nf_tables]() {
                                                                                         nft_do_chain [nf_tables]() {
                                                                                           expr_call_ops_eval [nf_tables]() {
                                                                                             nft_counter_eval [nf_tables]() {
                                                                                               __local_bh_enable_ip();
                                                                                             }
                                                                                           }
                                                                                           expr_call_ops_eval [nf_tables]() {
                                                                                             nft_immediate_eval [nf_tables]();
                                                                                           }
                                                                                           expr_call_ops_eval [nf_tables]() {
                                                                                             nft_meta_get_eval [nf_tables]();
                                                                                           }
                                                                                           expr_call_ops_eval [nf_tables]() {
                                                                                             nft_meta_get_eval [nf_tables]();
                                                                                           }
                                                                                           expr_call_ops_eval [nf_tables]() {
                                                                                             nft_meta_get_eval [nf_tables]();
                                                                                           }
                                                                                           expr_call_ops_eval [nf_tables]() {
                                                                                             nft_meta_get_eval [nf_tables]();
                                                                                           }
                                                                                         }
                                                                                       }
                                                                                       nf_nat_ipv4_local_in [nf_nat]() {
                                                                                         nf_nat_inet_fn [nf_nat]();
                                                                                       }
                                                                                       nf_confirm [nf_conntrack]();
                                                                                     }
                                                                                     __rcu_read_unlock();
                                                                                     ip_local_deliver_finish() {
                                                                                       __rcu_read_lock();
                                                                                       ip_protocol_deliver_rcu() {
                                                                                         raw_local_deliver() {
                                                                                           raw_v4_input() {
                                                                                             __rcu_read_lock();
                                                                                             __rcu_read_unlock();
                                                                                           }
                                                                                         }
                                                                                         tcp_v4_rcv() {
                                                                                           tcp_inbound_md5_hash() {
                                                                                             tcp_parse_md5sig_option();
                                                                                           }
                                                                                           tcp_filter() {
                                                                                             sk_filter_trim_cap() {
                                                                                               security_sock_rcv_skb() {
                                                                                                 apparmor_socket_sock_rcv_skb();
                                                                                               }
                                                                                               __rcu_read_lock();
                                                                                               __rcu_read_unlock();
                                                                                             }
                                                                                           }
                                                                                           tcp_v4_fill_cb();
                                                                                           _raw_spin_lock();
                                                                                           tcp_v4_do_rcv() {
                                                                                             tcp_rcv_established() {
                                                                                               tcp_mstamp_refresh() {
                                                                                                 ktime_get();
                                                                                               }
                                                                                               inet_sk_rx_dst_set();
                                                                                               tcp_ack() {
                                                                                                 ktime_get_seconds();
                                                                                               }
                                                                                               tcp_urg();
                                                                                               tcp_data_queue() {
                                                                                                 sk_forced_mem_schedule() {
                                                                                                   mem_cgroup_charge_skmem();
                                                                                                 }
                                                                                                 tcp_queue_rcv();
                                                                                                 tcp_event_data_recv();
                                                                                                 tcp_data_ready() {
                                                                                                   sock_def_readable();
                                                                                                 }
                                                                                               }
                                                                                               tcp_check_space();
                                                                                               __tcp_ack_snd_check() {
                                                                                                 tcp_send_ack() {
                                                                                                   __tcp_send_ack.part.0();
                                                                                                 }
                                                                                               }
                                                                                             }
                                                                                           }
                                                                                           _raw_spin_unlock();
                                                                                         }
                                                                                       }
                                                                                       __rcu_read_unlock();
                                                                                     }
                                                                                   }
                                                                                 }
                                                                               }
                                                                             }
                                                                             __rcu_read_unlock();
                                                                           }
                                                                         }
                                                                       }
                                                                       __rcu_read_unlock();
                                                                     }
                                                                   }
                                                                 }
                                                               }
                                                             }
                                                           }
                                                         }
                                                       }
                                                     }
                                                   }
                                                   __rcu_read_unlock();
                                                   _raw_spin_lock_irq();
                                                   _raw_spin_unlock_irq();
                                                   __rcu_read_lock();
                                                   __netif_receive_skb() {
                                                     __netif_receive_skb_one_core() {
                                                       __netif_receive_skb_core.constprop.0();
                                                       ip_rcv() {
                                                         ip_rcv_core() {
                                                           __sock_wfree();
                                                         }
                                                         __rcu_read_lock();
                                                         __rcu_read_unlock();
                                                         ip_rcv_finish_core.constprop.0() {
                                                           tcp_v4_early_demux() {
                                                             __inet_lookup_established() {
                                                               inet_ehashfn();
                                                             }
                                                             ipv4_dst_check();
                                                           }
                                                         }
                                                         ip_local_deliver() {
                                                           __rcu_read_lock();
                                                           __rcu_read_unlock();
                                                           ip_local_deliver_finish() {
                                                             __rcu_read_lock();
                                                             ip_protocol_deliver_rcu() {
                                                               raw_local_deliver() {
                                                                 raw_v4_input() {
                                                                   __rcu_read_lock();
                                                                   __rcu_read_unlock();
                                                                 }
                                                               }
                                                               tcp_v4_rcv() {
                                                                 tcp_inbound_md5_hash() {
                                                                   tcp_parse_md5sig_option();
                                                                 }
                                                                 tcp_filter() {
                                                                   sk_filter_trim_cap() {
                                                                     security_sock_rcv_skb() {
                                                                       apparmor_socket_sock_rcv_skb();
                                                                     }
                                                                     __rcu_read_lock();
                                                                     __rcu_read_unlock();
                                                                   }
                                                                 }
                                                                 tcp_v4_fill_cb();
                                                                 _raw_spin_lock();
                                                                 tcp_add_backlog() {
                                                                   skb_condense();
                                                                 }
                                                                 _raw_spin_unlock();
                                                               }
                                                             }
                                                             __rcu_read_unlock();
                                                           }
                                                         }
                                                       }
                                                     }
                                                   }
                                                   __rcu_read_unlock();
                                                   _raw_spin_lock_irq();
                                                   _raw_spin_unlock_irq();
                                                 }
                                               }
                                               _raw_spin_lock_irqsave();
                                               _raw_spin_unlock_irqrestore();
                                               napi_consume_skb() {
                                                 skb_release_head_state() {
                                                   __skb_ext_put() {
                                                     kmem_cache_free();
                                                   }
                                                 }
                                                 skb_release_data();
                                                 kfree_skbmem();
                                               }
                                             }
                                           }
                                         }
                                       }
                                     }
                                   }
                                 }
                               }
                             }
                             __rcu_read_unlock();
                           }
                         }
                         tcp_update_skb_after_send();
                         tcp_rate_skb_sent();
                       }
                       tcp_event_new_data_sent() {
                         tcp_rbtree_insert();
                         tcp_rearm_rto() {
                           sk_reset_timer() {
                             mod_timer() {
                               lock_timer_base() {
                                 _raw_spin_lock_irqsave();
                               }
                               detach_if_pending();
                               get_nohz_timer_target();
                               _raw_spin_unlock();
                               _raw_spin_lock();
                               calc_wheel_index();
                               enqueue_timer();
                               _raw_spin_unlock_irqrestore();
                             }
                           }
                         }
                         tcp_check_space();
                       }
                       tcp_chrono_stop();
                       tcp_cwnd_validate();
                       tcp_schedule_loss_probe.part.0() {
                         __usecs_to_jiffies();
                         jiffies_to_usecs();
                         __usecs_to_jiffies();
                         sk_reset_timer() {
                           mod_timer();
                         }
                       }
                     }
                   }
                 }
               }
               release_sock() {
                 _raw_spin_lock_bh();
                 __release_sock() {
                   _raw_spin_unlock_bh() {
                     __local_bh_enable_ip();
                   }
                   tcp_v4_do_rcv() {
                     ipv4_dst_check();
                     tcp_rcv_established() {
                       tcp_mstamp_refresh() {
                         ktime_get();
                       }
                       ktime_get_seconds();
                       tcp_ack() {
                         tcp_clean_rtx_queue.constprop.0() {
                           tcp_rack_advance();
                           tcp_rate_skb_delivered();
                           tcp_ack_tstamp();
                           __sk_mem_reclaim() {
                             __sk_mem_reduce_allocated() {
                               mem_cgroup_uncharge_skmem() {
                                 __mod_memcg_state() {
                                   cgroup_rstat_updated();
                                 }
                                 refill_stock() {
                                   __refill_stock() {
                                     drain_stock() {
                                       page_counter_uncharge() {
                                         page_counter_cancel() {
                                           propagate_protected_usage();
                                         }
                                         page_counter_cancel() {
                                           propagate_protected_usage();
                                         }
                                         page_counter_cancel() {
                                           propagate_protected_usage();
                                         }
                                         page_counter_cancel() {
                                           propagate_protected_usage();
                                         }
                                         page_counter_cancel() {
                                           propagate_protected_usage();
                                         }
                                         page_counter_cancel() {
                                           propagate_protected_usage();
                                         }
                                         page_counter_cancel() {
                                           propagate_protected_usage();
                                         }
                                       }
                                       __rcu_read_lock();
                                       __rcu_read_unlock();
                                     }
                                     __rcu_read_lock();
                                     __rcu_read_unlock();
                                   }
                                 }
                               }
                             }
                           }
                           __kfree_skb() {
                             skb_release_head_state();
                             skb_release_data() {
                               skb_free_head() {
                                 kfree() {
                                   __kmem_cache_free();
                                 }
                               }
                             }
                             kfree_skbmem() {
                               kmem_cache_free();
                             }
                           }
                           tcp_chrono_stop();
                           tcp_ack_update_rtt() {
                             tcp_rtt_estimator() {
                               jiffies_to_usecs();
                             }
                             __usecs_to_jiffies();
                           }
                           cubictcp_acked();
                         }
                         tcp_rack_update_reo_wnd();
                         tcp_schedule_loss_probe() {
                           tcp_schedule_loss_probe.part.0();
                         }
                         tcp_rearm_rto();
                         tcp_newly_delivered();
                         tcp_rate_gen();
                         cubictcp_cong_avoid();
                         tcp_update_pacing_rate();
                         tcp_xmit_recovery();
                       }
                       __kfree_skb() {
                         skb_release_head_state();
                         skb_release_data() {
                           skb_free_head() {
                             kfree() {
                               __kmem_cache_free();
                             }
                           }
                         }
                         kfree_skbmem() {
                           kmem_cache_free();
                         }
                       }
                       tcp_check_space();
                     }
                   }
                   __cond_resched();
                   _raw_spin_lock_bh();
                 }
                 tcp_release_cb();
                 _raw_spin_unlock_bh() {
                   __local_bh_enable_ip();
                 }
               }
             }
           }
         }
       }
     }
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_epoll_wait() {
   ktime_get_ts64();
   timespec64_add_safe();
   do_epoll_wait() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     ep_poll() {
       select_estimate_accuracy() {
         ktime_get_ts64();
         set_normalized_timespec64();
       }
       ep_send_events() {
         mutex_lock() {
           __cond_resched();
         }
         _raw_write_lock_irq();
         _raw_write_unlock_irq();
         ep_item_poll.isra.0() {
           sock_poll() {
             tcp_poll() {
               tcp_stream_memory_free();
             }
           }
         }
         ep_done_scan() {
           _raw_write_lock_irq();
           __pm_relax();
           _raw_write_unlock_irq();
         }
         mutex_unlock();
       }
       _raw_write_lock_irq();
       _raw_write_unlock_irq();
       schedule_hrtimeout_range() {
         schedule_hrtimeout_range_clock() {
           hrtimer_init_sleeper() {
             __hrtimer_init();
           }
           hrtimer_start_range_ns() {
             _raw_spin_lock_irqsave();
             __hrtimer_start_range_ns() {
               get_nohz_timer_target();
               enqueue_hrtimer();
             }
             _raw_spin_unlock_irqrestore();
           }
           schedule() {
             rcu_note_context_switch();
             raw_spin_rq_lock_nested() {
               _raw_spin_lock();
             }
             update_rq_clock();
             dequeue_task_fair() {
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                   cpuacct_charge();
                   __cgroup_account_cputime() {
                     cgroup_rstat_updated();
                   }
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group();
                 update_min_vruntime();
               }
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group() {
                   reweight_entity();
                 }
                 update_min_vruntime();
               }
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
                 __update_load_avg_se();
                 _raw_spin_lock();
                 _raw_spin_unlock();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group() {
                   reweight_entity();
                 }
                 update_min_vruntime();
               }
               hrtick_update();
             }
             pick_next_task() {
               pick_next_task_fair() {
                 check_cfs_rq_runtime();
                 pick_next_entity();
                 pick_next_entity();
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 set_next_entity() {
                   clear_buddies();
                   __update_load_avg_se();
                   __update_load_avg_cfs_rq();
                 }
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 set_next_entity() {
                   clear_buddies();
                   __update_load_avg_se();
                   __update_load_avg_cfs_rq();
                 }
               }
             }
             psi_task_switch() {
               psi_flags_change();
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_flags_change();
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
             }
             __traceiter_sched_switch() {
               _raw_spin_lock_irqsave();
               _raw_spin_unlock_irqrestore();
             }
             finish_task_switch.isra.0() {
               raw_spin_rq_unlock() {
                 _raw_spin_unlock();
               }
             }
           }
           hrtimer_active();
           hrtimer_try_to_cancel.part.0() {
             _raw_spin_lock_irqsave();
             __remove_hrtimer();
             _raw_spin_unlock_irqrestore();
           }
         }
       }
       ep_send_events() {
         mutex_lock() {
           __cond_resched();
         }
         _raw_write_lock_irq();
         _raw_write_unlock_irq();
         ep_item_poll.isra.0() {
           sock_poll() {
             tcp_poll() {
               tcp_stream_memory_free();
             }
           }
         }
         ep_done_scan() {
           _raw_write_lock_irq();
           __pm_relax();
           _raw_write_unlock_irq();
         }
         mutex_unlock();
       }
     }
     fput();
   } /* do_epoll_wait */
 } /* __x64_sys_epoll_wait */
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_read() {
   ksys_read() {
     __fdget_pos() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     vfs_read() {
       rw_verify_area() {
         security_file_permission() {
           apparmor_file_permission() {
             aa_file_perm() {
               __rcu_read_lock();
               aa_label_is_subset();
               __rcu_read_unlock();
             }
           }
         }
       }
       __get_task_ioprio();
       sock_read_iter() {
         sock_recvmsg() {
           security_socket_recvmsg() {
             apparmor_socket_recvmsg() {
               aa_sk_perm() {
                 __cond_resched();
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
             }
           }
           inet_recvmsg() {
             tcp_recvmsg() {
               lock_sock_nested() {
                 __cond_resched();
                 _raw_spin_lock_bh();
                 _raw_spin_unlock_bh() {
                   __local_bh_enable_ip();
                 }
               }
               tcp_recvmsg_locked() {
                 sock_rfree() {
                   __sk_mem_reduce_allocated() {
                     mem_cgroup_uncharge_skmem() {
                       __mod_memcg_state() {
                         cgroup_rstat_updated();
                       }
                       refill_stock() {
                         __refill_stock();
                       }
                     }
                   }
                 }
                 skb_attempt_defer_free() {
                   _raw_spin_lock_irqsave();
                   _raw_spin_unlock_irqrestore();
                 }
                 tcp_cleanup_rbuf() {
                   __tcp_cleanup_rbuf();
                 }
               }
               release_sock() {
                 _raw_spin_lock_bh();
                 tcp_release_cb();
                 _raw_spin_unlock_bh() {
                   __local_bh_enable_ip();
                 }
               }
             }
           }
         }
       }
     }
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_epoll_ctl() {
   do_epoll_ctl() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     mutex_lock() {
       __cond_resched();
     }
     ep_remove() {
       __rcu_read_lock();
       remove_wait_queue() {
         _raw_spin_lock_irqsave();
         _raw_spin_unlock_irqrestore();
       }
       __rcu_read_unlock();
       kmem_cache_free() {
         obj_cgroup_uncharge() {
           refill_obj_stock() {
             drain_obj_stock() {
               __rcu_read_lock();
               __mod_memcg_lruvec_state() {
                 cgroup_rstat_updated();
               }
               __rcu_read_unlock();
             }
             __rcu_read_lock();
             __rcu_read_unlock();
             __rcu_read_lock();
             __rcu_read_unlock();
           }
         }
         mod_objcg_state();
         __rcu_read_lock();
         __rcu_read_unlock();
       }
       _raw_spin_lock();
       _raw_spin_unlock();
       kmem_cache_free() {
         obj_cgroup_uncharge() {
           refill_obj_stock();
         }
         mod_objcg_state();
         __rcu_read_lock();
         __rcu_read_unlock();
       }
       _raw_write_lock_irq();
       _raw_write_unlock_irq();
       wakeup_source_unregister();
       call_rcu() {
         __call_rcu_common.constprop.0() {
           rcu_segcblist_enqueue();
         }
       }
     }
     mutex_unlock();
     fput();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_close() {
   close_fd() {
     _raw_spin_lock();
     pick_file();
     _raw_spin_unlock();
     filp_close() {
       dnotify_flush();
       locks_remove_posix();
       fput() {
         task_work_add() {
           kick_process();
         }
       }
     }
   }
 }
 exit_to_user_mode_prepare() {
   exit_to_user_mode_loop() {
     task_work_run() {
       _raw_spin_lock_irq();
       _raw_spin_unlock_irq();
       ____fput() {
         __fput() {
           __cond_resched();
           locks_remove_file();
           ima_file_free();
           sock_close() {
             __sock_release() {
               down_write() {
                 __cond_resched();
               }
               inet_release() {
                 ip_mc_drop_socket();
                 tcp_close() {
                   lock_sock_nested() {
                     __cond_resched();
                     _raw_spin_lock_bh();
                     _raw_spin_unlock_bh() {
                       __local_bh_enable_ip();
                     }
                   }
                   __tcp_close() {
                     tcp_set_state() {
                       inet_sk_state_store();
                     }
                     tcp_send_fin() {
                       __alloc_skb() {
                         kmem_cache_alloc_node() {
                           __cond_resched();
                           should_failslab();
                         }
                         kmalloc_reserve() {
                           kmalloc_size_roundup() {
                             kmalloc_slab();
                           }
                           __kmalloc_node_track_caller() {
                             kmalloc_slab();
                             __kmem_cache_alloc_node() {
                               __cond_resched();
                               should_failslab();
                             }
                           }
                         }
                         __build_skb_around();
                       }
                       sk_forced_mem_schedule() {
                         mem_cgroup_charge_skmem() {
                           try_charge_memcg() {
                             consume_stock();
                           }
                           __mod_memcg_state() {
                             cgroup_rstat_updated();
                           }
                         }
                       }
                       tcp_current_mss() {
                         ipv4_mtu();
                         tcp_established_options();
                       }
                       __tcp_push_pending_frames() {
                         tcp_write_xmit() {
                           ktime_get();
                           tcp_mtu_probe();
                           tcp_tso_segs();
                           tcp_small_queue_check.isra.0();
                           __tcp_transmit_skb() {
                             skb_clone() {
                               __skb_clone() {
                                 __copy_skb_header();
                               }
                             }
                             tcp_established_options();
                             skb_push();
                             __tcp_select_window();
                             tcp_options_write();
                             bpf_skops_write_hdr_opt.isra.0();
                             tcp_v4_send_check();
                             ip_queue_xmit() {
                               __ip_queue_xmit() {
                                 __rcu_read_lock();
                                 __sk_dst_check() {
                                   ipv4_dst_check();
                                 }
                                 skb_push();
                                 ip_local_out() {
                                   __ip_local_out() {
                                     ip_send_check();
                                     __rcu_read_lock();
                                     __rcu_read_unlock();
                                   }
                                   ip_output() {
                                     __rcu_read_lock();
                                     nf_hook_slow() {
                                       apparmor_ip_postroute();
                                     }
                                     __rcu_read_unlock();
                                     ip_finish_output() {
                                       __ip_finish_output() {
                                         ip_finish_output2() {
                                           __dev_queue_xmit() {
                                             qdisc_pkt_len_init();
                                             netdev_core_pick_tx();
                                             validate_xmit_skb() {
                                               netif_skb_features() {
                                                 passthru_features_check();
                                                 skb_network_protocol();
                                               }
                                               skb_csum_hwoffload_help();
                                               validate_xmit_xfrm();
                                             }
                                             dev_hard_start_xmit() {
                                               veth_xmit [veth]() {
                                                 __rcu_read_lock();
                                                 skb_clone_tx_timestamp();
                                                 __dev_forward_skb() {
                                                   __dev_forward_skb2() {
                                                     skb_scrub_packet();
                                                     eth_type_trans();
                                                   }
                                                 }
                                                 __netif_rx() {
                                                   netif_rx_internal() {
                                                     enqueue_to_backlog() {
                                                       _raw_spin_lock_irqsave();
                                                       __raise_softirq_irqoff();
                                                       _raw_spin_unlock_irqrestore();
                                                     }
                                                   }
                                                 }
                                                 __rcu_read_unlock();
                                               }
                                             }
                                             __local_bh_enable_ip();
                                           }
                                           __local_bh_enable_ip() {
                                             do_softirq.part.0() {
                                               __do_softirq() {
                                                 net_rx_action() {
                                                   __usecs_to_jiffies();
                                                   __napi_poll() {
                                                     process_backlog() {
                                                       _raw_spin_lock_irq();
                                                       _raw_spin_unlock_irq();
                                                       __rcu_read_lock();
                                                       __netif_receive_skb() {
                                                         __netif_receive_skb_one_core() {
                                                           __netif_receive_skb_core.constprop.0() {
                                                             br_handle_frame [bridge]() {
                                                               br_nf_pre_routing [br_netfilter]() {
                                                                 __rcu_read_lock();
                                                                 __rcu_read_unlock();
                                                                 __rcu_read_lock();
                                                                 __rcu_read_unlock();
                                                                 __rcu_read_lock();
                                                                 __rcu_read_unlock();
                                                                 skb_pull_rcsum();
                                                                 br_validate_ipv4 [br_netfilter]();
                                                                 skb_ext_add() {
                                                                   __skb_ext_alloc() {
                                                                     kmem_cache_alloc() {
                                                                       should_failslab();
                                                                     }
                                                                   }
                                                                 }
                                                                 setup_pre_routing [br_netfilter]() {
                                                                   brnf_get_logical_dev [br_netfilter]() {
                                                                     __rcu_read_lock();
                                                                     __rcu_read_unlock();
                                                                   }
                                                                   tcp_wfree() {
                                                                     sk_free();
                                                                   }
                                                                 }
                                                                 __rcu_read_lock();
                                                                 nf_hook_slow() {
                                                                   ip_sabotage_in [br_netfilter]();
                                                                   ipv4_conntrack_defrag [nf_defrag_ipv4]();
                                                                   ipv4_conntrack_in [nf_conntrack]() {
                                                                     nf_conntrack_in [nf_conntrack]() {
                                                                       get_l4proto [nf_conntrack]();
                                                                       resolve_normal_ct [nf_conntrack]() {
                                                                         nf_ct_get_tuple [nf_conntrack]();
                                                                         hash_conntrack_raw [nf_conntrack]();
                                                                         __nf_conntrack_find_get [nf_conntrack]() {
                                                                           __rcu_read_lock();
                                                                           __rcu_read_unlock();
                                                                         }
                                                                       }
                                                                       nf_conntrack_handle_packet [nf_conntrack]() {
                                                                         nf_conntrack_tcp_packet [nf_conntrack]() {
                                                                           nf_checksum() {
                                                                             nf_ip_checksum();
                                                                           }
                                                                           _raw_spin_lock_bh();
                                                                           tcp_in_window [nf_conntrack]() {
                                                                             nf_ct_seq_offset [nf_conntrack]();
                                                                           }
                                                                           _raw_spin_unlock_bh() {
                                                                             __local_bh_enable_ip();
                                                                           }
                                                                           __nf_ct_refresh_acct [nf_conntrack]() {
                                                                             nf_ct_acct_add [nf_conntrack]();
                                                                           }
                                                                         }
                                                                       }
                                                                     }
                                                                   }
                                                                   nf_nat_ipv4_pre_routing [nf_nat]() {
                                                                     nf_nat_inet_fn [nf_nat]();
                                                                   }
                                                                 }
                                                                 __rcu_read_unlock();
                                                                 br_nf_pre_routing_finish [br_netfilter]() {
                                                                   skb_push();
                                                                   br_nf_hook_thresh [br_netfilter]() {
                                                                     nf_hook_slow();
                                                                     br_handle_frame_finish [bridge]() {
                                                                       br_allowed_ingress [bridge]();
                                                                       nbp_switchdev_frame_mark [bridge]();
                                                                       br_fdb_update [bridge]() {
                                                                         fdb_find_rcu [bridge]();
                                                                       }
                                                                       br_fdb_find_rcu [bridge]() {
                                                                         fdb_find_rcu [bridge]();
                                                                       }
                                                                       br_pass_frame_up [bridge]() {
                                                                         br_allowed_egress [bridge]();
                                                                         br_handle_vlan [bridge]();
                                                                         br_multicast_count [bridge]();
                                                                         netif_receive_skb() {
                                                                           skb_defer_rx_timestamp();
                                                                           __rcu_read_lock();
                                                                           __netif_receive_skb() {
                                                                             __netif_receive_skb_one_core() {
                                                                               __netif_receive_skb_core.constprop.0();
                                                                               ip_rcv() {
                                                                                 ip_rcv_core();
                                                                                 __rcu_read_lock();
                                                                                 nf_hook_slow() {
                                                                                   ip_sabotage_in [br_netfilter]() {
                                                                                     ip_rcv_finish() {
                                                                                       ip_rcv_finish_core.constprop.0() {
                                                                                         tcp_v4_early_demux() {
                                                                                           __inet_lookup_established() {
                                                                                             inet_ehashfn();
                                                                                           }
                                                                                           ipv4_dst_check();
                                                                                         }
                                                                                       }
                                                                                       ip_local_deliver() {
                                                                                         __rcu_read_lock();
                                                                                         nf_hook_slow() {
                                                                                           nft_do_chain_ipv4 [nf_tables]() {
                                                                                             nft_do_chain [nf_tables]() {
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_counter_eval [nf_tables]() {
                                                                                                   __local_bh_enable_ip();
                                                                                                 }
                                                                                               }
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_immediate_eval [nf_tables]();
                                                                                               }
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_meta_get_eval [nf_tables]();
                                                                                               }
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_meta_get_eval [nf_tables]();
                                                                                               }
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_meta_get_eval [nf_tables]();
                                                                                               }
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_meta_get_eval [nf_tables]();
                                                                                               }
                                                                                             }
                                                                                           }
                                                                                           nf_nat_ipv4_local_in [nf_nat]() {
                                                                                             nf_nat_inet_fn [nf_nat]();
                                                                                           }
                                                                                           nf_confirm [nf_conntrack]();
                                                                                         }
                                                                                         __rcu_read_unlock();
                                                                                         ip_local_deliver_finish() {
                                                                                           __rcu_read_lock();
                                                                                           ip_protocol_deliver_rcu() {
                                                                                             raw_local_deliver() {
                                                                                               raw_v4_input() {
                                                                                                 __rcu_read_lock();
                                                                                                 __rcu_read_unlock();
                                                                                               }
                                                                                             }
                                                                                             tcp_v4_rcv() {
                                                                                               tcp_inbound_md5_hash() {
                                                                                                 tcp_parse_md5sig_option();
                                                                                               }
                                                                                               tcp_filter() {
                                                                                                 sk_filter_trim_cap() {
                                                                                                   security_sock_rcv_skb();
                                                                                                   __rcu_read_lock();
                                                                                                   __rcu_read_unlock();
                                                                                                 }
                                                                                               }
                                                                                               tcp_v4_fill_cb();
                                                                                               _raw_spin_lock();
                                                                                               tcp_v4_do_rcv() {
                                                                                                 tcp_rcv_state_process() {
                                                                                                   tcp_mstamp_refresh();
                                                                                                   tcp_validate_incoming();
                                                                                                   tcp_ack();
                                                                                                   tcp_set_state();
                                                                                                   inet_csk_reset_keepalive_timer();
                                                                                                   tcp_urg();
                                                                                                   tcp_data_queue();
                                                                                                 }
                                                                                               }
                                                                                               _raw_spin_unlock();
                                                                                               sk_free();
                                                                                             }
                                                                                           }
                                                                                           __rcu_read_unlock();
                                                                                         }
                                                                                       }
                                                                                     }
                                                                                   }
                                                                                 }
                                                                                 __rcu_read_unlock();
                                                                               }
                                                                             }
                                                                           }
                                                                           __rcu_read_unlock();
                                                                         }
                                                                       }
                                                                     }
                                                                   }
                                                                 }
                                                               }
                                                             }
                                                           }
                                                         }
                                                       }
                                                       __rcu_read_unlock();
                                                       _raw_spin_lock_irq();
                                                       _raw_spin_unlock_irq();
                                                       __rcu_read_lock();
                                                       __netif_receive_skb() {
                                                         __netif_receive_skb_one_core() {
                                                           __netif_receive_skb_core.constprop.0();
                                                           ip_rcv() {
                                                             ip_rcv_core() {
                                                               __sock_wfree() {
                                                                 __sk_free() {
                                                                   netlink_has_listeners() {
                                                                     __rcu_read_lock();
                                                                     __rcu_read_unlock();
                                                                   }
                                                                   sk_destruct() {
                                                                     __sk_destruct() {
                                                                       inet_sock_destruct() {
                                                                         kfree();
                                                                         dst_release();
                                                                         dst_release();
                                                                       }
                                                                       bpf_sk_storage_free() {
                                                                         __rcu_read_lock();
                                                                         __rcu_read_unlock();
                                                                       }
                                                                       put_pid();
                                                                       cgroup_sk_free() {
                                                                         __rcu_read_lock();
                                                                         __rcu_read_unlock();
                                                                         __rcu_read_lock();
                                                                         __rcu_read_unlock();
                                                                       }
                                                                       mem_cgroup_sk_free() {
                                                                         __rcu_read_lock();
                                                                         __rcu_read_unlock();
                                                                       }
                                                                       security_sk_free() {
                                                                         apparmor_sk_free_security() {
                                                                           path_put() {
                                                                             dput();
                                                                             mntput();
                                                                           }
                                                                         }
                                                                         kfree() {
                                                                           __kmem_cache_free() {
                                                                             __slab_free();
                                                                           }
                                                                         }
                                                                       }
                                                                       kmem_cache_free() {
                                                                         obj_cgroup_uncharge() {
                                                                           refill_obj_stock() {
                                                                             drain_obj_stock() {
                                                                               __rcu_read_lock();
                                                                               __mod_memcg_lruvec_state() {
                                                                                 cgroup_rstat_updated();
                                                                               }
                                                                               __rcu_read_unlock();
                                                                             }
                                                                             __rcu_read_lock();
                                                                             __rcu_read_unlock();
                                                                             __rcu_read_lock();
                                                                             __rcu_read_unlock();
                                                                           }
                                                                         }
                                                                         mod_objcg_state();
                                                                         __rcu_read_lock();
                                                                         __rcu_read_unlock();
                                                                         __slab_free();
                                                                       }
                                                                       module_put();
                                                                     }
                                                                   }
                                                                 }
                                                               }
                                                             }
                                                             __rcu_read_lock();
                                                             __rcu_read_unlock();
                                                             ip_rcv_finish_core.constprop.0() {
                                                               tcp_v4_early_demux() {
                                                                 __inet_lookup_established() {
                                                                   inet_ehashfn();
                                                                 }
                                                                 ipv4_dst_check();
                                                               }
                                                             }
                                                             ip_local_deliver() {
                                                               __rcu_read_lock();
                                                               __rcu_read_unlock();
                                                               ip_local_deliver_finish() {
                                                                 __rcu_read_lock();
                                                                 ip_protocol_deliver_rcu() {
                                                                   raw_local_deliver() {
                                                                     raw_v4_input() {
                                                                       __rcu_read_lock();
                                                                       __rcu_read_unlock();
                                                                     }
                                                                   }
                                                                   tcp_v4_rcv() {
                                                                     tcp_inbound_md5_hash() {
                                                                       tcp_parse_md5sig_option();
                                                                     }
                                                                     tcp_filter() {
                                                                       sk_filter_trim_cap() {
                                                                         security_sock_rcv_skb() {
                                                                           apparmor_socket_sock_rcv_skb();
                                                                         }
                                                                         __rcu_read_lock();
                                                                         __rcu_read_unlock();
                                                                       }
                                                                     }
                                                                     tcp_v4_fill_cb();
                                                                     _raw_spin_lock();
                                                                     tcp_add_backlog() {
                                                                       skb_condense();
                                                                     }
                                                                     _raw_spin_unlock();
                                                                   }
                                                                 }
                                                                 __rcu_read_unlock();
                                                               }
                                                             }
                                                           }
                                                         }
                                                       }
                                                       __rcu_read_unlock();
                                                       _raw_spin_lock_irq();
                                                       _raw_spin_unlock_irq();
                                                     }
                                                   }
                                                 }
                                               }
                                             }
                                           }
                                         }
                                       }
                                     }
                                   }
                                 }
                                 __rcu_read_unlock();
                               }
                             }
                             tcp_update_skb_after_send();
                             tcp_rate_skb_sent();
                           }
                           tcp_event_new_data_sent() {
                             tcp_rbtree_insert();
                             tcp_rearm_rto() {
                               sk_reset_timer() {
                                 mod_timer() {
                                   lock_timer_base() {
                                     _raw_spin_lock_irqsave();
                                   }
                                   calc_wheel_index();
                                   detach_if_pending();
                                   get_nohz_timer_target();
                                   enqueue_timer();
                                   _raw_spin_unlock_irqrestore();
                                 }
                               }
                             }
                             tcp_check_space();
                           }
                           tcp_chrono_stop();
                           tcp_cwnd_validate();
                           tcp_schedule_loss_probe.part.0() {
                             __usecs_to_jiffies();
                             jiffies_to_usecs();
                             __usecs_to_jiffies();
                             sk_reset_timer() {
                               mod_timer();
                             }
                           }
                         }
                       }
                     }
                     sk_stream_wait_close();
                     _raw_write_lock_bh();
                     _raw_write_unlock_bh() {
                       __local_bh_enable_ip();
                     }
                     _raw_spin_lock();
                     __release_sock() {
                       _raw_spin_unlock_bh() {
                         __local_bh_enable_ip();
                       }
                       tcp_v4_do_rcv() {
                         tcp_rcv_state_process() {
                           tcp_mstamp_refresh() {
                             ktime_get();
                           }
                           tcp_validate_incoming();
                           tcp_ack() {
                             ktime_get_seconds();
                             tcp_clean_rtx_queue.constprop.0() {
                               tcp_rack_advance();
                               tcp_rate_skb_delivered();
                               tcp_ack_tstamp();
                               __sk_mem_reclaim() {
                                 __sk_mem_reduce_allocated() {
                                   mem_cgroup_uncharge_skmem() {
                                     __mod_memcg_state() {
                                       cgroup_rstat_updated();
                                     }
                                     refill_stock() {
                                       __refill_stock() {
                                         drain_stock() {
                                           page_counter_uncharge() {
                                             page_counter_cancel() {
                                               propagate_protected_usage();
                                             }
                                             page_counter_cancel() {
                                               propagate_protected_usage();
                                             }
                                             page_counter_cancel() {
                                               propagate_protected_usage();
                                             }
                                             page_counter_cancel() {
                                               propagate_protected_usage();
                                             }
                                             page_counter_cancel() {
                                               propagate_protected_usage();
                                             }
                                             page_counter_cancel() {
                                               propagate_protected_usage();
                                             }
                                             page_counter_cancel() {
                                               propagate_protected_usage();
                                             }
                                           }
                                           __rcu_read_lock();
                                           __rcu_read_unlock();
                                         }
                                         __rcu_read_lock();
                                         __rcu_read_unlock();
                                       }
                                     }
                                   }
                                 }
                               }
                               __kfree_skb() {
                                 skb_release_head_state();
                                 skb_release_data() {
                                   skb_free_head() {
                                     kfree() {
                                       __kmem_cache_free();
                                     }
                                   }
                                 }
                                 kfree_skbmem() {
                                   kmem_cache_free();
                                 }
                               }
                               tcp_chrono_stop();
                               tcp_ack_update_rtt() {
                                 tcp_rtt_estimator() {
                                   jiffies_to_usecs();
                                 }
                                 __usecs_to_jiffies();
                               }
                               cubictcp_acked();
                             }
                             tcp_rack_update_reo_wnd();
                             tcp_schedule_loss_probe() {
                               tcp_schedule_loss_probe.part.0();
                             }
                             tcp_rearm_rto();
                             tcp_newly_delivered();
                             tcp_rate_gen();
                             cubictcp_cong_avoid();
                             tcp_update_pacing_rate();
                             tcp_xmit_recovery();
                           }
                           tcp_update_metrics() {
                             __rcu_read_lock();
                             tcp_get_metrics() {
                               __tcp_get_metrics();
                             }
                             __rcu_read_unlock();
                           }
                           tcp_done() {
                             tcp_set_state() {
                               inet_unhash() {
                                 _raw_spin_lock_bh();
                                 _raw_spin_unlock_bh() {
                                   __local_bh_enable_ip();
                                 }
                               }
                               inet_put_port() {
                                 _raw_spin_lock();
                                 _raw_spin_lock();
                                 kmem_cache_free() {
                                   __slab_free();
                                 }
                                 _raw_spin_unlock();
                                 _raw_spin_unlock();
                                 __local_bh_enable_ip();
                               }
                               inet_sk_state_store();
                             }
                             hrtimer_try_to_cancel() {
                               hrtimer_active();
                             }
                             hrtimer_try_to_cancel() {
                               hrtimer_active();
                             }
                             inet_csk_clear_xmit_timers() {
                               sk_stop_timer() {
                                 timer_delete() {
                                   lock_timer_base() {
                                     _raw_spin_lock_irqsave();
                                   }
                                   detach_if_pending();
                                   _raw_spin_unlock_irqrestore();
                                 }
                               }
                               sk_stop_timer() {
                                 timer_delete() {
                                   lock_timer_base() {
                                     _raw_spin_lock_irqsave();
                                   }
                                   detach_if_pending();
                                   _raw_spin_unlock_irqrestore();
                                 }
                               }
                               sk_stop_timer() {
                                 timer_delete() {
                                   lock_timer_base() {
                                     _raw_spin_lock_irqsave();
                                   }
                                   detach_if_pending();
                                   _raw_spin_unlock_irqrestore();
                                 }
                               }
                             }
                             inet_csk_destroy_sock() {
                               tcp_v4_destroy_sock() {
                                 hrtimer_try_to_cancel() {
                                   hrtimer_active();
                                 }
                                 hrtimer_try_to_cancel() {
                                   hrtimer_active();
                                 }
                                 inet_csk_clear_xmit_timers() {
                                   sk_stop_timer() {
                                     timer_delete();
                                   }
                                   sk_stop_timer() {
                                     timer_delete();
                                   }
                                   sk_stop_timer() {
                                     timer_delete();
                                   }
                                 }
                                 tcp_cleanup_congestion_control() {
                                   module_put();
                                 }
                                 tcp_cleanup_ulp();
                                 tcp_write_queue_purge() {
                                   tcp_chrono_stop();
                                 }
                                 tcp_fastopen_active_disable_ofo_check();
                                 skb_rbtree_purge();
                                 tcp_free_fastopen_req();
                                 tcp_fastopen_destroy_cipher();
                                 kfree();
                               }
                               sk_stream_kill_queues() {
                                 skb_queue_purge() {
                                   skb_dequeue() {
                                     _raw_spin_lock_irqsave();
                                     _raw_spin_unlock_irqrestore();
                                   }
                                 }
                               }
                             }
                           }
                           __kfree_skb() {
                             skb_release_head_state();
                             skb_release_data() {
                               skb_free_head() {
                                 kfree() {
                                   __kmem_cache_free();
                                 }
                               }
                             }
                             kfree_skbmem() {
                               kmem_cache_free();
                             }
                           }
                         }
                       }
                       __cond_resched();
                       _raw_spin_lock_bh();
                     }
                     _raw_spin_unlock();
                     __local_bh_enable_ip();
                   }
                   release_sock() {
                     _raw_spin_lock_bh();
                     tcp_release_cb();
                     _raw_spin_unlock_bh() {
                       __local_bh_enable_ip();
                     }
                   }
                   sk_free() {
                     __sk_free() {
                       netlink_has_listeners() {
                         __rcu_read_lock();
                         __rcu_read_unlock();
                       }
                       sk_destruct() {
                         __sk_destruct() {
                           inet_sock_destruct() {
                             kfree();
                             dst_release();
                             dst_release();
                           }
                           bpf_sk_storage_free() {
                             __rcu_read_lock();
                             __rcu_read_unlock();
                           }
                           put_pid();
                           cgroup_sk_free() {
                             __rcu_read_lock();
                             __rcu_read_unlock();
                             __rcu_read_lock();
                             __rcu_read_unlock();
                           }
                           mem_cgroup_sk_free() {
                             __rcu_read_lock();
                             __rcu_read_unlock();
                           }
                           security_sk_free() {
                             apparmor_sk_free_security() {
                               path_put() {
                                 dput();
                                 mntput();
                               }
                             }
                             kfree() {
                               __kmem_cache_free() {
                                 __slab_free();
                               }
                             }
                           }
                           kmem_cache_free() {
                             __slab_free();
                           }
                           module_put();
                         }
                       }
                     }
                   }
                 }
               }
               up_write();
               module_put();
             }
           }
           module_put();
           put_pid();
           dput() {
             __cond_resched();
             __rcu_read_lock();
             _raw_spin_lock();
             __rcu_read_unlock();
             _raw_spin_trylock();
             __dentry_kill() {
               dentry_unlink_inode() {
                 _raw_spin_unlock();
                 _raw_spin_unlock();
                 iput() {
                   _raw_spin_lock();
                   _raw_spin_unlock();
                   evict() {
                     inode_wait_for_writeback() {
                       _raw_spin_lock();
                       __inode_wait_for_writeback() {
                         bit_waitqueue();
                       }
                       _raw_spin_unlock();
                     }
                     truncate_inode_pages_final() {
                       truncate_inode_pages_range();
                     }
                     clear_inode() {
                       _raw_spin_lock_irq();
                       _raw_spin_unlock_irq();
                     }
                     _raw_spin_lock();
                     wake_up_bit();
                     _raw_spin_unlock();
                     destroy_inode() {
                       __destroy_inode() {
                         inode_has_buffers();
                         security_inode_free() {
                           integrity_inode_free();
                           hook_inode_free_security();
                           apparmor_inode_free_security();
                           call_rcu() {
                             __call_rcu_common.constprop.0() {
                               rcu_segcblist_enqueue();
                             }
                           }
                         }
                         __fsnotify_inode_delete() {
                           fsnotify_destroy_marks() {
                             fsnotify_grab_connector() {
                               __srcu_read_lock();
                               __srcu_read_unlock();
                             }
                           }
                         }
                         locks_free_lock_context();
                       }
                       call_rcu() {
                         __call_rcu_common.constprop.0() {
                           rcu_segcblist_enqueue();
                         }
                       }
                     }
                   }
                 }
               }
               _raw_spin_lock();
               _raw_spin_unlock();
               dentry_free() {
                 kmem_cache_free() {
                   obj_cgroup_uncharge() {
                     refill_obj_stock() {
                       drain_obj_stock() {
                         __rcu_read_lock();
                         __mod_memcg_lruvec_state() {
                           cgroup_rstat_updated();
                         }
                         __rcu_read_unlock();
                       }
                       __rcu_read_lock();
                       __rcu_read_unlock();
                       __rcu_read_lock();
                       __rcu_read_unlock();
                     }
                   }
                   mod_objcg_state();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
               }
               __cond_resched();
             }
           }
           mntput() {
             mntput_no_expire() {
               __rcu_read_lock();
               __rcu_read_unlock();
             }
           }
           security_file_free() {
             apparmor_file_free_security();
             kmem_cache_free();
           }
           call_rcu() {
             __call_rcu_common.constprop.0() {
               rcu_segcblist_enqueue();
             }
           }
         }
       }
       __cond_resched();
     }
     mem_cgroup_handle_over_high();
     blkcg_maybe_throttle_current();
   }
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_epoll_wait() {
   ktime_get_ts64();
   timespec64_add_safe();
   do_epoll_wait() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     ep_poll() {
       select_estimate_accuracy() {
         ktime_get_ts64();
         set_normalized_timespec64();
       }
       _raw_write_lock_irq();
       _raw_write_unlock_irq();
       schedule_hrtimeout_range() {
         schedule_hrtimeout_range_clock() {
           hrtimer_init_sleeper() {
             __hrtimer_init();
           }
           hrtimer_start_range_ns() {
             _raw_spin_lock_irqsave();
             __hrtimer_start_range_ns() {
               get_nohz_timer_target();
               enqueue_hrtimer();
             }
             _raw_spin_unlock_irqrestore();
           }
           schedule() {
             rcu_note_context_switch();
             raw_spin_rq_lock_nested() {
               _raw_spin_lock();
             }
             update_rq_clock();
             dequeue_task_fair() {
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                   cpuacct_charge();
                   __cgroup_account_cputime() {
                     cgroup_rstat_updated();
                   }
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group();
                 update_min_vruntime();
               }
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group() {
                   reweight_entity();
                 }
                 update_min_vruntime();
               }
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group() {
                   reweight_entity();
                 }
                 update_min_vruntime();
               }
               hrtick_update();
             }
             pick_next_task() {
               pick_next_task_fair() {
                 check_cfs_rq_runtime();
                 pick_next_entity();
                 pick_next_entity();
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 set_next_entity() {
                   clear_buddies();
                   __update_load_avg_se();
                   __update_load_avg_cfs_rq();
                 }
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 set_next_entity() {
                   clear_buddies();
                   __update_load_avg_se();
                   __update_load_avg_cfs_rq();
                 }
               }
             }
             psi_task_switch() {
               psi_flags_change();
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_flags_change();
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
             }
             __traceiter_sched_switch() {
               _raw_spin_lock_irqsave();
               _raw_spin_unlock_irqrestore();
             }
             finish_task_switch.isra.0() {
               raw_spin_rq_unlock() {
                 _raw_spin_unlock();
               }
             }
           }
           hrtimer_active();
         }
       }
       _raw_write_lock_irq();
       _raw_write_unlock_irq();
     }
     fput();
   } /* do_epoll_wait */
 } /* __x64_sys_epoll_wait */
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_open() {
   do_sys_openat2() {
     getname() {
       getname_flags.part.0() {
         kmem_cache_alloc() {
           __cond_resched();
           should_failslab();
         }
         __check_object_size() {
           __check_object_size.part.0() {
             check_stack_object();
             is_vmalloc_addr();
             __virt_addr_valid();
             __check_heap_object();
           }
         }
       }
     }
     get_unused_fd_flags() {
       alloc_fd() {
         _raw_spin_lock();
         expand_files();
         _raw_spin_unlock();
       }
     }
     do_filp_open() {
       path_openat() {
         alloc_empty_file() {
           __alloc_file() {
             kmem_cache_alloc() {
               __cond_resched();
               should_failslab();
               __rcu_read_lock();
               __get_obj_cgroup_from_memcg() {
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               __rcu_read_unlock();
               obj_cgroup_charge() {
                 consume_obj_stock();
                 __rcu_read_lock();
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 __rcu_read_unlock();
                 try_charge_memcg() {
                   consume_stock();
                   page_counter_try_charge() {
                     propagate_protected_usage();
                     propagate_protected_usage();
                     propagate_protected_usage();
                   }
                   refill_stock() {
                     __refill_stock() {
                       drain_stock() {
                         page_counter_uncharge() {
                           page_counter_cancel() {
                             propagate_protected_usage();
                           }
                           page_counter_cancel() {
                             propagate_protected_usage();
                           }
                           page_counter_cancel() {
                             propagate_protected_usage();
                           }
                           page_counter_cancel() {
                             propagate_protected_usage();
                           }
                           page_counter_cancel() {
                             propagate_protected_usage();
                           }
                           page_counter_cancel() {
                             propagate_protected_usage();
                           }
                         }
                         __rcu_read_lock();
                         __rcu_read_unlock();
                       }
                       __rcu_read_lock();
                       __rcu_read_unlock();
                     }
                   }
                 }
                 memcg_account_kmem() {
                   __mod_memcg_state() {
                     cgroup_rstat_updated();
                   }
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 refill_obj_stock() {
                   drain_obj_stock() {
                     __rcu_read_lock();
                     __mod_memcg_lruvec_state() {
                       cgroup_rstat_updated();
                     }
                     __rcu_read_unlock();
                   }
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   obj_cgroup_uncharge_pages() {
                     __rcu_read_lock();
                     __rcu_read_lock();
                     __rcu_read_unlock();
                     __rcu_read_unlock();
                     memcg_account_kmem() {
                       __mod_memcg_state() {
                         cgroup_rstat_updated();
                       }
                     }
                     refill_stock() {
                       __refill_stock();
                     }
                     __rcu_read_lock();
                     __rcu_read_unlock();
                   }
                 }
               }
               __rcu_read_lock();
               __rcu_read_unlock();
               mod_objcg_state();
               __rcu_read_lock();
               __rcu_read_unlock();
             }
             security_file_alloc() {
               kmem_cache_alloc() {
                 __cond_resched();
                 should_failslab();
               }
               hook_file_alloc_security();
               apparmor_file_alloc_security() {
                 __cond_resched();
               }
             }
             __mutex_init();
           }
         }
         path_init() {
           __rcu_read_lock();
           nd_jump_root() {
             set_root();
           }
         }
         link_path_walk.part.0.constprop.0() {
           mnt_user_ns();
           inode_permission() {
             ovl_permission [overlay]() {
               ovl_inode_upper [overlay]();
               ovl_i_path_real [overlay]();
               generic_permission() {
                 get_cached_acl_rcu() {
                   do_ovl_get_acl [overlay]() {
                     ovl_i_path_real [overlay]();
                     get_cached_acl_rcu();
                   }
                 }
               }
               ovl_override_creds [overlay]() {
                 override_creds();
               }
               mnt_user_ns();
               inode_permission() {
                 generic_permission();
                 security_inode_permission();
               }
               revert_creds();
             }
             security_inode_permission();
           }
           walk_component() {
             lookup_fast() {
               __d_lookup_rcu();
             }
             step_into() {
               __lookup_mnt();
             }
           }
           mnt_user_ns();
           inode_permission() {
             generic_permission();
             security_inode_permission();
           }
           walk_component() {
             lookup_fast() {
               __d_lookup_rcu();
               pid_revalidate() {
                 __rcu_read_lock();
                 pid_task();
                 task_dump_owner() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 security_task_to_inode();
                 __rcu_read_unlock();
               }
             }
             step_into();
           }
           mnt_user_ns();
           inode_permission() {
             proc_pid_permission() {
               get_pid_task() {
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               generic_permission();
             }
             security_inode_permission();
           }
         }
         open_last_lookups() {
           lookup_fast() {
             __d_lookup_rcu();
             pid_revalidate() {
               __rcu_read_lock();
               pid_task();
               task_dump_owner() {
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 _raw_spin_lock();
                 _raw_spin_unlock();
               }
               security_task_to_inode();
               __rcu_read_unlock();
             }
           }
           step_into();
         }
         do_open() {
           complete_walk() {
             try_to_unlazy() {
               legitimize_links();
               __legitimize_path() {
                 __legitimize_mnt();
               }
               __rcu_read_unlock();
             }
           }
           mnt_user_ns();
           may_open() {
             inode_permission() {
               generic_permission();
               security_inode_permission();
             }
           }
           vfs_open() {
             do_dentry_open() {
               path_get() {
                 mntget();
               }
               try_module_get();
               security_file_open() {
                 hook_file_open();
                 apparmor_file_open() {
                   mnt_user_ns();
                   aa_path_perm() {
                     aa_get_buffer() {
                       _raw_spin_trylock();
                       _raw_spin_unlock();
                     }
                     aa_label_next_confined();
                     profile_path_perm.part.0() {
                       path_name() {
                         aa_path_name() {
                           d_namespace_path.constprop.0() {
                             d_absolute_path() {
                               prepend_path() {
                                 __rcu_read_lock();
                                 __rcu_read_lock();
                                 prepend() {
                                   prepend_copy() {
                                     copy_from_kernel_nofault() {
                                       copy_from_kernel_nofault_allowed();
                                     }
                                   }
                                 }
                                 prepend() {
                                   prepend_copy() {
                                     copy_from_kernel_nofault() {
                                       copy_from_kernel_nofault_allowed();
                                     }
                                   }
                                 }
                                 prepend() {
                                   prepend_copy() {
                                     copy_from_kernel_nofault() {
                                       copy_from_kernel_nofault_allowed();
                                     }
                                   }
                                 }
                                 __rcu_read_unlock();
                                 __rcu_read_unlock();
                               }
                             }
                             our_mnt();
                             our_mnt();
                           }
                         }
                       }
                       __aa_path_perm() {
                         aa_str_perms() {
                           aa_dfa_match();
                         }
                         aa_audit_file();
                       }
                     }
                     aa_label_next_confined();
                     aa_put_buffer() {
                       _raw_spin_trylock();
                       _raw_spin_unlock();
                     }
                   }
                 }
               }
               proc_single_open() {
                 single_open() {
                   kmalloc_trace() {
                     __kmem_cache_alloc_node() {
                       __cond_resched();
                       should_failslab();
                       __rcu_read_lock();
                       __get_obj_cgroup_from_memcg() {
                         __rcu_read_lock();
                         __rcu_read_unlock();
                       }
                       __rcu_read_unlock();
                       obj_cgroup_charge() {
                         consume_obj_stock();
                       }
                       __rcu_read_lock();
                       __rcu_read_unlock();
                       mod_objcg_state();
                       __rcu_read_lock();
                       __rcu_read_unlock();
                     }
                   }
                   seq_open() {
                     kmem_cache_alloc() {
                       __cond_resched();
                       should_failslab();
                       __rcu_read_lock();
                       __get_obj_cgroup_from_memcg() {
                         __rcu_read_lock();
                         __rcu_read_unlock();
                       }
                       __rcu_read_unlock();
                       obj_cgroup_charge() {
                         consume_obj_stock();
                       }
                       __rcu_read_lock();
                       __rcu_read_unlock();
                       mod_objcg_state();
                       __rcu_read_lock();
                       __rcu_read_unlock();
                     }
                     __mutex_init();
                   }
                 }
               }
               file_ra_state_init() {
                 inode_to_bdi();
               }
             }
           }
           ima_file_check() {
             security_current_getsecid_subj() {
               apparmor_current_getsecid_subj();
             }
             process_measurement() {
               mnt_user_ns();
               ima_get_action() {
                 ima_match_policy() {
                   ima_template_desc_current();
                   __rcu_read_lock();
                   ima_match_rules();
                   ima_match_rules();
                   __rcu_read_unlock();
                 }
               }
               down_write() {
                 __cond_resched();
               }
               up_write();
             }
           }
         }
         terminate_walk() {
           dput() {
             __cond_resched();
             __rcu_read_lock();
             __rcu_read_unlock();
           }
           mntput() {
             mntput_no_expire() {
               __rcu_read_lock();
               __rcu_read_unlock();
             }
           }
         }
       }
     }
     fd_install();
     putname() {
       kmem_cache_free();
     }
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_read() {
   ksys_read() {
     __fdget_pos() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
       mutex_lock() {
         __cond_resched();
       }
     }
     vfs_read() {
       rw_verify_area() {
         security_file_permission() {
           apparmor_file_permission() {
             aa_file_perm() {
               __rcu_read_lock();
               aa_label_is_subset();
               __rcu_read_unlock();
             }
           }
         }
       }
       seq_read() {
         __get_task_ioprio();
         seq_read_iter() {
           mutex_lock() {
             __cond_resched();
           }
           kvmalloc_node() {
             __kmalloc_node() {
               kmalloc_slab();
               __kmem_cache_alloc_node() {
                 __cond_resched();
                 should_failslab();
                 __rcu_read_lock();
                 __get_obj_cgroup_from_memcg() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_unlock();
                 obj_cgroup_charge() {
                   consume_obj_stock();
                   __rcu_read_lock();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   __rcu_read_unlock();
                   try_charge_memcg() {
                     consume_stock();
                   }
                   memcg_account_kmem() {
                     __mod_memcg_state() {
                       cgroup_rstat_updated();
                     }
                   }
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   refill_obj_stock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 mod_objcg_state() {
                   __rcu_read_lock();
                   __mod_memcg_lruvec_state() {
                     cgroup_rstat_updated();
                   }
                   __rcu_read_unlock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
             }
           }
           single_start();
           proc_single_show() {
             get_pid_task() {
               __rcu_read_lock();
               __rcu_read_unlock();
             }
             proc_tgid_stat() {
               do_task_stat() {
                 ptrace_may_access() {
                   _raw_spin_lock();
                   __ptrace_may_access();
                   _raw_spin_unlock();
                 }
                 get_task_mm() {
                   _raw_spin_lock();
                   _raw_spin_unlock();
                 }
                 task_vsize();
                 __lock_task_sighand() {
                   __rcu_read_lock();
                   _raw_spin_lock_irqsave();
                   __rcu_read_unlock();
                 }
                 collect_sigign_sigcatch.constprop.0.isra.0();
                 thread_group_cputime_adjusted() {
                   thread_group_cputime() {
                     task_sched_runtime() {
                       task_rq_lock() {
                         _raw_spin_lock_irqsave();
                         raw_spin_rq_lock_nested() {
                           _raw_spin_lock();
                         }
                       }
                       update_rq_clock();
                       update_curr_fair() {
                         update_curr() {
                           update_min_vruntime();
                           cpuacct_charge();
                           __cgroup_account_cputime() {
                             cgroup_rstat_updated();
                           }
                         }
                       }
                       raw_spin_rq_unlock() {
                         _raw_spin_unlock();
                       }
                       _raw_spin_unlock_irqrestore();
                     }
                     __rcu_read_lock();
                     __rcu_read_unlock();
                   }
                   cputime_adjust() {
                     _raw_spin_lock_irqsave();
                     _raw_spin_unlock_irqrestore();
                   }
                 }
                 __task_pid_nr_ns() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __task_pid_nr_ns() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __task_pid_nr_ns() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 _raw_spin_unlock_irqrestore();
                 task_prio();
                 nsec_to_clock_t();
                 pid_nr_ns();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_puts();
                 proc_task_name() {
                   __get_task_comm() {
                     _raw_spin_lock();
                     _raw_spin_unlock();
                   }
                   seq_printf();
                 }
                 seq_puts();
                 seq_putc();
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 nsec_to_clock_t();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 nsec_to_clock_t();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 nsec_to_clock_t();
                 seq_put_decimal_ll();
                 nsec_to_clock_t();
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ll();
                 seq_put_decimal_ll();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 nsec_to_clock_t();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 nsec_to_clock_t();
                 seq_put_decimal_ll();
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ull() {
                   seq_put_decimal_ull_width();
                 }
                 seq_put_decimal_ll();
                 seq_putc();
                 mmput() {
                   __cond_resched();
                 }
               }
             }
           }
           single_next();
           single_stop();
           __check_object_size() {
             __check_object_size.part.0() {
               check_stack_object();
               is_vmalloc_addr();
               __virt_addr_valid();
               __check_heap_object();
             }
           }
           mutex_unlock();
         }
       }
     }
     __f_unlock_pos() {
       mutex_unlock();
     }
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_close() {
   close_fd() {
     _raw_spin_lock();
     pick_file();
     _raw_spin_unlock();
     filp_close() {
       dnotify_flush();
       locks_remove_posix();
       fput() {
         task_work_add() {
           kick_process();
         }
       }
     }
   }
 }
 exit_to_user_mode_prepare() {
   exit_to_user_mode_loop() {
     task_work_run() {
       _raw_spin_lock_irq();
       _raw_spin_unlock_irq();
       ____fput() {
         __fput() {
           __cond_resched();
           locks_remove_file();
           ima_file_free() {
             integrity_iint_find();
           }
           single_release() {
             kvfree() {
               is_vmalloc_addr();
               kfree() {
                 __kmem_cache_free() {
                   obj_cgroup_uncharge() {
                     refill_obj_stock() {
                       obj_cgroup_uncharge_pages() {
                         __rcu_read_lock();
                         __rcu_read_lock();
                         __rcu_read_unlock();
                         __rcu_read_unlock();
                         memcg_account_kmem() {
                           __mod_memcg_state() {
                             cgroup_rstat_updated();
                           }
                         }
                         refill_stock() {
                           __refill_stock();
                         }
                         __rcu_read_lock();
                         __rcu_read_unlock();
                       }
                     }
                   }
                   mod_objcg_state();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
               }
             }
             kmem_cache_free() {
               obj_cgroup_uncharge() {
                 refill_obj_stock();
               }
               mod_objcg_state() {
                 __rcu_read_lock();
                 __mod_memcg_lruvec_state() {
                   cgroup_rstat_updated();
                 }
                 __rcu_read_unlock();
               }
               __rcu_read_lock();
               __rcu_read_unlock();
             }
             kfree() {
               __kmem_cache_free() {
                 obj_cgroup_uncharge() {
                   refill_obj_stock();
                 }
                 mod_objcg_state();
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
             }
           }
           module_put();
           put_pid();
           dput() {
             __cond_resched();
             __rcu_read_lock();
             _raw_spin_lock();
             __rcu_read_unlock();
             pid_delete_dentry();
             _raw_spin_unlock();
           }
           mntput() {
             mntput_no_expire() {
               __rcu_read_lock();
               __rcu_read_unlock();
             }
           }
           security_file_free() {
             apparmor_file_free_security();
             kmem_cache_free();
           }
           call_rcu() {
             __call_rcu_common.constprop.0() {
               rcu_segcblist_enqueue();
             }
           }
         }
       }
       __cond_resched();
     }
     mem_cgroup_handle_over_high();
     blkcg_maybe_throttle_current();
   }
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_epoll_wait() {
   ktime_get_ts64();
   timespec64_add_safe();
   do_epoll_wait() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     ep_poll() {
       select_estimate_accuracy() {
         ktime_get_ts64();
         set_normalized_timespec64();
       }
       _raw_write_lock_irq();
       _raw_write_unlock_irq();
       schedule_hrtimeout_range() {
         schedule_hrtimeout_range_clock() {
           hrtimer_init_sleeper() {
             __hrtimer_init();
           }
           hrtimer_start_range_ns() {
             _raw_spin_lock_irqsave();
             __hrtimer_start_range_ns() {
               get_nohz_timer_target();
               enqueue_hrtimer();
             }
             _raw_spin_unlock_irqrestore();
           }
           schedule() {
             rcu_note_context_switch();
             raw_spin_rq_lock_nested() {
               _raw_spin_lock();
             }
             update_rq_clock();
             dequeue_task_fair() {
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                   cpuacct_charge();
                   __cgroup_account_cputime() {
                     cgroup_rstat_updated();
                   }
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group();
                 update_min_vruntime();
               }
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group() {
                   reweight_entity();
                 }
                 update_min_vruntime();
               }
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group() {
                   reweight_entity();
                 }
                 update_min_vruntime();
               }
               hrtick_update();
             }
             pick_next_task() {
               pick_next_task_fair() {
                 newidle_balance() {
                   __rcu_read_lock();
                   __msecs_to_jiffies();
                   __rcu_read_unlock();
                 }
               }
               put_prev_task_fair() {
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
               }
               pick_next_task_idle() {
                 __update_idle_core() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
               }
             }
             psi_task_switch() {
               psi_flags_change();
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
             }
             __traceiter_sched_switch() {
               _raw_spin_lock_irqsave();
               _raw_spin_unlock_irqrestore();
             }
             finish_task_switch.isra.0() {
               raw_spin_rq_unlock() {
                 _raw_spin_unlock();
               }
             }
           }
           hrtimer_active();
           hrtimer_try_to_cancel.part.0() {
             _raw_spin_lock_irqsave();
             __remove_hrtimer();
             _raw_spin_unlock_irqrestore();
           }
         }
       }
       ep_send_events() {
         mutex_lock() {
           __cond_resched();
         }
         _raw_write_lock_irq();
         _raw_write_unlock_irq();
         ep_item_poll.isra.0() {
           sock_poll() {
             tcp_poll();
           }
         }
         ep_done_scan() {
           _raw_write_lock_irq();
           __pm_relax();
           _raw_write_unlock_irq();
         }
         mutex_unlock();
       }
     }
     fput();
   } /* do_epoll_wait */
 } /* __x64_sys_epoll_wait */
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_accept() {
   __sys_accept4() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     get_unused_fd_flags() {
       alloc_fd() {
         _raw_spin_lock();
         expand_files();
         _raw_spin_unlock();
       }
     }
     do_accept() {
       sock_alloc() {
         new_inode_pseudo() {
           alloc_inode() {
             sock_alloc_inode() {
               kmem_cache_alloc_lru() {
                 __cond_resched();
                 should_failslab();
                 __rcu_read_lock();
                 __get_obj_cgroup_from_memcg() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_unlock();
                 __rcu_read_lock();
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 __rcu_read_unlock();
                 memcg_list_lru_alloc() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 obj_cgroup_charge() {
                   consume_obj_stock();
                   __rcu_read_lock();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   __rcu_read_unlock();
                   try_charge_memcg() {
                     consume_stock();
                     page_counter_try_charge() {
                       propagate_protected_usage();
                       propagate_protected_usage();
                       propagate_protected_usage();
                     }
                     refill_stock() {
                       __refill_stock() {
                         drain_stock() {
                           page_counter_uncharge() {
                             page_counter_cancel() {
                               propagate_protected_usage();
                             }
                             page_counter_cancel() {
                               propagate_protected_usage();
                             }
                             page_counter_cancel() {
                               propagate_protected_usage();
                             }
                             page_counter_cancel() {
                               propagate_protected_usage();
                             }
                             page_counter_cancel() {
                               propagate_protected_usage();
                             }
                             page_counter_cancel() {
                               propagate_protected_usage();
                             }
                           }
                           __rcu_read_lock();
                           __rcu_read_unlock();
                         }
                         __rcu_read_lock();
                         __rcu_read_unlock();
                       }
                     }
                   }
                   memcg_account_kmem() {
                     __mod_memcg_state() {
                       cgroup_rstat_updated();
                     }
                   }
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   refill_obj_stock() {
                     drain_obj_stock();
                     __rcu_read_lock();
                     __rcu_read_unlock();
                     __rcu_read_lock();
                     __rcu_read_unlock();
                     obj_cgroup_uncharge_pages() {
                       __rcu_read_lock();
                       __rcu_read_lock();
                       __rcu_read_unlock();
                       __rcu_read_unlock();
                       memcg_account_kmem() {
                         __mod_memcg_state() {
                           cgroup_rstat_updated();
                         }
                       }
                       refill_stock() {
                         __refill_stock();
                       }
                       __rcu_read_lock();
                       __rcu_read_unlock();
                     }
                   }
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 mod_objcg_state();
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               __init_waitqueue_head();
             }
             inode_init_always() {
               make_kuid() {
                 map_id_range_down();
               }
               make_kgid() {
                 map_id_range_down();
               }
               __init_rwsem();
               __init_rwsem();
               security_inode_alloc() {
                 kmem_cache_alloc() {
                   __cond_resched();
                   should_failslab();
                 }
                 apparmor_inode_alloc_security();
               }
             }
           }
           _raw_spin_lock();
           _raw_spin_unlock();
         }
         get_next_ino();
       }
       __module_get();
       sock_alloc_file() {
         alloc_file_pseudo() {
           d_alloc_pseudo() {
             __d_alloc() {
               kmem_cache_alloc_lru() {
                 __cond_resched();
                 should_failslab();
                 __rcu_read_lock();
                 __get_obj_cgroup_from_memcg() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_unlock();
                 __rcu_read_lock();
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 __rcu_read_unlock();
                 memcg_list_lru_alloc() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 obj_cgroup_charge() {
                   consume_obj_stock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 mod_objcg_state();
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               d_set_d_op();
             }
           }
           mntget();
           d_instantiate() {
             security_d_instantiate() {
               apparmor_d_instantiate() {
                 _raw_spin_lock();
                 _raw_spin_unlock();
               }
             }
             _raw_spin_lock();
             __d_instantiate() {
               d_flags_for_inode();
               _raw_spin_lock();
               _raw_spin_unlock();
             }
             _raw_spin_unlock();
           }
           alloc_file() {
             alloc_empty_file() {
               __alloc_file() {
                 kmem_cache_alloc() {
                   __cond_resched();
                   should_failslab();
                   __rcu_read_lock();
                   __get_obj_cgroup_from_memcg() {
                     __rcu_read_lock();
                     __rcu_read_unlock();
                   }
                   __rcu_read_unlock();
                   obj_cgroup_charge() {
                     consume_obj_stock();
                   }
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   mod_objcg_state();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 security_file_alloc() {
                   kmem_cache_alloc() {
                     __cond_resched();
                     should_failslab();
                   }
                   hook_file_alloc_security();
                   apparmor_file_alloc_security() {
                     __cond_resched();
                   }
                 }
                 __mutex_init();
               }
             }
           }
         }
         stream_open();
       }
       security_socket_accept() {
         apparmor_socket_accept() {
           aa_sk_perm() {
             __cond_resched();
             aa_label_sk_perm.part.0() {
               aa_label_next_confined();
               aa_profile_af_perm() {
                 aa_apply_modes_to_perms();
                 aa_check_perms();
               }
               aa_label_next_confined();
             }
           }
         }
       }
       inet_accept() {
         inet_csk_accept() {
           lock_sock_nested() {
             __cond_resched();
             _raw_spin_lock_bh();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           _raw_spin_lock_bh();
           _raw_spin_unlock_bh() {
             __local_bh_enable_ip();
           }
           release_sock() {
             _raw_spin_lock_bh();
             tcp_release_cb();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           lock_sock_nested() {
             __cond_resched();
             _raw_spin_lock_bh() {
               native_queued_spin_lock_slowpath();
             }
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           mem_cgroup_sk_alloc() {
             __rcu_read_lock();
             __rcu_read_lock();
             __rcu_read_unlock();
             __rcu_read_unlock();
           }
           mem_cgroup_charge_skmem() {
             try_charge_memcg() {
               consume_stock();
             }
             __mod_memcg_state() {
               cgroup_rstat_updated();
             }
           }
           release_sock() {
             _raw_spin_lock_bh();
             tcp_release_cb();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           tcp_v4_reqsk_destructor() {
             kfree();
           }
           kfree();
           kmem_cache_free() {
             __slab_free();
           }
         }
         lock_sock_nested() {
           __cond_resched();
           _raw_spin_lock_bh();
           _raw_spin_unlock_bh() {
             __local_bh_enable_ip();
           }
         }
         _raw_write_lock_bh();
         security_sock_graft() {
           apparmor_sock_graft();
         }
         _raw_write_unlock_bh() {
           __local_bh_enable_ip();
         }
         release_sock() {
           _raw_spin_lock_bh();
           tcp_release_cb();
           _raw_spin_unlock_bh() {
             __local_bh_enable_ip();
           }
         }
       }
       inet_getname() {
         lock_sock_nested() {
           __cond_resched();
           _raw_spin_lock_bh();
           _raw_spin_unlock_bh() {
             __local_bh_enable_ip();
           }
         }
         release_sock() {
           _raw_spin_lock_bh();
           tcp_release_cb();
           _raw_spin_unlock_bh() {
             __local_bh_enable_ip();
           }
         }
       }
       move_addr_to_user() {
         __check_object_size() {
           __check_object_size.part.0() {
             check_stack_object();
           }
         }
       }
     }
     fd_install();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_fcntl() {
   __fdget_raw() {
     __fget_light() {
       __rcu_read_lock();
       __rcu_read_unlock();
     }
   }
   security_file_fcntl();
   do_fcntl();
   fput();
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_fcntl() {
   __fdget_raw() {
     __fget_light() {
       __rcu_read_lock();
       __rcu_read_unlock();
     }
   }
   security_file_fcntl();
   do_fcntl() {
     setfl() {
       _raw_spin_lock();
       _raw_spin_unlock();
     }
   }
   fput();
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_setsockopt() {
   __sys_setsockopt() {
     sockfd_lookup_light() {
       __fdget() {
         __fget_light() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
       }
     }
     security_socket_setsockopt() {
       apparmor_socket_setsockopt() {
         aa_sk_perm() {
           __cond_resched();
           aa_label_sk_perm.part.0() {
             aa_label_next_confined();
             aa_profile_af_perm() {
               aa_apply_modes_to_perms();
               aa_check_perms();
             }
             aa_label_next_confined();
           }
         }
       }
     }
     sock_common_setsockopt() {
       tcp_setsockopt() {
         do_tcp_setsockopt() {
           sockopt_lock_sock() {
             __cond_resched();
             _raw_spin_lock_bh();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           sockopt_release_sock() {
             release_sock() {
               _raw_spin_lock_bh();
               tcp_release_cb();
               _raw_spin_unlock_bh() {
                 __local_bh_enable_ip();
               }
             }
           }
         }
       }
     }
     kfree();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_setsockopt() {
   __sys_setsockopt() {
     sockfd_lookup_light() {
       __fdget() {
         __fget_light() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
       }
     }
     security_socket_setsockopt() {
       apparmor_socket_setsockopt() {
         aa_sk_perm() {
           __cond_resched();
           aa_label_sk_perm.part.0() {
             aa_label_next_confined();
             aa_profile_af_perm() {
               aa_apply_modes_to_perms();
               aa_check_perms();
             }
             aa_label_next_confined();
           }
         }
       }
     }
     sock_setsockopt() {
       sk_setsockopt() {
         __cond_resched();
         _raw_spin_lock_bh();
         _raw_spin_unlock_bh() {
           __local_bh_enable_ip();
         }
         tcp_set_keepalive() {
           inet_csk_reset_keepalive_timer() {
             sk_reset_timer() {
               mod_timer() {
                 lock_timer_base() {
                   _raw_spin_lock_irqsave();
                 }
                 detach_if_pending();
                 get_nohz_timer_target();
                 _raw_spin_unlock();
                 _raw_spin_lock();
                 calc_wheel_index();
                 enqueue_timer();
                 _raw_spin_unlock_irqrestore();
               }
             }
           }
         }
         release_sock() {
           _raw_spin_lock_bh();
           tcp_release_cb();
           _raw_spin_unlock_bh() {
             __local_bh_enable_ip();
           }
         }
       }
     }
     kfree();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_setsockopt() {
   __sys_setsockopt() {
     sockfd_lookup_light() {
       __fdget() {
         __fget_light() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
       }
     }
     security_socket_setsockopt() {
       apparmor_socket_setsockopt() {
         aa_sk_perm() {
           __cond_resched();
           aa_label_sk_perm.part.0() {
             aa_label_next_confined();
             aa_profile_af_perm() {
               aa_apply_modes_to_perms();
               aa_check_perms();
             }
             aa_label_next_confined();
           }
         }
       }
     }
     sock_common_setsockopt() {
       tcp_setsockopt() {
         do_tcp_setsockopt() {
           sockopt_lock_sock() {
             __cond_resched();
             _raw_spin_lock_bh();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           tcp_sock_set_keepidle_locked() {
             inet_csk_reset_keepalive_timer() {
               sk_reset_timer() {
                 mod_timer() {
                   lock_timer_base() {
                     _raw_spin_lock_irqsave();
                   }
                   calc_wheel_index();
                   detach_if_pending();
                   get_nohz_timer_target();
                   enqueue_timer();
                   _raw_spin_unlock_irqrestore();
                 }
               }
             }
           }
           sockopt_release_sock() {
             release_sock() {
               _raw_spin_lock_bh();
               tcp_release_cb();
               _raw_spin_unlock_bh() {
                 __local_bh_enable_ip();
               }
             }
           }
         }
       }
     }
     kfree();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_setsockopt() {
   __sys_setsockopt() {
     sockfd_lookup_light() {
       __fdget() {
         __fget_light() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
       }
     }
     security_socket_setsockopt() {
       apparmor_socket_setsockopt() {
         aa_sk_perm() {
           __cond_resched();
           aa_label_sk_perm.part.0() {
             aa_label_next_confined();
             aa_profile_af_perm() {
               aa_apply_modes_to_perms();
               aa_check_perms();
             }
             aa_label_next_confined();
           }
         }
       }
     }
     sock_common_setsockopt() {
       tcp_setsockopt() {
         do_tcp_setsockopt() {
           sockopt_lock_sock() {
             __cond_resched();
             _raw_spin_lock_bh();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           sockopt_release_sock() {
             release_sock() {
               _raw_spin_lock_bh();
               tcp_release_cb();
               _raw_spin_unlock_bh() {
                 __local_bh_enable_ip();
               }
             }
           }
         }
       }
     }
     kfree();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_setsockopt() {
   __sys_setsockopt() {
     sockfd_lookup_light() {
       __fdget() {
         __fget_light() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
       }
     }
     security_socket_setsockopt() {
       apparmor_socket_setsockopt() {
         aa_sk_perm() {
           __cond_resched();
           aa_label_sk_perm.part.0() {
             aa_label_next_confined();
             aa_profile_af_perm() {
               aa_apply_modes_to_perms();
               aa_check_perms();
             }
             aa_label_next_confined();
           }
         }
       }
     }
     sock_common_setsockopt() {
       tcp_setsockopt() {
         do_tcp_setsockopt() {
           sockopt_lock_sock() {
             __cond_resched();
             _raw_spin_lock_bh();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           sockopt_release_sock() {
             release_sock() {
               _raw_spin_lock_bh();
               tcp_release_cb();
               _raw_spin_unlock_bh() {
                 __local_bh_enable_ip();
               }
             }
           }
         }
       }
     }
     kfree();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_epoll_ctl() {
   do_epoll_ctl() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     mutex_lock() {
       __cond_resched();
     }
     ep_insert() {
       kmem_cache_alloc() {
         __cond_resched();
         should_failslab();
         __rcu_read_lock();
         __get_obj_cgroup_from_memcg() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
         __rcu_read_unlock();
         obj_cgroup_charge() {
           consume_obj_stock();
         }
         __rcu_read_lock();
         __rcu_read_unlock();
         mod_objcg_state();
         __rcu_read_lock();
         __rcu_read_unlock();
       }
       kmem_cache_alloc() {
         __cond_resched();
         should_failslab();
         __rcu_read_lock();
         __get_obj_cgroup_from_memcg() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
         __rcu_read_unlock();
         obj_cgroup_charge() {
           consume_obj_stock();
         }
         __rcu_read_lock();
         __rcu_read_unlock();
         mod_objcg_state();
         __rcu_read_lock();
         __rcu_read_unlock();
       }
       _raw_spin_lock();
       _raw_spin_unlock();
       ep_item_poll.isra.0() {
         sock_poll() {
           tcp_poll() {
             ep_ptable_queue_proc() {
               kmem_cache_alloc() {
                 __cond_resched();
                 should_failslab();
                 __rcu_read_lock();
                 __get_obj_cgroup_from_memcg() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_unlock();
                 obj_cgroup_charge() {
                   consume_obj_stock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 mod_objcg_state();
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               add_wait_queue() {
                 _raw_spin_lock_irqsave();
                 _raw_spin_unlock_irqrestore();
               }
             }
             tcp_stream_memory_free();
           }
         }
       }
       _raw_write_lock_irq();
       _raw_write_unlock_irq();
     }
     mutex_unlock();
     fput();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_accept() {
   __sys_accept4() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     get_unused_fd_flags() {
       alloc_fd() {
         _raw_spin_lock();
         expand_files();
         _raw_spin_unlock();
       }
     }
     do_accept() {
       sock_alloc() {
         new_inode_pseudo() {
           alloc_inode() {
             sock_alloc_inode() {
               kmem_cache_alloc_lru() {
                 __cond_resched();
                 should_failslab();
                 __rcu_read_lock();
                 __get_obj_cgroup_from_memcg() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_unlock();
                 __rcu_read_lock();
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 __rcu_read_unlock();
                 memcg_list_lru_alloc() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 obj_cgroup_charge() {
                   consume_obj_stock();
                   __rcu_read_lock();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   __rcu_read_unlock();
                   try_charge_memcg() {
                     consume_stock();
                   }
                   memcg_account_kmem() {
                     __mod_memcg_state() {
                       cgroup_rstat_updated();
                     }
                   }
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   refill_obj_stock();
                 }
                 ___slab_alloc();
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 mod_objcg_state();
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               __init_waitqueue_head();
             }
             inode_init_always() {
               make_kuid() {
                 map_id_range_down();
               }
               make_kgid() {
                 map_id_range_down();
               }
               __init_rwsem();
               __init_rwsem();
               security_inode_alloc() {
                 kmem_cache_alloc() {
                   __cond_resched();
                   should_failslab();
                 }
                 apparmor_inode_alloc_security();
               }
             }
           }
           _raw_spin_lock();
           _raw_spin_unlock();
         }
         get_next_ino();
       }
       __module_get();
       sock_alloc_file() {
         alloc_file_pseudo() {
           d_alloc_pseudo() {
             __d_alloc() {
               kmem_cache_alloc_lru() {
                 __cond_resched();
                 should_failslab();
                 __rcu_read_lock();
                 __get_obj_cgroup_from_memcg() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_unlock();
                 __rcu_read_lock();
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 __rcu_read_unlock();
                 memcg_list_lru_alloc() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 obj_cgroup_charge() {
                   consume_obj_stock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 mod_objcg_state();
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
               d_set_d_op();
             }
           }
           mntget();
           d_instantiate() {
             security_d_instantiate() {
               apparmor_d_instantiate() {
                 _raw_spin_lock();
                 _raw_spin_unlock();
               }
             }
             _raw_spin_lock();
             __d_instantiate() {
               d_flags_for_inode();
               _raw_spin_lock();
               _raw_spin_unlock();
             }
             _raw_spin_unlock();
           }
           alloc_file() {
             alloc_empty_file() {
               __alloc_file() {
                 kmem_cache_alloc() {
                   __cond_resched();
                   should_failslab();
                   __rcu_read_lock();
                   __get_obj_cgroup_from_memcg() {
                     __rcu_read_lock();
                     __rcu_read_unlock();
                   }
                   __rcu_read_unlock();
                   obj_cgroup_charge() {
                     consume_obj_stock();
                   }
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   mod_objcg_state();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
                 security_file_alloc() {
                   kmem_cache_alloc() {
                     __cond_resched();
                     should_failslab();
                   }
                   hook_file_alloc_security();
                   apparmor_file_alloc_security() {
                     __cond_resched();
                   }
                 }
                 __mutex_init();
               }
             }
           }
         }
         stream_open();
       }
       security_socket_accept() {
         apparmor_socket_accept() {
           aa_sk_perm() {
             __cond_resched();
             aa_label_sk_perm.part.0() {
               aa_label_next_confined();
               aa_profile_af_perm() {
                 aa_apply_modes_to_perms();
                 aa_check_perms();
               }
               aa_label_next_confined();
             }
           }
         }
       }
       inet_accept() {
         inet_csk_accept() {
           lock_sock_nested() {
             __cond_resched();
             _raw_spin_lock_bh();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
           release_sock() {
             _raw_spin_lock_bh();
             tcp_release_cb();
             _raw_spin_unlock_bh() {
               __local_bh_enable_ip();
             }
           }
         }
       }
       fput() {
         task_work_add() {
           kick_process();
         }
       }
     }
     put_unused_fd() {
       _raw_spin_lock();
       _raw_spin_unlock();
     }
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   exit_to_user_mode_loop() {
     task_work_run() {
       _raw_spin_lock_irq();
       _raw_spin_unlock_irq();
       ____fput() {
         __fput() {
           __cond_resched();
           locks_remove_file();
           ima_file_free();
           sock_close() {
             __sock_release() {
               down_write() {
                 __cond_resched();
               }
               inet_release();
               up_write();
               module_put();
             }
           }
           module_put();
           put_pid();
           dput() {
             __cond_resched();
             __rcu_read_lock();
             _raw_spin_lock();
             __rcu_read_unlock();
             _raw_spin_trylock();
             __dentry_kill() {
               dentry_unlink_inode() {
                 _raw_spin_unlock();
                 _raw_spin_unlock();
                 iput() {
                   _raw_spin_lock();
                   _raw_spin_unlock();
                   evict() {
                     inode_wait_for_writeback() {
                       _raw_spin_lock();
                       __inode_wait_for_writeback() {
                         bit_waitqueue();
                       }
                       _raw_spin_unlock();
                     }
                     truncate_inode_pages_final() {
                       truncate_inode_pages_range();
                     }
                     clear_inode() {
                       _raw_spin_lock_irq();
                       _raw_spin_unlock_irq();
                     }
                     _raw_spin_lock();
                     wake_up_bit();
                     _raw_spin_unlock();
                     destroy_inode() {
                       __destroy_inode() {
                         inode_has_buffers();
                         security_inode_free() {
                           integrity_inode_free();
                           hook_inode_free_security();
                           apparmor_inode_free_security();
                           call_rcu() {
                             __call_rcu_common.constprop.0() {
                               rcu_segcblist_enqueue();
                             }
                           }
                         }
                         __fsnotify_inode_delete() {
                           fsnotify_destroy_marks() {
                             fsnotify_grab_connector() {
                               __srcu_read_lock();
                               __srcu_read_unlock();
                             }
                           }
                         }
                         locks_free_lock_context();
                       }
                       call_rcu() {
                         __call_rcu_common.constprop.0() {
                           rcu_segcblist_enqueue();
                         }
                       }
                     }
                   }
                 }
               }
               _raw_spin_lock();
               _raw_spin_unlock();
               dentry_free() {
                 kmem_cache_free() {
                   obj_cgroup_uncharge() {
                     refill_obj_stock();
                   }
                   mod_objcg_state();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
               }
               __cond_resched();
             }
           }
           mntput() {
             mntput_no_expire() {
               __rcu_read_lock();
               __rcu_read_unlock();
             }
           }
           security_file_free() {
             apparmor_file_free_security();
             kmem_cache_free();
           }
           call_rcu() {
             __call_rcu_common.constprop.0() {
               rcu_segcblist_enqueue();
             }
           }
         }
       }
       __cond_resched();
     }
     mem_cgroup_handle_over_high();
     blkcg_maybe_throttle_current();
   }
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_epoll_wait() {
   ktime_get_ts64();
   timespec64_add_safe();
   do_epoll_wait() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     ep_poll() {
       select_estimate_accuracy() {
         ktime_get_ts64();
         set_normalized_timespec64();
       }
       ep_send_events() {
         mutex_lock() {
           __cond_resched();
         }
         _raw_write_lock_irq();
         _raw_write_unlock_irq();
         ep_item_poll.isra.0() {
           sock_poll() {
             tcp_poll();
           }
         }
         ep_item_poll.isra.0() {
           sock_poll() {
             tcp_poll() {
               tcp_stream_memory_free();
             }
           }
         }
         ep_done_scan() {
           _raw_write_lock_irq();
           __pm_relax();
           _raw_write_unlock_irq();
         }
         mutex_unlock();
       }
     }
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_read() {
   ksys_read() {
     __fdget_pos() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     vfs_read() {
       rw_verify_area() {
         security_file_permission() {
           apparmor_file_permission() {
             aa_file_perm() {
               __rcu_read_lock();
               __rcu_read_unlock();
               aa_sock_file_perm() {
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
               aa_sock_file_perm() {
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
               update_file_ctx() {
                 _raw_spin_lock();
                 aa_label_merge();
                 _raw_spin_unlock();
               }
             }
           }
         }
       }
       __get_task_ioprio();
       sock_read_iter() {
         sock_recvmsg() {
           security_socket_recvmsg() {
             apparmor_socket_recvmsg() {
               aa_sk_perm() {
                 __cond_resched();
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
             }
           }
           inet_recvmsg() {
             tcp_recvmsg() {
               lock_sock_nested() {
                 __cond_resched();
                 _raw_spin_lock_bh();
                 _raw_spin_unlock_bh() {
                   __local_bh_enable_ip();
                 }
               }
               tcp_recvmsg_locked() {
                 skb_copy_datagram_iter() {
                   __skb_datagram_iter() {
                     __cond_resched();
                     simple_copy_to_iter() {
                       __check_object_size() {
                         __check_object_size.part.0() {
                           check_stack_object();
                           is_vmalloc_addr();
                           __virt_addr_valid();
                         }
                       }
                     }
                   }
                 }
                 tcp_rcv_space_adjust() {
                   tcp_mstamp_refresh() {
                     ktime_get();
                   }
                 }
                 sock_rfree() {
                   __sk_mem_reduce_allocated() {
                     mem_cgroup_uncharge_skmem() {
                       __mod_memcg_state() {
                         cgroup_rstat_updated();
                       }
                       refill_stock() {
                         __refill_stock();
                       }
                     }
                   }
                 }
                 skb_attempt_defer_free() {
                   _raw_spin_lock_irqsave();
                   _raw_spin_unlock_irqrestore();
                 }
                 tcp_cleanup_rbuf() {
                   __tcp_cleanup_rbuf();
                 }
               }
               release_sock() {
                 _raw_spin_lock_bh();
                 tcp_release_cb();
                 _raw_spin_unlock_bh() {
                   __local_bh_enable_ip();
                 }
               }
             }
           }
         }
       }
     }
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_write() {
   ksys_write() {
     __fdget_pos() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     vfs_write() {
       rw_verify_area() {
         security_file_permission() {
           apparmor_file_permission() {
             aa_file_perm() {
               __rcu_read_lock();
               __rcu_read_unlock();
               aa_sock_file_perm() {
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
               aa_sock_file_perm() {
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
               update_file_ctx() {
                 _raw_spin_lock();
                 aa_label_merge();
                 _raw_spin_unlock();
               }
             }
           }
         }
       }
       __get_task_ioprio();
       sock_write_iter() {
         sock_sendmsg() {
           security_socket_sendmsg() {
             apparmor_socket_sendmsg() {
               aa_sk_perm() {
                 __cond_resched();
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
             }
           }
           inet_sendmsg() {
             inet_send_prepare();
             tcp_sendmsg() {
               lock_sock_nested() {
                 __cond_resched();
                 _raw_spin_lock_bh();
                 _raw_spin_unlock_bh() {
                   __local_bh_enable_ip();
                 }
               }
               tcp_sendmsg_locked() {
                 tcp_rate_check_app_limited();
                 tcp_send_mss() {
                   tcp_current_mss() {
                     ipv4_mtu();
                     tcp_established_options();
                   }
                 }
                 tcp_stream_memory_free();
                 tcp_stream_alloc_skb() {
                   __alloc_skb() {
                     kmem_cache_alloc_node() {
                       __cond_resched();
                       should_failslab();
                     }
                     kmalloc_reserve() {
                       kmalloc_size_roundup() {
                         kmalloc_slab();
                       }
                       __kmalloc_node_track_caller() {
                         kmalloc_slab();
                         __kmem_cache_alloc_node() {
                           __cond_resched();
                           should_failslab();
                         }
                       }
                     }
                     __build_skb_around();
                   }
                   sk_forced_mem_schedule() {
                     mem_cgroup_charge_skmem() {
                       try_charge_memcg() {
                         consume_stock();
                       }
                       __mod_memcg_state() {
                         cgroup_rstat_updated();
                       }
                     }
                   }
                 }
                 tcp_skb_entail() {
                   tcp_chrono_start();
                 }
                 sk_page_frag_refill() {
                   skb_page_frag_refill();
                 }
                 tcp_wmem_schedule();
                 __check_object_size() {
                   __check_object_size.part.0() {
                     check_stack_object();
                     is_vmalloc_addr();
                     __virt_addr_valid();
                   }
                 }
                 tcp_tx_timestamp();
                 tcp_push() {
                   __tcp_push_pending_frames() {
                     tcp_write_xmit() {
                       ktime_get();
                       tcp_mtu_probe();
                       tcp_tso_segs();
                       tcp_small_queue_check.isra.0();
                       __tcp_transmit_skb() {
                         skb_clone() {
                           __skb_clone() {
                             __copy_skb_header();
                           }
                         }
                         tcp_established_options();
                         skb_push();
                         __tcp_select_window();
                         tcp_options_write();
                         bpf_skops_write_hdr_opt.isra.0();
                         tcp_v4_send_check();
                         cubictcp_cwnd_event();
                         ip_queue_xmit() {
                           __ip_queue_xmit() {
                             __rcu_read_lock();
                             __sk_dst_check() {
                               ipv4_dst_check();
                             }
                             skb_push();
                             ip_local_out() {
                               __ip_local_out() {
                                 ip_send_check();
                                 __rcu_read_lock();
                                 __rcu_read_unlock();
                               }
                               ip_output() {
                                 __rcu_read_lock();
                                 nf_hook_slow() {
                                   apparmor_ip_postroute();
                                 }
                                 __rcu_read_unlock();
                                 ip_finish_output() {
                                   __ip_finish_output() {
                                     ip_finish_output2() {
                                       __dev_queue_xmit() {
                                         qdisc_pkt_len_init();
                                         netdev_core_pick_tx();
                                         validate_xmit_skb() {
                                           netif_skb_features() {
                                             passthru_features_check();
                                             skb_network_protocol();
                                           }
                                           skb_csum_hwoffload_help();
                                           validate_xmit_xfrm();
                                         }
                                         dev_hard_start_xmit() {
                                           veth_xmit [veth]() {
                                             __rcu_read_lock();
                                             skb_clone_tx_timestamp();
                                             __dev_forward_skb() {
                                               __dev_forward_skb2() {
                                                 skb_scrub_packet();
                                                 eth_type_trans();
                                               }
                                             }
                                             __netif_rx() {
                                               netif_rx_internal() {
                                                 enqueue_to_backlog() {
                                                   _raw_spin_lock_irqsave();
                                                   __raise_softirq_irqoff();
                                                   _raw_spin_unlock_irqrestore();
                                                 }
                                               }
                                             }
                                             __rcu_read_unlock();
                                           }
                                         }
                                         __local_bh_enable_ip();
                                       }
                                       __local_bh_enable_ip() {
                                         do_softirq.part.0() {
                                           __do_softirq() {
                                             net_rx_action() {
                                               __usecs_to_jiffies();
                                               __napi_poll() {
                                                 process_backlog() {
                                                   _raw_spin_lock_irq();
                                                   _raw_spin_unlock_irq();
                                                   __rcu_read_lock();
                                                   __netif_receive_skb() {
                                                     __netif_receive_skb_one_core() {
                                                       __netif_receive_skb_core.constprop.0() {
                                                         br_handle_frame [bridge]() {
                                                           br_nf_pre_routing [br_netfilter]() {
                                                             __rcu_read_lock();
                                                             __rcu_read_unlock();
                                                             __rcu_read_lock();
                                                             __rcu_read_unlock();
                                                             __rcu_read_lock();
                                                             __rcu_read_unlock();
                                                             skb_pull_rcsum();
                                                             br_validate_ipv4 [br_netfilter]();
                                                             skb_ext_add() {
                                                               __skb_ext_alloc() {
                                                                 kmem_cache_alloc() {
                                                                   should_failslab();
                                                                 }
                                                               }
                                                             }
                                                             setup_pre_routing [br_netfilter]() {
                                                               brnf_get_logical_dev [br_netfilter]() {
                                                                 __rcu_read_lock();
                                                                 __rcu_read_unlock();
                                                               }
                                                               tcp_wfree() {
                                                                 sk_free();
                                                               }
                                                             }
                                                             __rcu_read_lock();
                                                             nf_hook_slow() {
                                                               ip_sabotage_in [br_netfilter]();
                                                               ipv4_conntrack_defrag [nf_defrag_ipv4]();
                                                               ipv4_conntrack_in [nf_conntrack]() {
                                                                 nf_conntrack_in [nf_conntrack]() {
                                                                   get_l4proto [nf_conntrack]();
                                                                   resolve_normal_ct [nf_conntrack]() {
                                                                     nf_ct_get_tuple [nf_conntrack]();
                                                                     hash_conntrack_raw [nf_conntrack]();
                                                                     __nf_conntrack_find_get [nf_conntrack]() {
                                                                       __rcu_read_lock();
                                                                       __rcu_read_unlock();
                                                                     }
                                                                   }
                                                                   nf_conntrack_handle_packet [nf_conntrack]() {
                                                                     nf_conntrack_tcp_packet [nf_conntrack]() {
                                                                       nf_checksum() {
                                                                         nf_ip_checksum();
                                                                       }
                                                                       _raw_spin_lock_bh();
                                                                       tcp_in_window [nf_conntrack]() {
                                                                         nf_ct_seq_offset [nf_conntrack]();
                                                                       }
                                                                       _raw_spin_unlock_bh() {
                                                                         __local_bh_enable_ip();
                                                                       }
                                                                       __nf_ct_refresh_acct [nf_conntrack]() {
                                                                         nf_ct_acct_add [nf_conntrack]();
                                                                       }
                                                                     }
                                                                   }
                                                                 }
                                                               }
                                                               nf_nat_ipv4_pre_routing [nf_nat]() {
                                                                 nf_nat_inet_fn [nf_nat]();
                                                               }
                                                             }
                                                             __rcu_read_unlock();
                                                             br_nf_pre_routing_finish [br_netfilter]() {
                                                               skb_push();
                                                               br_nf_hook_thresh [br_netfilter]() {
                                                                 nf_hook_slow();
                                                                 br_handle_frame_finish [bridge]() {
                                                                   br_allowed_ingress [bridge]();
                                                                   nbp_switchdev_frame_mark [bridge]();
                                                                   br_fdb_update [bridge]() {
                                                                     fdb_find_rcu [bridge]();
                                                                   }
                                                                   br_fdb_find_rcu [bridge]() {
                                                                     fdb_find_rcu [bridge]();
                                                                   }
                                                                   br_pass_frame_up [bridge]() {
                                                                     br_allowed_egress [bridge]();
                                                                     br_handle_vlan [bridge]();
                                                                     br_multicast_count [bridge]();
                                                                     netif_receive_skb() {
                                                                       skb_defer_rx_timestamp();
                                                                       __rcu_read_lock();
                                                                       __netif_receive_skb() {
                                                                         __netif_receive_skb_one_core() {
                                                                           __netif_receive_skb_core.constprop.0();
                                                                           ip_rcv() {
                                                                             ip_rcv_core();
                                                                             __rcu_read_lock();
                                                                             nf_hook_slow() {
                                                                               ip_sabotage_in [br_netfilter]() {
                                                                                 ip_rcv_finish() {
                                                                                   ip_rcv_finish_core.constprop.0() {
                                                                                     tcp_v4_early_demux() {
                                                                                       __inet_lookup_established() {
                                                                                         inet_ehashfn();
                                                                                       }
                                                                                     }
                                                                                     ip_route_input_noref() {
                                                                                       __rcu_read_lock();
                                                                                       ip_route_input_slow() {
                                                                                         make_kuid() {
                                                                                           map_id_range_down();
                                                                                         }
                                                                                         __rcu_read_lock();
                                                                                         fib_table_lookup() {
                                                                                           fib_lookup_good_nhc();
                                                                                         }
                                                                                         __rcu_read_unlock();
                                                                                         fib_validate_source() {
                                                                                           __fib_validate_source() {
                                                                                             l3mdev_master_ifindex_rcu();
                                                                                             make_kuid() {
                                                                                               map_id_range_down();
                                                                                             }
                                                                                             __rcu_read_lock();
                                                                                             fib_table_lookup() {
                                                                                               fib_lookup_good_nhc();
                                                                                             }
                                                                                             __rcu_read_unlock();
                                                                                             fib_info_nh_uses_dev();
                                                                                           }
                                                                                         }
                                                                                       }
                                                                                       __rcu_read_unlock();
                                                                                     }
                                                                                   }
                                                                                   ip_local_deliver() {
                                                                                     __rcu_read_lock();
                                                                                     nf_hook_slow() {
                                                                                       nft_do_chain_ipv4 [nf_tables]() {
                                                                                         nft_do_chain [nf_tables]() {
                                                                                           expr_call_ops_eval [nf_tables]() {
                                                                                             nft_counter_eval [nf_tables]() {
                                                                                               __local_bh_enable_ip();
                                                                                             }
                                                                                           }
                                                                                           expr_call_ops_eval [nf_tables]() {
                                                                                             nft_immediate_eval [nf_tables]();
                                                                                           }
                                                                                           expr_call_ops_eval [nf_tables]() {
                                                                                             nft_meta_get_eval [nf_tables]();
                                                                                           }
                                                                                           expr_call_ops_eval [nf_tables]() {
                                                                                             nft_meta_get_eval [nf_tables]();
                                                                                           }
                                                                                           expr_call_ops_eval [nf_tables]() {
                                                                                             nft_meta_get_eval [nf_tables]();
                                                                                           }
                                                                                           expr_call_ops_eval [nf_tables]() {
                                                                                             nft_meta_get_eval [nf_tables]();
                                                                                           }
                                                                                         }
                                                                                       }
                                                                                       nf_nat_ipv4_local_in [nf_nat]() {
                                                                                         nf_nat_inet_fn [nf_nat]();
                                                                                       }
                                                                                       nf_confirm [nf_conntrack]();
                                                                                     }
                                                                                     __rcu_read_unlock();
                                                                                     ip_local_deliver_finish() {
                                                                                       __rcu_read_lock();
                                                                                       ip_protocol_deliver_rcu() {
                                                                                         raw_local_deliver() {
                                                                                           raw_v4_input() {
                                                                                             __rcu_read_lock();
                                                                                             __rcu_read_unlock();
                                                                                           }
                                                                                         }
                                                                                         tcp_v4_rcv() {
                                                                                           tcp_inbound_md5_hash() {
                                                                                             tcp_parse_md5sig_option();
                                                                                           }
                                                                                           tcp_filter() {
                                                                                             sk_filter_trim_cap() {
                                                                                               security_sock_rcv_skb() {
                                                                                                 apparmor_socket_sock_rcv_skb();
                                                                                               }
                                                                                               __rcu_read_lock();
                                                                                               __rcu_read_unlock();
                                                                                             }
                                                                                           }
                                                                                           tcp_v4_fill_cb();
                                                                                           _raw_spin_lock();
                                                                                           tcp_v4_do_rcv() {
                                                                                             tcp_rcv_established() {
                                                                                               tcp_mstamp_refresh() {
                                                                                                 ktime_get();
                                                                                               }
                                                                                               inet_sk_rx_dst_set();
                                                                                               tcp_ack() {
                                                                                                 ktime_get_seconds();
                                                                                               }
                                                                                               tcp_urg();
                                                                                               tcp_data_queue() {
                                                                                                 sk_forced_mem_schedule() {
                                                                                                   mem_cgroup_charge_skmem();
                                                                                                 }
                                                                                                 tcp_queue_rcv();
                                                                                                 tcp_event_data_recv();
                                                                                                 tcp_data_ready() {
                                                                                                   sock_def_readable();
                                                                                                 }
                                                                                               }
                                                                                               tcp_check_space();
                                                                                               __tcp_ack_snd_check() {
                                                                                                 tcp_send_ack() {
                                                                                                   __tcp_send_ack.part.0();
                                                                                                 }
                                                                                               }
                                                                                             }
                                                                                           }
                                                                                           _raw_spin_unlock();
                                                                                         }
                                                                                       }
                                                                                       __rcu_read_unlock();
                                                                                     }
                                                                                   }
                                                                                 }
                                                                               }
                                                                             }
                                                                             __rcu_read_unlock();
                                                                           }
                                                                         }
                                                                       }
                                                                       __rcu_read_unlock();
                                                                     }
                                                                   }
                                                                 }
                                                               }
                                                             }
                                                           }
                                                         }
                                                       }
                                                     }
                                                   }
                                                   __rcu_read_unlock();
                                                   _raw_spin_lock_irq();
                                                   _raw_spin_unlock_irq();
                                                   __rcu_read_lock();
                                                   __netif_receive_skb() {
                                                     __netif_receive_skb_one_core() {
                                                       __netif_receive_skb_core.constprop.0();
                                                       ip_rcv() {
                                                         ip_rcv_core() {
                                                           __sock_wfree();
                                                         }
                                                         __rcu_read_lock();
                                                         __rcu_read_unlock();
                                                         ip_rcv_finish_core.constprop.0() {
                                                           tcp_v4_early_demux() {
                                                             __inet_lookup_established() {
                                                               inet_ehashfn();
                                                             }
                                                             ipv4_dst_check();
                                                           }
                                                         }
                                                         ip_local_deliver() {
                                                           __rcu_read_lock();
                                                           __rcu_read_unlock();
                                                           ip_local_deliver_finish() {
                                                             __rcu_read_lock();
                                                             ip_protocol_deliver_rcu() {
                                                               raw_local_deliver() {
                                                                 raw_v4_input() {
                                                                   __rcu_read_lock();
                                                                   __rcu_read_unlock();
                                                                 }
                                                               }
                                                               tcp_v4_rcv() {
                                                                 tcp_inbound_md5_hash() {
                                                                   tcp_parse_md5sig_option();
                                                                 }
                                                                 tcp_filter() {
                                                                   sk_filter_trim_cap() {
                                                                     security_sock_rcv_skb() {
                                                                       apparmor_socket_sock_rcv_skb();
                                                                     }
                                                                     __rcu_read_lock();
                                                                     __rcu_read_unlock();
                                                                   }
                                                                 }
                                                                 tcp_v4_fill_cb();
                                                                 _raw_spin_lock();
                                                                 tcp_add_backlog() {
                                                                   skb_condense();
                                                                 }
                                                                 _raw_spin_unlock();
                                                               }
                                                             }
                                                             __rcu_read_unlock();
                                                           }
                                                         }
                                                       }
                                                     }
                                                   }
                                                   __rcu_read_unlock();
                                                   _raw_spin_lock_irq();
                                                   _raw_spin_unlock_irq();
                                                 }
                                               }
                                             }
                                           }
                                         }
                                       }
                                     }
                                   }
                                 }
                               }
                             }
                             __rcu_read_unlock();
                           }
                         }
                         tcp_update_skb_after_send();
                         tcp_rate_skb_sent();
                       }
                       tcp_event_new_data_sent() {
                         tcp_rbtree_insert();
                         tcp_rearm_rto() {
                           sk_reset_timer() {
                             mod_timer() {
                               lock_timer_base() {
                                 _raw_spin_lock_irqsave();
                               }
                               detach_if_pending();
                               get_nohz_timer_target();
                               _raw_spin_unlock();
                               _raw_spin_lock();
                               calc_wheel_index();
                               enqueue_timer();
                               _raw_spin_unlock_irqrestore();
                             }
                           }
                         }
                         tcp_check_space();
                       }
                       tcp_chrono_stop();
                       tcp_cwnd_validate();
                       tcp_schedule_loss_probe.part.0() {
                         __usecs_to_jiffies();
                         jiffies_to_usecs();
                         __usecs_to_jiffies();
                         sk_reset_timer() {
                           mod_timer();
                         }
                       }
                     }
                   }
                 }
               }
               release_sock() {
                 _raw_spin_lock_bh();
                 __release_sock() {
                   _raw_spin_unlock_bh() {
                     __local_bh_enable_ip();
                   }
                   tcp_v4_do_rcv() {
                     ipv4_dst_check();
                     tcp_rcv_established() {
                       tcp_mstamp_refresh() {
                         ktime_get();
                       }
                       ktime_get_seconds();
                       tcp_ack() {
                         tcp_clean_rtx_queue.constprop.0() {
                           tcp_rack_advance();
                           tcp_rate_skb_delivered();
                           tcp_ack_tstamp();
                           __sk_mem_reclaim() {
                             __sk_mem_reduce_allocated() {
                               mem_cgroup_uncharge_skmem() {
                                 __mod_memcg_state() {
                                   cgroup_rstat_updated();
                                 }
                                 refill_stock() {
                                   __refill_stock() {
                                     drain_stock() {
                                       page_counter_uncharge() {
                                         page_counter_cancel() {
                                           propagate_protected_usage();
                                         }
                                         page_counter_cancel() {
                                           propagate_protected_usage();
                                         }
                                         page_counter_cancel() {
                                           propagate_protected_usage();
                                         }
                                         page_counter_cancel() {
                                           propagate_protected_usage();
                                         }
                                         page_counter_cancel() {
                                           propagate_protected_usage();
                                         }
                                         page_counter_cancel() {
                                           propagate_protected_usage();
                                         }
                                         page_counter_cancel() {
                                           propagate_protected_usage();
                                         }
                                       }
                                       __rcu_read_lock();
                                       __rcu_read_unlock();
                                     }
                                     __rcu_read_lock();
                                     __rcu_read_unlock();
                                   }
                                 }
                               }
                             }
                           }
                           __kfree_skb() {
                             skb_release_head_state();
                             skb_release_data();
                             kfree_skbmem();
                           }
                           tcp_chrono_stop();
                           tcp_ack_update_rtt() {
                             tcp_rtt_estimator() {
                               jiffies_to_usecs();
                             }
                             __usecs_to_jiffies();
                           }
                           cubictcp_acked();
                         }
                         tcp_rack_update_reo_wnd();
                         tcp_schedule_loss_probe() {
                           tcp_schedule_loss_probe.part.0();
                         }
                         tcp_rearm_rto();
                         tcp_newly_delivered();
                         tcp_rate_gen();
                         cubictcp_cong_avoid();
                         tcp_update_pacing_rate();
                         tcp_xmit_recovery();
                       }
                       __kfree_skb() {
                         skb_release_head_state();
                         skb_release_data() {
                           skb_free_head() {
                             kfree() {
                               __kmem_cache_free();
                             }
                           }
                         }
                         kfree_skbmem() {
                           kmem_cache_free();
                         }
                       }
                       tcp_check_space();
                     }
                   }
                   __cond_resched();
                   _raw_spin_lock_bh();
                 }
                 tcp_release_cb();
                 _raw_spin_unlock_bh() {
                   __local_bh_enable_ip();
                 }
               }
             }
           }
         }
       }
     }
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_epoll_wait() {
   ktime_get_ts64();
   timespec64_add_safe();
   do_epoll_wait() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     ep_poll() {
       select_estimate_accuracy() {
         ktime_get_ts64();
         set_normalized_timespec64();
       }
       ep_send_events() {
         mutex_lock() {
           __cond_resched();
         }
         _raw_write_lock_irq();
         _raw_write_unlock_irq();
         ep_item_poll.isra.0() {
           sock_poll() {
             tcp_poll() {
               tcp_stream_memory_free();
             }
           }
         }
         ep_done_scan() {
           _raw_write_lock_irq();
           __pm_relax();
           _raw_write_unlock_irq();
         }
         mutex_unlock();
       }
       _raw_write_lock_irq();
       _raw_write_unlock_irq();
       schedule_hrtimeout_range() {
         schedule_hrtimeout_range_clock() {
           hrtimer_init_sleeper() {
             __hrtimer_init();
           }
           hrtimer_start_range_ns() {
             _raw_spin_lock_irqsave();
             __hrtimer_start_range_ns() {
               get_nohz_timer_target();
               enqueue_hrtimer();
             }
             _raw_spin_unlock_irqrestore();
           }
           schedule() {
             rcu_note_context_switch();
             raw_spin_rq_lock_nested() {
               _raw_spin_lock();
             }
             update_rq_clock();
             dequeue_task_fair() {
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                   cpuacct_charge();
                   __cgroup_account_cputime() {
                     cgroup_rstat_updated();
                   }
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group();
                 update_min_vruntime();
               }
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group() {
                   reweight_entity();
                 }
                 update_min_vruntime();
               }
               dequeue_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 clear_buddies();
                 update_cfs_group() {
                   reweight_entity();
                 }
                 update_min_vruntime();
               }
               hrtick_update();
             }
             pick_next_task() {
               pick_next_task_fair() {
                 check_cfs_rq_runtime();
                 pick_next_entity();
                 pick_next_entity();
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 set_next_entity() {
                   clear_buddies();
                   __update_load_avg_se();
                   __update_load_avg_cfs_rq();
                 }
                 put_prev_entity() {
                   check_cfs_rq_runtime();
                 }
                 set_next_entity() {
                   clear_buddies();
                   __update_load_avg_se();
                   __update_load_avg_cfs_rq();
                 }
               }
             }
             psi_task_switch() {
               psi_flags_change();
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_flags_change();
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
             }
             __traceiter_sched_switch() {
               _raw_spin_lock_irqsave();
               _raw_spin_unlock_irqrestore();
             }
             finish_task_switch.isra.0() {
               raw_spin_rq_unlock() {
                 _raw_spin_unlock();
               }
             }
           }
           hrtimer_active();
           hrtimer_try_to_cancel.part.0() {
             _raw_spin_lock_irqsave();
             __remove_hrtimer();
             _raw_spin_unlock_irqrestore();
           }
         }
       }
       ep_send_events() {
         mutex_lock() {
           __cond_resched();
         }
         _raw_write_lock_irq();
         _raw_write_unlock_irq();
         ep_item_poll.isra.0() {
           sock_poll() {
             tcp_poll() {
               tcp_stream_memory_free();
             }
           }
         }
         ep_done_scan() {
           _raw_write_lock_irq();
           __pm_relax();
           _raw_write_unlock_irq();
         }
         mutex_unlock();
       }
     }
     fput();
   } /* do_epoll_wait */
 } /* __x64_sys_epoll_wait */
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_read() {
   ksys_read() {
     __fdget_pos() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     vfs_read() {
       rw_verify_area() {
         security_file_permission() {
           apparmor_file_permission() {
             aa_file_perm() {
               __rcu_read_lock();
               aa_label_is_subset();
               __rcu_read_unlock();
             }
           }
         }
       }
       __get_task_ioprio();
       sock_read_iter() {
         sock_recvmsg() {
           security_socket_recvmsg() {
             apparmor_socket_recvmsg() {
               aa_sk_perm() {
                 __cond_resched();
                 aa_label_sk_perm.part.0() {
                   aa_label_next_confined();
                   aa_profile_af_perm() {
                     aa_apply_modes_to_perms();
                     aa_check_perms();
                   }
                   aa_label_next_confined();
                 }
               }
             }
           }
           inet_recvmsg() {
             tcp_recvmsg() {
               lock_sock_nested() {
                 __cond_resched();
                 _raw_spin_lock_bh();
                 _raw_spin_unlock_bh() {
                   __local_bh_enable_ip();
                 }
               }
               tcp_recvmsg_locked() {
                 sock_rfree() {
                   __sk_mem_reduce_allocated() {
                     mem_cgroup_uncharge_skmem() {
                       __mod_memcg_state() {
                         cgroup_rstat_updated();
                       }
                       refill_stock() {
                         __refill_stock() {
                           drain_stock() {
                             page_counter_uncharge() {
                               page_counter_cancel() {
                                 propagate_protected_usage();
                               }
                               page_counter_cancel() {
                                 propagate_protected_usage();
                               }
                               page_counter_cancel() {
                                 propagate_protected_usage();
                               }
                               page_counter_cancel() {
                                 propagate_protected_usage();
                               }
                               page_counter_cancel() {
                                 propagate_protected_usage();
                               }
                               page_counter_cancel() {
                                 propagate_protected_usage();
                               }
                             }
                             __rcu_read_lock();
                             __rcu_read_unlock();
                           }
                           __rcu_read_lock();
                           __rcu_read_unlock();
                         }
                       }
                     }
                   }
                 }
                 skb_attempt_defer_free() {
                   _raw_spin_lock_irqsave();
                   _raw_spin_unlock_irqrestore();
                 }
                 tcp_cleanup_rbuf() {
                   __tcp_cleanup_rbuf();
                 }
               }
               release_sock() {
                 _raw_spin_lock_bh();
                 tcp_release_cb();
                 _raw_spin_unlock_bh() {
                   __local_bh_enable_ip();
                 }
               }
             }
           }
         }
       }
     }
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_epoll_ctl() {
   do_epoll_ctl() {
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     __fdget() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     mutex_lock() {
       __cond_resched();
     }
     ep_remove() {
       __rcu_read_lock();
       remove_wait_queue() {
         _raw_spin_lock_irqsave();
         _raw_spin_unlock_irqrestore();
       }
       __rcu_read_unlock();
       kmem_cache_free() {
         obj_cgroup_uncharge() {
           refill_obj_stock() {
             drain_obj_stock() {
               __rcu_read_lock();
               __mod_memcg_lruvec_state() {
                 cgroup_rstat_updated();
               }
               __rcu_read_unlock();
             }
             __rcu_read_lock();
             __rcu_read_unlock();
             __rcu_read_lock();
             __rcu_read_unlock();
           }
         }
         mod_objcg_state();
         __rcu_read_lock();
         __rcu_read_unlock();
       }
       _raw_spin_lock();
       _raw_spin_unlock();
       kmem_cache_free() {
         obj_cgroup_uncharge() {
           refill_obj_stock();
         }
         mod_objcg_state();
         __rcu_read_lock();
         __rcu_read_unlock();
       }
       _raw_write_lock_irq();
       _raw_write_unlock_irq();
       wakeup_source_unregister();
       call_rcu() {
         __call_rcu_common.constprop.0() {
           rcu_segcblist_enqueue();
         }
       }
     }
     mutex_unlock();
     fput();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_close() {
   close_fd() {
     _raw_spin_lock();
     pick_file();
     _raw_spin_unlock();
     filp_close() {
       dnotify_flush();
       locks_remove_posix();
       fput() {
         task_work_add() {
           kick_process();
         }
       }
     }
   }
 }
 exit_to_user_mode_prepare() {
   exit_to_user_mode_loop() {
     task_work_run() {
       _raw_spin_lock_irq();
       _raw_spin_unlock_irq();
       ____fput() {
         __fput() {
           __cond_resched();
           locks_remove_file();
           ima_file_free();
           sock_close() {
             __sock_release() {
               down_write() {
                 __cond_resched();
               }
               inet_release() {
                 ip_mc_drop_socket();
                 tcp_close() {
                   lock_sock_nested() {
                     __cond_resched();
                     _raw_spin_lock_bh();
                     _raw_spin_unlock_bh() {
                       __local_bh_enable_ip();
                     }
                   }
                   __tcp_close() {
                     tcp_set_state() {
                       inet_sk_state_store();
                     }
                     tcp_send_fin() {
                       __alloc_skb() {
                         kmem_cache_alloc_node() {
                           __cond_resched();
                           should_failslab();
                         }
                         kmalloc_reserve() {
                           kmalloc_size_roundup() {
                             kmalloc_slab();
                           }
                           __kmalloc_node_track_caller() {
                             kmalloc_slab();
                             __kmem_cache_alloc_node() {
                               __cond_resched();
                               should_failslab();
                             }
                           }
                         }
                         __build_skb_around();
                       }
                       sk_forced_mem_schedule() {
                         mem_cgroup_charge_skmem() {
                           try_charge_memcg() {
                             consume_stock();
                           }
                           __mod_memcg_state() {
                             cgroup_rstat_updated();
                           }
                         }
                       }
                       tcp_current_mss() {
                         ipv4_mtu();
                         tcp_established_options();
                       }
                       __tcp_push_pending_frames() {
                         tcp_write_xmit() {
                           ktime_get();
                           tcp_mtu_probe();
                           tcp_tso_segs();
                           tcp_small_queue_check.isra.0();
                           __tcp_transmit_skb() {
                             skb_clone() {
                               __skb_clone() {
                                 __copy_skb_header();
                               }
                             }
                             tcp_established_options();
                             skb_push();
                             __tcp_select_window();
                             tcp_options_write();
                             bpf_skops_write_hdr_opt.isra.0();
                             tcp_v4_send_check();
                             ip_queue_xmit() {
                               __ip_queue_xmit() {
                                 __rcu_read_lock();
                                 __sk_dst_check() {
                                   ipv4_dst_check();
                                 }
                                 skb_push();
                                 ip_local_out() {
                                   __ip_local_out() {
                                     ip_send_check();
                                     __rcu_read_lock();
                                     __rcu_read_unlock();
                                   }
                                   ip_output() {
                                     __rcu_read_lock();
                                     nf_hook_slow() {
                                       apparmor_ip_postroute();
                                     }
                                     __rcu_read_unlock();
                                     ip_finish_output() {
                                       __ip_finish_output() {
                                         ip_finish_output2() {
                                           __dev_queue_xmit() {
                                             qdisc_pkt_len_init();
                                             netdev_core_pick_tx();
                                             validate_xmit_skb() {
                                               netif_skb_features() {
                                                 passthru_features_check();
                                                 skb_network_protocol();
                                               }
                                               skb_csum_hwoffload_help();
                                               validate_xmit_xfrm();
                                             }
                                             dev_hard_start_xmit() {
                                               veth_xmit [veth]() {
                                                 __rcu_read_lock();
                                                 skb_clone_tx_timestamp();
                                                 __dev_forward_skb() {
                                                   __dev_forward_skb2() {
                                                     skb_scrub_packet();
                                                     eth_type_trans();
                                                   }
                                                 }
                                                 __netif_rx() {
                                                   netif_rx_internal() {
                                                     enqueue_to_backlog() {
                                                       _raw_spin_lock_irqsave();
                                                       __raise_softirq_irqoff();
                                                       _raw_spin_unlock_irqrestore();
                                                     }
                                                   }
                                                 }
                                                 __rcu_read_unlock();
                                               }
                                             }
                                             __local_bh_enable_ip();
                                           }
                                           __local_bh_enable_ip() {
                                             do_softirq.part.0() {
                                               __do_softirq() {
                                                 net_rx_action() {
                                                   __usecs_to_jiffies();
                                                   _raw_spin_lock_irqsave();
                                                   _raw_spin_unlock_irqrestore();
                                                   napi_consume_skb() {
                                                     skb_release_head_state() {
                                                       __skb_ext_put() {
                                                         kmem_cache_free();
                                                       }
                                                     }
                                                     skb_release_data() {
                                                       skb_free_head() {
                                                         kfree() {
                                                           __kmem_cache_free();
                                                         }
                                                       }
                                                     }
                                                     kfree_skbmem() {
                                                       kmem_cache_free();
                                                     }
                                                   }
                                                   __napi_poll() {
                                                     process_backlog() {
                                                       _raw_spin_lock_irq();
                                                       _raw_spin_unlock_irq();
                                                       __rcu_read_lock();
                                                       __netif_receive_skb() {
                                                         __netif_receive_skb_one_core() {
                                                           __netif_receive_skb_core.constprop.0() {
                                                             br_handle_frame [bridge]() {
                                                               br_nf_pre_routing [br_netfilter]() {
                                                                 __rcu_read_lock();
                                                                 __rcu_read_unlock();
                                                                 __rcu_read_lock();
                                                                 __rcu_read_unlock();
                                                                 __rcu_read_lock();
                                                                 __rcu_read_unlock();
                                                                 skb_pull_rcsum();
                                                                 br_validate_ipv4 [br_netfilter]();
                                                                 skb_ext_add() {
                                                                   __skb_ext_alloc() {
                                                                     kmem_cache_alloc() {
                                                                       should_failslab();
                                                                     }
                                                                   }
                                                                 }
                                                                 setup_pre_routing [br_netfilter]() {
                                                                   brnf_get_logical_dev [br_netfilter]() {
                                                                     __rcu_read_lock();
                                                                     __rcu_read_unlock();
                                                                   }
                                                                   tcp_wfree() {
                                                                     sk_free();
                                                                   }
                                                                 }
                                                                 __rcu_read_lock();
                                                                 nf_hook_slow() {
                                                                   ip_sabotage_in [br_netfilter]();
                                                                   ipv4_conntrack_defrag [nf_defrag_ipv4]();
                                                                   ipv4_conntrack_in [nf_conntrack]() {
                                                                     nf_conntrack_in [nf_conntrack]() {
                                                                       get_l4proto [nf_conntrack]();
                                                                       resolve_normal_ct [nf_conntrack]() {
                                                                         nf_ct_get_tuple [nf_conntrack]();
                                                                         hash_conntrack_raw [nf_conntrack]();
                                                                         __nf_conntrack_find_get [nf_conntrack]() {
                                                                           __rcu_read_lock();
                                                                           __rcu_read_unlock();
                                                                         }
                                                                       }
                                                                       nf_conntrack_handle_packet [nf_conntrack]() {
                                                                         nf_conntrack_tcp_packet [nf_conntrack]() {
                                                                           nf_checksum() {
                                                                             nf_ip_checksum();
                                                                           }
                                                                           _raw_spin_lock_bh();
                                                                           tcp_in_window [nf_conntrack]() {
                                                                             nf_ct_seq_offset [nf_conntrack]();
                                                                           }
                                                                           _raw_spin_unlock_bh() {
                                                                             __local_bh_enable_ip();
                                                                           }
                                                                           __nf_ct_refresh_acct [nf_conntrack]() {
                                                                             nf_ct_acct_add [nf_conntrack]();
                                                                           }
                                                                         }
                                                                       }
                                                                     }
                                                                   }
                                                                   nf_nat_ipv4_pre_routing [nf_nat]() {
                                                                     nf_nat_inet_fn [nf_nat]();
                                                                   }
                                                                 }
                                                                 __rcu_read_unlock();
                                                                 br_nf_pre_routing_finish [br_netfilter]() {
                                                                   skb_push();
                                                                   br_nf_hook_thresh [br_netfilter]() {
                                                                     nf_hook_slow();
                                                                     br_handle_frame_finish [bridge]() {
                                                                       br_allowed_ingress [bridge]();
                                                                       nbp_switchdev_frame_mark [bridge]();
                                                                       br_fdb_update [bridge]() {
                                                                         fdb_find_rcu [bridge]();
                                                                       }
                                                                       br_fdb_find_rcu [bridge]() {
                                                                         fdb_find_rcu [bridge]();
                                                                       }
                                                                       br_pass_frame_up [bridge]() {
                                                                         br_allowed_egress [bridge]();
                                                                         br_handle_vlan [bridge]();
                                                                         br_multicast_count [bridge]();
                                                                         netif_receive_skb() {
                                                                           skb_defer_rx_timestamp();
                                                                           __rcu_read_lock();
                                                                           __netif_receive_skb() {
                                                                             __netif_receive_skb_one_core() {
                                                                               __netif_receive_skb_core.constprop.0();
                                                                               ip_rcv() {
                                                                                 ip_rcv_core();
                                                                                 __rcu_read_lock();
                                                                                 nf_hook_slow() {
                                                                                   ip_sabotage_in [br_netfilter]() {
                                                                                     ip_rcv_finish() {
                                                                                       ip_rcv_finish_core.constprop.0() {
                                                                                         tcp_v4_early_demux() {
                                                                                           __inet_lookup_established() {
                                                                                             inet_ehashfn();
                                                                                           }
                                                                                           ipv4_dst_check();
                                                                                         }
                                                                                       }
                                                                                       ip_local_deliver() {
                                                                                         __rcu_read_lock();
                                                                                         nf_hook_slow() {
                                                                                           nft_do_chain_ipv4 [nf_tables]() {
                                                                                             nft_do_chain [nf_tables]() {
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_counter_eval [nf_tables]() {
                                                                                                   __local_bh_enable_ip();
                                                                                                 }
                                                                                               }
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_immediate_eval [nf_tables]();
                                                                                               }
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_meta_get_eval [nf_tables]();
                                                                                               }
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_meta_get_eval [nf_tables]();
                                                                                               }
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_meta_get_eval [nf_tables]();
                                                                                               }
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_meta_get_eval [nf_tables]();
                                                                                               }
                                                                                             }
                                                                                           }
                                                                                           nf_nat_ipv4_local_in [nf_nat]() {
                                                                                             nf_nat_inet_fn [nf_nat]();
                                                                                           }
                                                                                           nf_confirm [nf_conntrack]();
                                                                                         }
                                                                                         __rcu_read_unlock();
                                                                                         ip_local_deliver_finish() {
                                                                                           __rcu_read_lock();
                                                                                           ip_protocol_deliver_rcu() {
                                                                                             raw_local_deliver() {
                                                                                               raw_v4_input() {
                                                                                                 __rcu_read_lock();
                                                                                                 __rcu_read_unlock();
                                                                                               }
                                                                                             }
                                                                                             tcp_v4_rcv() {
                                                                                               tcp_inbound_md5_hash() {
                                                                                                 tcp_parse_md5sig_option();
                                                                                               }
                                                                                               tcp_filter() {
                                                                                                 sk_filter_trim_cap() {
                                                                                                   security_sock_rcv_skb();
                                                                                                   __rcu_read_lock();
                                                                                                   __rcu_read_unlock();
                                                                                                 }
                                                                                               }
                                                                                               tcp_v4_fill_cb();
                                                                                               _raw_spin_lock();
                                                                                               tcp_v4_do_rcv() {
                                                                                                 tcp_rcv_state_process() {
                                                                                                   tcp_mstamp_refresh();
                                                                                                   tcp_validate_incoming();
                                                                                                   tcp_ack();
                                                                                                   tcp_set_state();
                                                                                                   inet_csk_reset_keepalive_timer();
                                                                                                   tcp_urg();
                                                                                                   tcp_data_queue();
                                                                                                 }
                                                                                               }
                                                                                               _raw_spin_unlock();
                                                                                               sk_free();
                                                                                             }
                                                                                           }
                                                                                           __rcu_read_unlock();
                                                                                         }
                                                                                       }
                                                                                     }
                                                                                   }
                                                                                 }
                                                                                 __rcu_read_unlock();
                                                                               }
                                                                             }
                                                                           }
                                                                           __rcu_read_unlock();
                                                                         }
                                                                       }
                                                                     }
                                                                   }
                                                                 }
                                                               }
                                                             }
                                                           }
                                                         }
                                                       }
                                                       __rcu_read_unlock();
                                                       _raw_spin_lock_irq();
                                                       _raw_spin_unlock_irq();
                                                       __rcu_read_lock();
                                                       __netif_receive_skb() {
                                                         __netif_receive_skb_one_core() {
                                                           __netif_receive_skb_core.constprop.0();
                                                           ip_rcv() {
                                                             ip_rcv_core() {
                                                               __sock_wfree() {
                                                                 __sk_free() {
                                                                   netlink_has_listeners() {
                                                                     __rcu_read_lock();
                                                                     __rcu_read_unlock();
                                                                   }
                                                                   sk_destruct() {
                                                                     __sk_destruct() {
                                                                       inet_sock_destruct() {
                                                                         kfree();
                                                                         dst_release();
                                                                         dst_release();
                                                                       }
                                                                       bpf_sk_storage_free() {
                                                                         __rcu_read_lock();
                                                                         __rcu_read_unlock();
                                                                       }
                                                                       put_pid();
                                                                       cgroup_sk_free() {
                                                                         __rcu_read_lock();
                                                                         __rcu_read_unlock();
                                                                         __rcu_read_lock();
                                                                         __rcu_read_unlock();
                                                                       }
                                                                       mem_cgroup_sk_free() {
                                                                         __rcu_read_lock();
                                                                         __rcu_read_unlock();
                                                                       }
                                                                       security_sk_free() {
                                                                         apparmor_sk_free_security() {
                                                                           path_put() {
                                                                             dput();
                                                                             mntput();
                                                                           }
                                                                         }
                                                                         kfree() {
                                                                           __kmem_cache_free() {
                                                                             __slab_free();
                                                                           }
                                                                         }
                                                                       }
                                                                       kmem_cache_free() {
                                                                         obj_cgroup_uncharge() {
                                                                           refill_obj_stock() {
                                                                             drain_obj_stock() {
                                                                               __rcu_read_lock();
                                                                               __mod_memcg_lruvec_state() {
                                                                                 cgroup_rstat_updated();
                                                                               }
                                                                               __rcu_read_unlock();
                                                                             }
                                                                             __rcu_read_lock();
                                                                             __rcu_read_unlock();
                                                                             __rcu_read_lock();
                                                                             __rcu_read_unlock();
                                                                           }
                                                                         }
                                                                         mod_objcg_state();
                                                                         __rcu_read_lock();
                                                                         __rcu_read_unlock();
                                                                         __slab_free();
                                                                       }
                                                                       module_put();
                                                                     }
                                                                   }
                                                                 }
                                                               }
                                                             }
                                                             __rcu_read_lock();
                                                             __rcu_read_unlock();
                                                             ip_rcv_finish_core.constprop.0() {
                                                               tcp_v4_early_demux() {
                                                                 __inet_lookup_established() {
                                                                   inet_ehashfn();
                                                                 }
                                                                 ipv4_dst_check();
                                                               }
                                                             }
                                                             ip_local_deliver() {
                                                               __rcu_read_lock();
                                                               __rcu_read_unlock();
                                                               ip_local_deliver_finish() {
                                                                 __rcu_read_lock();
                                                                 ip_protocol_deliver_rcu() {
                                                                   raw_local_deliver() {
                                                                     raw_v4_input() {
                                                                       __rcu_read_lock();
                                                                       __rcu_read_unlock();
                                                                     }
                                                                   }
                                                                   tcp_v4_rcv() {
                                                                     tcp_inbound_md5_hash() {
                                                                       tcp_parse_md5sig_option();
                                                                     }
                                                                     tcp_filter() {
                                                                       sk_filter_trim_cap() {
                                                                         security_sock_rcv_skb() {
                                                                           apparmor_socket_sock_rcv_skb();
                                                                         }
                                                                         __rcu_read_lock();
                                                                         __rcu_read_unlock();
                                                                       }
                                                                     }
                                                                     tcp_v4_fill_cb();
                                                                     _raw_spin_lock();
                                                                     tcp_add_backlog() {
                                                                       skb_condense();
                                                                     }
                                                                     _raw_spin_unlock();
                                                                   }
                                                                 }
                                                                 __rcu_read_unlock();
                                                               }
                                                             }
                                                           }
                                                         }
                                                       }
                                                       __rcu_read_unlock();
                                                       _raw_spin_lock_irq();
                                                       _raw_spin_unlock_irq();
                                                     }
                                                   }
                                                 }
                                               }
                                             }
                                           }
                                         }
                                       }
                                     }
                                   }
                                 }
                                 __rcu_read_unlock();
                               }
                             }
                             tcp_update_skb_after_send();
                             tcp_rate_skb_sent();
                           }
                           tcp_event_new_data_sent() {
                             tcp_rbtree_insert();
                             tcp_rearm_rto() {
                               sk_reset_timer() {
                                 mod_timer() {
                                   lock_timer_base() {
                                     _raw_spin_lock_irqsave();
                                   }
                                   calc_wheel_index();
                                   detach_if_pending();
                                   get_nohz_timer_target();
                                   enqueue_timer();
                                   _raw_spin_unlock_irqrestore();
                                 }
                               }
                             }
                             tcp_check_space();
                           }
                           tcp_chrono_stop();
                           tcp_cwnd_validate();
                           tcp_schedule_loss_probe.part.0() {
                             __usecs_to_jiffies();
                             jiffies_to_usecs();
                             __usecs_to_jiffies();
                             sk_reset_timer() {
                               mod_timer();
                             }
                           }
                         }
                       }
                     }
                     sk_stream_wait_close();
                     _raw_write_lock_bh();
                     _raw_write_unlock_bh() {
                       __local_bh_enable_ip();
                     }
                     _raw_spin_lock();
                     __release_sock() {
                       _raw_spin_unlock_bh() {
                         __local_bh_enable_ip();
