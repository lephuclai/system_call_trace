 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
       migrate_disable();
       migrate_enable();
       migrate_disable();
       migrate_enable();
     }
   }
 }
 __x64_sys_futex() {
   do_futex() {
     futex_wait() {
       futex_setup_timer();
       futex_wait_setup() {
         get_futex_key();
         futex_q_lock() {
           futex_hash();
           _raw_spin_lock();
         }
         futex_get_value_locked();
       }
       futex_wait_queue() {
         __futex_queue();
         _raw_spin_unlock();
         schedule() {
           rcu_note_context_switch();
           raw_spin_rq_lock_nested() {
             _raw_spin_lock();
           }
           update_rq_clock();
           dequeue_task_fair() {
             dequeue_entity() {
               update_curr() {
                 update_min_vruntime();
                 cpuacct_charge();
                 __cgroup_account_cputime() {
                   cgroup_rstat_updated();
                 }
               }
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
               clear_buddies();
               update_cfs_group();
               update_min_vruntime();
             }
             set_next_buddy();
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
             update_cfs_group() {
               reweight_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
               }
             }
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
             update_cfs_group() {
               reweight_entity() {
                 update_curr() {
                   __calc_delta();
                   update_min_vruntime();
                 }
               }
             }
             hrtick_update();
           }
           pick_next_task() {
             pick_next_task_fair() {
               update_curr();
               check_cfs_rq_runtime();
               pick_next_entity();
               update_curr();
               check_cfs_rq_runtime();
               pick_next_entity();
               check_cfs_rq_runtime();
               pick_next_entity();
               put_prev_entity() {
                 check_cfs_rq_runtime();
               }
               set_next_entity() {
                 clear_buddies();
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
               }
             }
           }
           psi_task_switch() {
             psi_flags_change();
             psi_flags_change();
             psi_group_change() {
               record_times();
             }
             psi_group_change() {
               record_times();
             }
             psi_group_change() {
               record_times();
             }
           }
           __traceiter_sched_switch() {
             _raw_spin_lock_irqsave();
             _raw_spin_unlock_irqrestore();
           }
           switch_mm_irqs_off();
           save_fpregs_to_fpstate() {
             xfd_validate_state();
           }
           finish_task_switch.isra.0() {
             raw_spin_rq_unlock() {
               _raw_spin_unlock();
             }
           }
         } /* schedule */
       } /* futex_wait_queue */
       futex_unqueue();
     } /* futex_wait */
   } /* do_futex */
 } /* __x64_sys_futex */
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
       migrate_disable();
       migrate_enable();
       migrate_disable();
       migrate_enable();
     }
   }
 }
 __x64_sys_futex() {
   do_futex() {
     futex_wake() {
       get_futex_key();
       futex_hash();
       _raw_spin_lock();
       futex_wake_mark() {
         __futex_unqueue();
         wake_q_add_safe();
       }
       _raw_spin_unlock();
       wake_up_q() {
         try_to_wake_up() {
           _raw_spin_lock_irqsave();
           ttwu_queue_wakelist();
           raw_spin_rq_lock_nested() {
             _raw_spin_lock();
           }
           update_rq_clock();
           ttwu_do_activate() {
             psi_task_change() {
               psi_flags_change();
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
             }
             enqueue_task_fair() {
               enqueue_entity() {
                 update_curr() {
                   update_min_vruntime();
                   cpuacct_charge();
                   __cgroup_account_cputime() {
                     cgroup_rstat_updated();
                   }
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 update_cfs_group();
                 place_entity();
               }
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
               update_cfs_group() {
                 reweight_entity() {
                   update_curr() {
                     update_min_vruntime();
                   }
                 }
               }
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
               update_cfs_group() {
                 reweight_entity() {
                   update_curr() {
                     __calc_delta();
                     update_min_vruntime();
                   }
                 }
               }
               hrtick_update();
             }
             ttwu_do_wakeup() {
               check_preempt_curr() {
                 check_preempt_wakeup() {
                   update_curr();
                   set_next_buddy();
                   resched_curr();
                 }
               }
             }
           }
           raw_spin_rq_unlock() {
             _raw_spin_unlock();
           }
           _raw_spin_unlock_irqrestore();
         }
       }
     }
   }
 }
 exit_to_user_mode_prepare() {
   exit_to_user_mode_loop() {
     schedule() {
       rcu_note_context_switch();
       raw_spin_rq_lock_nested() {
         _raw_spin_lock();
       }
       update_rq_clock();
       pick_next_task() {
         pick_next_task_fair() {
           update_curr();
           check_cfs_rq_runtime();
           pick_next_entity();
           update_curr();
           check_cfs_rq_runtime();
           pick_next_entity();
           update_curr();
           check_cfs_rq_runtime();
           pick_next_entity();
           put_prev_entity() {
             update_curr();
             check_cfs_rq_runtime();
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
           }
           set_next_entity() {
             clear_buddies();
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
           }
         }
       }
       psi_task_switch() {
         psi_flags_change();
         psi_flags_change();
       }
       __traceiter_sched_switch() {
         _raw_spin_lock_irqsave();
         _raw_spin_unlock_irqrestore();
       }
       switch_mm_irqs_off();
       save_fpregs_to_fpstate() {
         xfd_validate_state();
       }
       finish_task_switch.isra.0() {
         raw_spin_rq_unlock() {
           _raw_spin_unlock();
         }
       }
     } /* schedule */
   } /* exit_to_user_mode_loop */
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 } /* exit_to_user_mode_prepare */
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
       migrate_disable();
       migrate_enable();
       migrate_disable();
       migrate_enable();
     }
   }
 }
 __x64_sys_futex() {
   do_futex() {
     futex_wake() {
       get_futex_key();
       futex_hash();
       _raw_spin_lock();
       futex_wake_mark() {
         __futex_unqueue();
         wake_q_add_safe();
       }
       _raw_spin_unlock();
       wake_up_q() {
         try_to_wake_up() {
           _raw_spin_lock_irqsave();
           ttwu_queue_wakelist();
           raw_spin_rq_lock_nested() {
             _raw_spin_lock();
           }
           update_rq_clock();
           ttwu_do_activate() {
             psi_task_change() {
               psi_flags_change();
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
             }
             enqueue_task_fair() {
               enqueue_entity() {
                 update_curr() {
                   update_min_vruntime();
                   cpuacct_charge();
                   __cgroup_account_cputime() {
                     cgroup_rstat_updated();
                   }
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 update_cfs_group();
                 place_entity();
               }
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
               update_cfs_group() {
                 reweight_entity() {
                   update_curr() {
                     update_min_vruntime();
                   }
                 }
               }
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
               update_cfs_group() {
                 reweight_entity() {
                   update_curr() {
                     __calc_delta();
                     update_min_vruntime();
                   }
                 }
               }
               hrtick_update();
             }
             ttwu_do_wakeup() {
               check_preempt_curr() {
                 check_preempt_wakeup() {
                   update_curr();
                   set_next_buddy();
                   resched_curr();
                 }
               }
             }
           }
           raw_spin_rq_unlock() {
             _raw_spin_unlock();
           }
           _raw_spin_unlock_irqrestore();
         }
       }
     }
   }
 }
 exit_to_user_mode_prepare() {
   exit_to_user_mode_loop() {
     schedule() {
       rcu_note_context_switch();
       raw_spin_rq_lock_nested() {
         _raw_spin_lock();
       }
       update_rq_clock();
       pick_next_task() {
         pick_next_task_fair() {
           update_curr();
           check_cfs_rq_runtime();
           pick_next_entity();
           update_curr();
           check_cfs_rq_runtime();
           pick_next_entity();
           update_curr();
           check_cfs_rq_runtime();
           pick_next_entity();
           put_prev_entity() {
             update_curr();
             check_cfs_rq_runtime();
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
           }
           set_next_entity() {
             clear_buddies();
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
           }
         }
       }
       psi_task_switch() {
         psi_flags_change();
         psi_flags_change();
       }
       __traceiter_sched_switch() {
         _raw_spin_lock_irqsave();
         _raw_spin_unlock_irqrestore();
       }
       switch_mm_irqs_off();
       save_fpregs_to_fpstate() {
         xfd_validate_state();
       }
       finish_task_switch.isra.0() {
         raw_spin_rq_unlock() {
           _raw_spin_unlock();
         }
       }
     } /* schedule */
   } /* exit_to_user_mode_loop */
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 } /* exit_to_user_mode_prepare */
 fixup_umip_exception() {
   insn_fetch_from_user();
   insn_decode_from_regs() {
     insn_init();
     insn_get_code_seg_params() {
       get_desc();
     }
     insn_get_length() {
       insn_get_displacement() {
         insn_get_sib() {
           insn_get_modrm() {
             insn_get_prefixes.part.0() {
               inat_get_opcode_attribute();
               inat_get_opcode_attribute();
               inat_get_opcode_attribute();
             }
             insn_get_opcode.part.0() {
               inat_get_opcode_attribute();
             }
           }
         }
       }
       insn_get_immediate.part.0();
     }
   }
   insn_get_modrm();
 }
 fixup_vdso_exception();
 unhandled_signal();
 force_sig() {
   force_sig_info_to_task() {
     _raw_spin_lock_irqsave();
     send_signal_locked() {
       siginfo_layout();
       __rcu_read_lock();
       __rcu_read_lock();
       __rcu_read_unlock();
       __rcu_read_unlock();
       task_active_pid_ns();
       __task_pid_nr_ns() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
       __send_signal_locked() {
         prepare_signal();
         __sigqueue_alloc() {
           __rcu_read_lock();
           __rcu_read_lock();
           __rcu_read_unlock();
           inc_rlimit_get_ucounts();
           __rcu_read_unlock();
           kmem_cache_alloc() {
             should_failslab();
             __rcu_read_lock();
             __get_obj_cgroup_from_memcg() {
               __rcu_read_lock();
               __rcu_read_unlock();
             }
             __rcu_read_unlock();
             obj_cgroup_charge() {
               consume_obj_stock();
               __rcu_read_lock();
               __rcu_read_lock();
               __rcu_read_unlock();
               __rcu_read_unlock();
               try_charge_memcg() {
                 consume_stock();
                 page_counter_try_charge() {
                   propagate_protected_usage();
                   propagate_protected_usage();
                   propagate_protected_usage();
                 }
                 refill_stock() {
                   __refill_stock() {
                     drain_stock() {
                       page_counter_uncharge() {
                         page_counter_cancel() {
                           propagate_protected_usage();
                         }
                         page_counter_cancel() {
                           propagate_protected_usage();
                         }
                         page_counter_cancel() {
                           propagate_protected_usage();
                         }
                         page_counter_cancel() {
                           propagate_protected_usage();
                         }
                         page_counter_cancel() {
                           propagate_protected_usage();
                         }
                         page_counter_cancel() {
                           propagate_protected_usage();
                         }
                       }
                       __rcu_read_lock();
                       __rcu_read_unlock();
                     }
                     __rcu_read_lock();
                     __rcu_read_unlock();
                   }
                 }
               }
               memcg_account_kmem() {
                 __mod_memcg_state() {
                   cgroup_rstat_updated();
                 }
               }
               __rcu_read_lock();
               __rcu_read_unlock();
               refill_obj_stock() {
                 drain_obj_stock() {
                   __rcu_read_lock();
                   __mod_memcg_lruvec_state() {
                     cgroup_rstat_updated();
                   }
                   __rcu_read_unlock();
                 }
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 obj_cgroup_uncharge_pages() {
                   __rcu_read_lock();
                   __rcu_read_lock();
                   __rcu_read_unlock();
                   __rcu_read_unlock();
                   memcg_account_kmem() {
                     __mod_memcg_state() {
                       cgroup_rstat_updated();
                     }
                   }
                   refill_stock() {
                     __refill_stock();
                   }
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
               }
             }
             __rcu_read_lock();
             __rcu_read_unlock();
             mod_objcg_state();
             __rcu_read_lock();
             __rcu_read_unlock();
           }
         }
         complete_signal() {
           wake_up_state() {
             try_to_wake_up();
           }
           kick_process();
         }
       }
     }
     _raw_spin_unlock_irqrestore();
   }
 }
 exit_to_user_mode_prepare() {
   exit_to_user_mode_loop() {
     schedule() {
       rcu_note_context_switch();
       raw_spin_rq_lock_nested() {
         _raw_spin_lock();
       }
       update_rq_clock();
       pick_next_task() {
         pick_next_task_fair() {
           update_curr();
           check_cfs_rq_runtime();
           pick_next_entity();
           update_curr();
           check_cfs_rq_runtime();
           pick_next_entity();
           update_curr();
           check_cfs_rq_runtime();
           pick_next_entity();
           put_prev_entity() {
             update_curr();
             check_cfs_rq_runtime();
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
           }
           set_next_entity() {
             clear_buddies();
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
           }
         }
       }
       psi_task_switch() {
         psi_flags_change();
         psi_flags_change();
       }
       __traceiter_sched_switch() {
         _raw_spin_lock_irqsave();
         _raw_spin_unlock_irqrestore();
       }
       switch_mm_irqs_off();
       save_fpregs_to_fpstate() {
         xfd_validate_state();
       }
       finish_task_switch.isra.0() {
         raw_spin_rq_unlock() {
           _raw_spin_unlock();
         }
       }
     } /* schedule */
     arch_do_signal_or_restart() {
       get_signal() {
         uprobe_deny_signal();
         __cond_resched();
         _raw_spin_lock_irq();
         recalc_sigpending();
         dec_rlimit_put_ucounts() {
           do_dec_rlimit_put_ucounts() {
             put_ucounts();
           }
         }
         kmem_cache_free() {
           obj_cgroup_uncharge() {
             refill_obj_stock() {
               drain_obj_stock() {
                 __rcu_read_lock();
                 __mod_memcg_lruvec_state() {
                   cgroup_rstat_updated();
                 }
                 __rcu_read_unlock();
               }
               __rcu_read_lock();
               __rcu_read_unlock();
               __rcu_read_lock();
               __rcu_read_unlock();
             }
           }
           mod_objcg_state();
           __rcu_read_lock();
           __rcu_read_unlock();
         }
         _raw_spin_unlock_irq();
         siginfo_layout();
       }
       handle_signal() {
         x64_setup_rt_frame() {
           get_sigframe() {
             fpu__alloc_mathframe();
             copy_fpstate_to_sigframe() {
               restore_fpregs_from_fpstate() {
                 xfd_validate_state();
               }
               xfd_validate_state();
               __local_bh_enable_ip();
             }
           }
           copy_siginfo_to_user();
         }
         fpu__clear_user_states() {
           xfd_validate_state();
           fpregs_mark_activate();
           __local_bh_enable_ip();
         }
         signal_setup_done() {
           _raw_spin_lock_irq();
           __set_task_blocked() {
             recalc_sigpending();
           }
           _raw_spin_unlock_irq();
         }
       }
     }
   } /* exit_to_user_mode_loop */
   fpregs_assert_state_consistent();
 } /* exit_to_user_mode_prepare */
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
       migrate_disable();
       migrate_enable();
       migrate_disable();
       migrate_enable();
     }
   }
 }
 __x64_sys_ioctl() {
   __fdget() {
     __fget_light() {
       __rcu_read_lock();
       __rcu_read_unlock();
     }
   }
   security_file_ioctl();
   do_vfs_ioctl();
   kvm_vcpu_ioctl [kvm]() {
     mutex_lock_killable() {
       __cond_resched();
     }
     kvm_arch_vcpu_ioctl_run [kvm]() {
       vcpu_load [kvm]() {
         preempt_notifier_register();
         kvm_arch_vcpu_load [kvm]() {
           vmx_vcpu_load [kvm_intel]() {
             vmx_vcpu_load_vmcs [kvm_intel]();
             vmx_vcpu_pi_load [kvm_intel]();
           }
         }
       }
       kvm_sigset_activate [kvm]() {
         sigprocmask() {
           _raw_spin_lock_irq();
           __set_task_blocked() {
             recalc_sigpending();
           }
           _raw_spin_unlock_irq();
         }
       }
       fpu_swap_kvm_fpstate() {
         save_fpregs_to_fpstate() {
           xfd_validate_state();
         }
         restore_fpregs_from_fpstate() {
           xfd_validate_state();
         }
         fpregs_mark_activate();
         __local_bh_enable_ip();
       }
       __srcu_read_lock();
       vmx_vcpu_pre_run [kvm_intel]() {
         vmx_emulation_required_with_pending_exception [kvm_intel]();
       }
       vcpu_run [kvm]() {
         vcpu_enter_guest [kvm]() {
           kvm_dirty_ring_check_request [kvm]();
           kvm_service_local_tlb_flush_requests [kvm]();
           record_steal_time [kvm]();
           vmx_prepare_switch_to_guest [kvm_intel]() {
             kvm_set_user_return_msr [kvm]() {
               user_return_notifier_register();
             }
             kvm_set_user_return_msr [kvm]();
             kvm_set_user_return_msr [kvm]();
             kvm_set_user_return_msr [kvm]();
             current_save_fsgs();
             vmx_set_host_fs_gs [kvm_intel]();
           }
           __srcu_read_unlock();
           fpregs_assert_state_consistent();
           vmx_vcpu_run [kvm_intel]() {
             __get_current_cr3_fast();
             kvm_load_guest_xsave_state [kvm]() {
               kvm_load_guest_xsave_state.part.0 [kvm]();
             }
             perf_guest_get_msrs() {
               intel_guest_get_msrs();
             }
             clear_atomic_switch_msr [kvm_intel]();
             vmx_passthrough_lbr_msrs [kvm_intel]();
             vmx_update_hv_timer [kvm_intel]();
             kvm_wait_lapic_expire [kvm]();
             __vmx_vcpu_run_flags [kvm_intel]();
             rcu_note_context_switch();
             kvm_load_host_xsave_state [kvm]() {
               kvm_load_host_xsave_state.part.0 [kvm]();
             }
             vmx_recover_nmi_blocking [kvm_intel]();
             __vmx_complete_interrupts [kvm_intel]();
           }
           vmx_handle_exit_irqoff [kvm_intel]() {
             irq_enter_rcu();
             idle_cpu();
           }
           __srcu_read_lock();
           vmx_handle_exit [kvm_intel]() {
             __vmx_handle_exit [kvm_intel]() {
               vmx_flush_pml_buffer [kvm_intel]();
             }
           }
         }
         kvm_cpu_has_pending_timer [kvm]();
         vcpu_enter_guest [kvm]() {
           vmx_prepare_switch_to_guest [kvm_intel]();
           __srcu_read_unlock();
           fpregs_assert_state_consistent();
           vmx_vcpu_run [kvm_intel]() {
             __get_current_cr3_fast();
             kvm_load_guest_xsave_state [kvm]() {
               kvm_load_guest_xsave_state.part.0 [kvm]();
             }
             perf_guest_get_msrs() {
               intel_guest_get_msrs();
             }
             clear_atomic_switch_msr [kvm_intel]();
             vmx_passthrough_lbr_msrs [kvm_intel]();
             vmx_update_hv_timer [kvm_intel]();
             kvm_wait_lapic_expire [kvm]();
             __vmx_vcpu_run_flags [kvm_intel]();
             rcu_note_context_switch();
             kvm_load_host_xsave_state [kvm]() {
               kvm_load_host_xsave_state.part.0 [kvm]();
             }
             vmx_recover_nmi_blocking [kvm_intel]();
             __vmx_complete_interrupts [kvm_intel]();
           }
           vmx_handle_exit_irqoff [kvm_intel]();
           __srcu_read_lock();
           vmx_handle_exit [kvm_intel]() {
             __vmx_handle_exit [kvm_intel]() {
               vmx_flush_pml_buffer [kvm_intel]();
               kvm_emulate_halt [kvm]() {
                 vmx_get_rflags [kvm_intel]();
                 vmx_skip_emulated_instruction [kvm_intel]() {
                   vmx_update_emulated_instruction [kvm_intel]();
                   skip_emulated_instruction [kvm_intel]() {
                     vmx_cache_reg [kvm_intel]();
                     vmx_set_interrupt_shadow [kvm_intel]();
                   }
                 }
                 kvm_pmu_trigger_event [kvm]() {
                   intel_pmc_idx_to_pmc [kvm_intel]();
                   intel_pmc_is_enabled [kvm_intel]();
                   intel_pmc_idx_to_pmc [kvm_intel]();
                   intel_pmc_is_enabled [kvm_intel]();
                   intel_pmc_idx_to_pmc [kvm_intel]();
                   intel_pmc_is_enabled [kvm_intel]();
                   intel_pmc_idx_to_pmc [kvm_intel]();
                   intel_pmc_is_enabled [kvm_intel]();
                   intel_pmc_idx_to_pmc [kvm_intel]();
                   intel_pmc_is_enabled [kvm_intel]();
                   intel_pmc_idx_to_pmc [kvm_intel]();
                   intel_pmc_is_enabled [kvm_intel]();
                   intel_pmc_idx_to_pmc [kvm_intel]();
                   intel_pmc_is_enabled [kvm_intel]();
                   intel_pmc_idx_to_pmc [kvm_intel]();
                   intel_pmc_is_enabled [kvm_intel]();
                   intel_pmc_idx_to_pmc [kvm_intel]();
                   intel_pmc_is_enabled [kvm_intel]();
                   intel_pmc_idx_to_pmc [kvm_intel]();
                   intel_pmc_is_enabled [kvm_intel]();
                   intel_pmc_idx_to_pmc [kvm_intel]();
                   intel_pmc_is_enabled [kvm_intel]();
                   intel_pmc_idx_to_pmc [kvm_intel]();
                 }
               }
             }
           }
         }
       }
       kvm_put_guest_fpu [kvm]() {
         fpu_swap_kvm_fpstate() {
           save_fpregs_to_fpstate() {
             xfd_validate_state();
           }
           restore_fpregs_from_fpstate() {
             xfd_validate_state();
           }
           fpregs_mark_activate();
           __local_bh_enable_ip();
         }
       }
       vmx_get_if_flag [kvm_intel]() {
         vmx_get_rflags [kvm_intel]();
       }
       kvm_vcpu_ready_for_interrupt_injection [kvm]() {
         vmx_interrupt_allowed [kvm_intel]() {
           vmx_interrupt_blocked [kvm_intel]() {
             vmx_get_rflags [kvm_intel]();
           }
         }
       }
       __srcu_read_unlock();
       kvm_sigset_deactivate [kvm]() {
         sigprocmask() {
           _raw_spin_lock_irq();
           __set_task_blocked() {
             recalc_sigpending();
           }
           _raw_spin_unlock_irq();
         }
       }
       vcpu_put [kvm]() {
         kvm_arch_vcpu_put [kvm]() {
           vmx_vcpu_put [kvm_intel]() {
             vmx_vcpu_pi_put [kvm_intel]() {
               vmx_can_use_vtd_pi [kvm_intel]();
             }
             vmx_prepare_switch_to_host [kvm_intel]();
           }
         }
         preempt_notifier_unregister();
       }
     }
     mutex_unlock();
     kfree();
     kfree();
   }
   fput();
 }
 exit_to_user_mode_prepare() {
   fire_user_return_notifiers() {
     kvm_on_user_return [kvm]() {
       user_return_notifier_unregister();
     }
   }
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __do_sys_rt_sigreturn() {
   set_current_blocked() {
     _raw_spin_lock_irq();
     __set_task_blocked() {
       recalc_sigpending();
     }
     _raw_spin_unlock_irq();
   }
   restore_sigcontext() {
     fpu__restore_sig() {
       __fpu_restore_sig() {
         restore_fpregs_from_user() {
           xfd_validate_state();
           fpregs_mark_activate();
           __local_bh_enable_ip();
         }
       }
     }
   }
   restore_altstack() {
     do_sigaltstack.constprop.0();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
       migrate_disable();
       migrate_enable();
       migrate_disable();
       migrate_enable();
     }
   }
 }
 __x64_sys_futex() {
   do_futex() {
     futex_wake() {
       get_futex_key();
       futex_hash();
       _raw_spin_lock();
       futex_wake_mark() {
         __futex_unqueue();
         wake_q_add_safe();
       }
       _raw_spin_unlock();
       wake_up_q() {
         try_to_wake_up() {
           _raw_spin_lock_irqsave();
           ttwu_queue_wakelist();
           raw_spin_rq_lock_nested() {
             _raw_spin_lock();
           }
           update_rq_clock();
           ttwu_do_activate() {
             psi_task_change() {
               psi_flags_change();
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
             }
             enqueue_task_fair() {
               enqueue_entity() {
                 update_curr() {
                   update_min_vruntime();
                   cpuacct_charge();
                   __cgroup_account_cputime() {
                     cgroup_rstat_updated();
                   }
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 update_cfs_group();
                 place_entity();
               }
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
               update_cfs_group() {
                 reweight_entity() {
                   update_curr() {
                     update_min_vruntime();
                   }
                 }
               }
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
               update_cfs_group() {
                 reweight_entity() {
                   update_curr() {
                     __calc_delta();
                     update_min_vruntime();
                   }
                 }
               }
               hrtick_update();
             }
             ttwu_do_wakeup() {
               check_preempt_curr() {
                 check_preempt_wakeup() {
                   update_curr();
                   set_next_buddy();
                   resched_curr();
                 }
               }
             }
           }
           raw_spin_rq_unlock() {
             _raw_spin_unlock();
           }
           _raw_spin_unlock_irqrestore();
         }
       }
     }
   }
 }
 exit_to_user_mode_prepare() {
   exit_to_user_mode_loop() {
     schedule() {
       rcu_note_context_switch();
       raw_spin_rq_lock_nested() {
         _raw_spin_lock();
       }
       update_rq_clock();
       pick_next_task() {
         pick_next_task_fair() {
           update_curr();
           check_cfs_rq_runtime();
           pick_next_entity();
           update_curr();
           check_cfs_rq_runtime();
           pick_next_entity();
           update_curr();
           check_cfs_rq_runtime();
           pick_next_entity();
           put_prev_entity() {
             update_curr();
             check_cfs_rq_runtime();
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
           }
           set_next_entity() {
             clear_buddies();
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
           }
         }
       }
       psi_task_switch() {
         psi_flags_change();
         psi_flags_change();
       }
       __traceiter_sched_switch() {
         _raw_spin_lock_irqsave();
         _raw_spin_unlock_irqrestore();
       }
       switch_mm_irqs_off();
       save_fpregs_to_fpstate() {
         xfd_validate_state();
       }
       finish_task_switch.isra.0() {
         raw_spin_rq_unlock() {
           _raw_spin_unlock();
         }
       }
     } /* schedule */
   } /* exit_to_user_mode_loop */
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 } /* exit_to_user_mode_prepare */
 fixup_umip_exception() {
   insn_fetch_from_user();
   insn_decode_from_regs() {
     insn_init();
     insn_get_code_seg_params() {
       get_desc();
     }
     insn_get_length() {
       insn_get_displacement() {
         insn_get_sib() {
           insn_get_modrm() {
             insn_get_prefixes.part.0() {
               inat_get_opcode_attribute();
               inat_get_opcode_attribute();
               inat_get_opcode_attribute();
             }
             insn_get_opcode.part.0() {
               inat_get_opcode_attribute();
             }
           }
         }
       }
       insn_get_immediate.part.0();
     }
   }
   insn_get_modrm();
 }
 fixup_vdso_exception();
 unhandled_signal();
 force_sig() {
   force_sig_info_to_task() {
     _raw_spin_lock_irqsave();
     send_signal_locked() {
       siginfo_layout();
       __rcu_read_lock();
       __rcu_read_lock();
       __rcu_read_unlock();
       __rcu_read_unlock();
       task_active_pid_ns();
       __task_pid_nr_ns() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
       __send_signal_locked() {
         prepare_signal();
         __sigqueue_alloc() {
           __rcu_read_lock();
           __rcu_read_lock();
           __rcu_read_unlock();
           inc_rlimit_get_ucounts();
           __rcu_read_unlock();
           kmem_cache_alloc() {
             should_failslab();
             __rcu_read_lock();
             __get_obj_cgroup_from_memcg() {
               __rcu_read_lock();
               __rcu_read_unlock();
             }
             __rcu_read_unlock();
             obj_cgroup_charge() {
               consume_obj_stock();
             }
             __rcu_read_lock();
             __rcu_read_unlock();
             mod_objcg_state();
             __rcu_read_lock();
             __rcu_read_unlock();
           }
         }
         complete_signal() {
           wake_up_state() {
             try_to_wake_up();
           }
           kick_process();
         }
       }
     }
     _raw_spin_unlock_irqrestore();
   }
 }
 exit_to_user_mode_prepare() {
   exit_to_user_mode_loop() {
     arch_do_signal_or_restart() {
       get_signal() {
         uprobe_deny_signal();
         __cond_resched();
         _raw_spin_lock_irq();
         recalc_sigpending();
         dec_rlimit_put_ucounts() {
           do_dec_rlimit_put_ucounts() {
             put_ucounts();
           }
         }
         kmem_cache_free() {
           obj_cgroup_uncharge() {
             refill_obj_stock();
           }
           mod_objcg_state();
           __rcu_read_lock();
           __rcu_read_unlock();
         }
         _raw_spin_unlock_irq();
         siginfo_layout();
       }
       handle_signal() {
         x64_setup_rt_frame() {
           get_sigframe() {
             fpu__alloc_mathframe();
             copy_fpstate_to_sigframe() {
               xfd_validate_state();
               __local_bh_enable_ip();
             }
           }
           copy_siginfo_to_user();
         }
         fpu__clear_user_states() {
           xfd_validate_state();
           fpregs_mark_activate();
           __local_bh_enable_ip();
         }
         signal_setup_done() {
           _raw_spin_lock_irq();
           __set_task_blocked() {
             recalc_sigpending();
           }
           _raw_spin_unlock_irq();
         }
       }
     }
   }
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
       migrate_disable();
       migrate_enable();
       migrate_disable();
       migrate_enable();
     }
   }
 }
 irq_enter_rcu();
 idle_cpu();
 __x64_sys_ioctl() {
   __fdget() {
     __fget_light() {
       __rcu_read_lock();
       __rcu_read_unlock();
     }
   }
   security_file_ioctl();
   do_vfs_ioctl();
   kvm_vcpu_ioctl [kvm]() {
     mutex_lock_killable() {
       __cond_resched() {
         rcu_note_context_switch();
         raw_spin_rq_lock_nested() {
           _raw_spin_lock();
         }
         update_rq_clock();
         pick_next_task() {
           pick_next_task_fair() {
             update_curr();
             check_cfs_rq_runtime();
             pick_next_entity();
             update_curr();
             check_cfs_rq_runtime();
             pick_next_entity();
             update_curr();
             check_cfs_rq_runtime();
             pick_next_entity();
             put_prev_entity() {
               update_curr();
               check_cfs_rq_runtime();
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
             }
             set_next_entity() {
               clear_buddies();
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
             }
           }
         }
         psi_task_switch() {
           psi_flags_change();
           psi_flags_change();
         }
         __traceiter_sched_switch() {
           _raw_spin_lock_irqsave();
           _raw_spin_unlock_irqrestore();
         }
         switch_mm_irqs_off();
         save_fpregs_to_fpstate() {
           xfd_validate_state();
         }
         finish_task_switch.isra.0() {
           raw_spin_rq_unlock() {
             _raw_spin_unlock();
           }
         }
       } /* __cond_resched */
     } /* mutex_lock_killable */
     kvm_arch_vcpu_ioctl_run [kvm]() {
       vcpu_load [kvm]() {
         preempt_notifier_register();
         kvm_arch_vcpu_load [kvm]() {
           vmx_vcpu_load [kvm_intel]() {
             vmx_vcpu_load_vmcs [kvm_intel]();
             vmx_vcpu_pi_load [kvm_intel]();
           }
         }
       }
       kvm_sigset_activate [kvm]() {
         sigprocmask() {
           _raw_spin_lock_irq();
           __set_task_blocked() {
             recalc_sigpending();
           }
           _raw_spin_unlock_irq();
         }
       }
       fpu_swap_kvm_fpstate() {
         restore_fpregs_from_fpstate() {
           xfd_validate_state();
         }
         fpregs_mark_activate();
         __local_bh_enable_ip() {
           do_softirq.part.0() {
             __kthread_should_park();
           }
         }
       }
       __srcu_read_lock();
       vmx_vcpu_pre_run [kvm_intel]() {
         vmx_emulation_required_with_pending_exception [kvm_intel]();
       }
       vcpu_run [kvm]() {
         vcpu_enter_guest [kvm]() {
           kvm_dirty_ring_check_request [kvm]();
           kvm_service_local_tlb_flush_requests [kvm]();
           record_steal_time [kvm]();
           vmx_prepare_switch_to_guest [kvm_intel]() {
             kvm_set_user_return_msr [kvm]() {
               user_return_notifier_register();
             }
             kvm_set_user_return_msr [kvm]();
             kvm_set_user_return_msr [kvm]();
             kvm_set_user_return_msr [kvm]();
             current_save_fsgs();
             vmx_set_host_fs_gs [kvm_intel]();
           }
           __srcu_read_unlock();
           fpregs_assert_state_consistent();
           vmx_vcpu_run [kvm_intel]() {
             __get_current_cr3_fast();
             kvm_load_guest_xsave_state [kvm]() {
               kvm_load_guest_xsave_state.part.0 [kvm]();
             }
             perf_guest_get_msrs() {
               intel_guest_get_msrs();
             }
             clear_atomic_switch_msr [kvm_intel]();
             vmx_passthrough_lbr_msrs [kvm_intel]();
             vmx_update_hv_timer [kvm_intel]();
             kvm_wait_lapic_expire [kvm]();
             __vmx_vcpu_run_flags [kvm_intel]();
             rcu_note_context_switch();
             kvm_load_host_xsave_state [kvm]() {
               kvm_load_host_xsave_state.part.0 [kvm]();
             }
             vmx_recover_nmi_blocking [kvm_intel]();
             __vmx_complete_interrupts [kvm_intel]();
           }
           vmx_handle_exit_irqoff [kvm_intel]();
           __srcu_read_lock();
           vmx_handle_exit [kvm_intel]() {
             __vmx_handle_exit [kvm_intel]() {
               vmx_flush_pml_buffer [kvm_intel]();
               kvm_emulate_halt [kvm]() {
                 vmx_get_rflags [kvm_intel]();
                 vmx_skip_emulated_instruction [kvm_intel]() {
                   vmx_update_emulated_instruction [kvm_intel]();
                   skip_emulated_instruction [kvm_intel]() {
                     vmx_cache_reg [kvm_intel]();
                     vmx_set_interrupt_shadow [kvm_intel]();
                   }
                 }
                 kvm_pmu_trigger_event [kvm]() {
                   intel_pmc_idx_to_pmc [kvm_intel]();
                   intel_pmc_is_enabled [kvm_intel]();
                   intel_pmc_idx_to_pmc [kvm_intel]();
                   intel_pmc_is_enabled [kvm_intel]();
                   intel_pmc_idx_to_pmc [kvm_intel]();
                   intel_pmc_is_enabled [kvm_intel]();
                   intel_pmc_idx_to_pmc [kvm_intel]();
                   intel_pmc_is_enabled [kvm_intel]();
                   intel_pmc_idx_to_pmc [kvm_intel]();
                   intel_pmc_is_enabled [kvm_intel]();
                   intel_pmc_idx_to_pmc [kvm_intel]();
                   intel_pmc_is_enabled [kvm_intel]();
                   intel_pmc_idx_to_pmc [kvm_intel]();
                   intel_pmc_is_enabled [kvm_intel]();
                   intel_pmc_idx_to_pmc [kvm_intel]();
                   intel_pmc_is_enabled [kvm_intel]();
                   intel_pmc_idx_to_pmc [kvm_intel]();
                   intel_pmc_is_enabled [kvm_intel]();
                   intel_pmc_idx_to_pmc [kvm_intel]();
                   intel_pmc_is_enabled [kvm_intel]();
                   intel_pmc_idx_to_pmc [kvm_intel]();
                   intel_pmc_is_enabled [kvm_intel]();
                   intel_pmc_idx_to_pmc [kvm_intel]();
                 }
               }
             }
           }
         }
       }
       kvm_put_guest_fpu [kvm]() {
         fpu_swap_kvm_fpstate() {
           save_fpregs_to_fpstate() {
             xfd_validate_state();
           }
           restore_fpregs_from_fpstate() {
             xfd_validate_state();
           }
           fpregs_mark_activate();
           __local_bh_enable_ip() {
             do_softirq.part.0() {
               __kthread_should_park();
             }
           }
         }
       }
       vmx_get_if_flag [kvm_intel]() {
         vmx_get_rflags [kvm_intel]();
       }
       kvm_vcpu_ready_for_interrupt_injection [kvm]() {
         vmx_interrupt_allowed [kvm_intel]() {
           vmx_interrupt_blocked [kvm_intel]() {
             vmx_get_rflags [kvm_intel]();
           }
         }
       }
       __srcu_read_unlock();
       kvm_sigset_deactivate [kvm]() {
         sigprocmask() {
           _raw_spin_lock_irq();
           __set_task_blocked() {
             recalc_sigpending();
           }
           _raw_spin_unlock_irq();
         }
       }
       vcpu_put [kvm]() {
         kvm_arch_vcpu_put [kvm]() {
           vmx_vcpu_put [kvm_intel]() {
             vmx_vcpu_pi_put [kvm_intel]() {
               vmx_can_use_vtd_pi [kvm_intel]();
             }
             vmx_prepare_switch_to_host [kvm_intel]();
           }
         }
         preempt_notifier_unregister();
       }
     }
     mutex_unlock();
     kfree();
     kfree();
   } /* kvm_vcpu_ioctl [kvm] */
   fput();
 } /* __x64_sys_ioctl */
 exit_to_user_mode_prepare() {
   fire_user_return_notifiers() {
     kvm_on_user_return [kvm]() {
       user_return_notifier_unregister();
     }
   }
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __do_sys_rt_sigreturn() {
   set_current_blocked() {
     _raw_spin_lock_irq();
     __set_task_blocked() {
       recalc_sigpending();
     }
     _raw_spin_unlock_irq();
   }
   restore_sigcontext() {
     fpu__restore_sig() {
       __fpu_restore_sig() {
         restore_fpregs_from_user() {
           xfd_validate_state();
           fpregs_mark_activate();
           __local_bh_enable_ip() {
             do_softirq.part.0() {
               __kthread_should_park();
             }
           }
         }
       }
     }
   }
   restore_altstack() {
     do_sigaltstack.constprop.0();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
       migrate_disable();
       migrate_enable();
       migrate_disable();
       migrate_enable();
     }
   }
 }
 __x64_sys_futex() {
   do_futex() {
     futex_wait() {
       futex_setup_timer();
       futex_wait_setup() {
         get_futex_key();
         futex_q_lock() {
           futex_hash();
           _raw_spin_lock();
         }
         futex_get_value_locked();
       }
       futex_wait_queue() {
         __futex_queue();
         _raw_spin_unlock();
         schedule() {
           rcu_note_context_switch();
           raw_spin_rq_lock_nested() {
             _raw_spin_lock();
           }
           update_rq_clock();
           dequeue_task_fair() {
             dequeue_entity() {
               update_curr() {
                 update_min_vruntime();
                 cpuacct_charge();
                 __cgroup_account_cputime() {
                   cgroup_rstat_updated();
                 }
               }
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
               clear_buddies();
               update_cfs_group();
               update_min_vruntime();
             }
             dequeue_entity() {
               update_curr() {
                 update_min_vruntime();
               }
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
               clear_buddies();
               update_cfs_group() {
                 reweight_entity();
               }
               update_min_vruntime();
             }
             dequeue_entity() {
               update_curr() {
                 __calc_delta();
                 update_min_vruntime();
               }
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
               clear_buddies();
               update_cfs_group() {
                 reweight_entity();
               }
               update_min_vruntime();
             }
             hrtick_update();
           }
           pick_next_task() {
             pick_next_task_fair() {
               check_cfs_rq_runtime();
               pick_next_entity();
               put_prev_entity() {
                 check_cfs_rq_runtime();
               }
               put_prev_entity() {
                 check_cfs_rq_runtime();
               }
               put_prev_entity() {
                 check_cfs_rq_runtime();
               }
               set_next_entity() {
                 clear_buddies();
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
               }
             }
           }
           psi_task_switch() {
             psi_flags_change();
             psi_flags_change();
             psi_group_change() {
               record_times();
             }
             psi_group_change() {
               record_times();
             }
             psi_group_change() {
               record_times();
             }
           }
           __traceiter_sched_switch() {
             _raw_spin_lock_irqsave();
             _raw_spin_unlock_irqrestore();
           }
           finish_task_switch.isra.0() {
             raw_spin_rq_unlock() {
               _raw_spin_unlock();
             }
           }
         } /* schedule */
       } /* futex_wait_queue */
       futex_unqueue();
     } /* futex_wait */
   } /* do_futex */
 } /* __x64_sys_futex */
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
       migrate_disable();
       migrate_enable();
       migrate_disable();
       migrate_enable();
     }
   }
 }
 __x64_sys_futex() {
   do_futex() {
     futex_wait() {
       futex_setup_timer();
       futex_wait_setup() {
         get_futex_key();
         futex_q_lock() {
           futex_hash();
           _raw_spin_lock();
         }
         futex_get_value_locked();
       }
       futex_wait_queue() {
         __futex_queue();
         _raw_spin_unlock();
         schedule() {
           rcu_note_context_switch();
           raw_spin_rq_lock_nested() {
             _raw_spin_lock();
           }
           update_rq_clock();
           dequeue_task_fair() {
             dequeue_entity() {
               update_curr() {
                 update_min_vruntime();
                 cpuacct_charge();
                 __cgroup_account_cputime() {
                   cgroup_rstat_updated();
                 }
               }
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
               clear_buddies();
               update_cfs_group();
               update_min_vruntime();
             }
             dequeue_entity() {
               update_curr() {
                 update_min_vruntime();
               }
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
               clear_buddies();
               update_cfs_group() {
                 reweight_entity();
               }
               update_min_vruntime();
             }
             dequeue_entity() {
               update_curr() {
                 __calc_delta();
                 update_min_vruntime();
               }
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
               clear_buddies();
               update_cfs_group() {
                 reweight_entity();
               }
               update_min_vruntime();
             }
             hrtick_update();
           }
           pick_next_task() {
             pick_next_task_fair() {
               newidle_balance() {
                 __rcu_read_lock();
                 __msecs_to_jiffies();
                 __rcu_read_unlock();
               }
             }
             put_prev_task_fair() {
               put_prev_entity() {
                 check_cfs_rq_runtime();
               }
               put_prev_entity() {
                 check_cfs_rq_runtime();
               }
               put_prev_entity() {
                 check_cfs_rq_runtime();
               }
             }
             pick_next_task_idle() {
               __update_idle_core() {
                 __rcu_read_lock();
                 __rcu_read_unlock();
               }
             }
           }
           psi_task_switch() {
             psi_flags_change();
             psi_group_change() {
               record_times();
             }
             psi_group_change() {
               record_times();
             }
             psi_group_change() {
               record_times();
             }
           }
           __traceiter_sched_switch() {
             _raw_spin_lock_irqsave();
             _raw_spin_unlock_irqrestore();
           }
           finish_task_switch.isra.0() {
             raw_spin_rq_unlock() {
               _raw_spin_unlock();
             }
           }
         } /* schedule */
       } /* futex_wait_queue */
       futex_unqueue();
     } /* futex_wait */
   } /* do_futex */
 } /* __x64_sys_futex */
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
       migrate_disable();
       migrate_enable();
       migrate_disable();
       migrate_enable();
     }
   }
 }
 __x64_sys_futex() {
   do_futex() {
     futex_wait() {
       futex_setup_timer();
       futex_wait_setup() {
         get_futex_key();
         futex_q_lock() {
           futex_hash();
           _raw_spin_lock();
         }
         futex_get_value_locked();
       }
       futex_wait_queue() {
         __futex_queue();
         _raw_spin_unlock();
         schedule() {
           rcu_note_context_switch();
           raw_spin_rq_lock_nested() {
             _raw_spin_lock();
           }
           update_rq_clock();
           dequeue_task_fair() {
             dequeue_entity() {
               update_curr() {
                 update_min_vruntime();
                 cpuacct_charge();
                 __cgroup_account_cputime() {
                   cgroup_rstat_updated();
                 }
               }
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
               clear_buddies();
               update_cfs_group();
               update_min_vruntime();
             }
             set_next_buddy();
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
             update_cfs_group() {
               reweight_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
               }
             }
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
             update_cfs_group() {
               reweight_entity() {
                 update_curr() {
                   __calc_delta();
                   update_min_vruntime();
                 }
               }
             }
             hrtick_update();
           }
           pick_next_task() {
             pick_next_task_fair() {
               update_curr();
               check_cfs_rq_runtime();
               pick_next_entity();
               update_curr();
               check_cfs_rq_runtime();
               pick_next_entity();
               check_cfs_rq_runtime();
               pick_next_entity();
               put_prev_entity() {
                 check_cfs_rq_runtime();
               }
               set_next_entity() {
                 clear_buddies();
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
               }
             }
           }
           psi_task_switch() {
             psi_flags_change();
             psi_flags_change();
             psi_group_change() {
               record_times();
             }
             psi_group_change() {
               record_times();
             }
             psi_group_change() {
               record_times();
             }
           }
           __traceiter_sched_switch() {
             _raw_spin_lock_irqsave();
             _raw_spin_unlock_irqrestore();
           }
           switch_mm_irqs_off();
           save_fpregs_to_fpstate() {
             xfd_validate_state();
           }
           finish_task_switch.isra.0() {
             raw_spin_rq_unlock() {
               _raw_spin_unlock();
             }
           }
         } /* schedule */
       } /* futex_wait_queue */
       futex_unqueue();
     } /* futex_wait */
   } /* do_futex */
 } /* __x64_sys_futex */
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
       migrate_disable();
       migrate_enable();
       migrate_disable();
       migrate_enable();
     }
   }
 }
 __x64_sys_futex() {
   do_futex() {
     futex_wait() {
       futex_setup_timer();
       futex_wait_setup() {
         get_futex_key();
         futex_q_lock() {
           futex_hash();
           _raw_spin_lock();
         }
         futex_get_value_locked();
       }
       futex_wait_queue() {
         __futex_queue();
         _raw_spin_unlock();
         schedule() {
           rcu_note_context_switch();
           raw_spin_rq_lock_nested() {
             _raw_spin_lock();
           }
           update_rq_clock();
           dequeue_task_fair() {
             dequeue_entity() {
               update_curr() {
                 update_min_vruntime();
                 cpuacct_charge();
                 __cgroup_account_cputime() {
                   cgroup_rstat_updated();
                 }
               }
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
               clear_buddies();
               update_cfs_group();
               update_min_vruntime();
             }
             set_next_buddy();
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
             update_cfs_group() {
               reweight_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
               }
             }
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
             update_cfs_group() {
               reweight_entity() {
                 update_curr() {
                   __calc_delta();
                   update_min_vruntime();
                 }
               }
             }
             hrtick_update();
           }
           pick_next_task() {
             pick_next_task_fair() {
               update_curr();
               check_cfs_rq_runtime();
               pick_next_entity();
               update_curr();
               check_cfs_rq_runtime();
               pick_next_entity();
               check_cfs_rq_runtime();
               pick_next_entity();
               put_prev_entity() {
                 check_cfs_rq_runtime();
               }
               set_next_entity() {
                 clear_buddies();
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
               }
             }
           }
           psi_task_switch() {
             psi_flags_change();
             psi_flags_change();
             psi_group_change() {
               record_times();
             }
             psi_group_change() {
               record_times();
             }
             psi_group_change() {
               record_times();
             }
           }
           __traceiter_sched_switch() {
             _raw_spin_lock_irqsave();
             _raw_spin_unlock_irqrestore();
           }
           switch_mm_irqs_off();
           save_fpregs_to_fpstate() {
             xfd_validate_state();
           }
           finish_task_switch.isra.0() {
             raw_spin_rq_unlock() {
               _raw_spin_unlock();
             }
           }
         } /* schedule */
       } /* futex_wait_queue */
       futex_unqueue();
     } /* futex_wait */
   } /* do_futex */
 } /* __x64_sys_futex */
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
       migrate_disable();
       migrate_enable();
       migrate_disable();
       migrate_enable();
     }
   }
 }
 __x64_sys_futex() {
   do_futex() {
     futex_wake() {
       get_futex_key();
       futex_hash();
       _raw_spin_lock();
       futex_wake_mark() {
         __futex_unqueue();
         wake_q_add_safe();
       }
       _raw_spin_unlock();
       wake_up_q() {
         try_to_wake_up() {
           _raw_spin_lock_irqsave();
           ttwu_queue_wakelist();
           raw_spin_rq_lock_nested() {
             _raw_spin_lock() {
               native_queued_spin_lock_slowpath();
             }
           }
           update_rq_clock();
           ttwu_do_activate() {
             psi_task_change() {
               psi_flags_change();
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
             }
             enqueue_task_fair() {
               enqueue_entity() {
                 update_curr() {
                   update_min_vruntime();
                   cpuacct_charge();
                   __cgroup_account_cputime() {
                     cgroup_rstat_updated();
                   }
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 update_cfs_group();
                 place_entity();
               }
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
               update_cfs_group() {
                 reweight_entity() {
                   update_curr() {
                     update_min_vruntime();
                   }
                 }
               }
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
               update_cfs_group() {
                 reweight_entity() {
                   update_curr() {
                     __calc_delta();
                     update_min_vruntime();
                   }
                 }
               }
               hrtick_update();
             }
             ttwu_do_wakeup() {
               check_preempt_curr() {
                 check_preempt_wakeup() {
                   update_curr();
                   set_next_buddy();
                   resched_curr();
                 }
               }
             }
           }
           raw_spin_rq_unlock() {
             _raw_spin_unlock();
           }
           _raw_spin_unlock_irqrestore();
         }
       }
     }
   }
 }
 exit_to_user_mode_prepare() {
   exit_to_user_mode_loop() {
     schedule() {
       rcu_note_context_switch();
       raw_spin_rq_lock_nested() {
         _raw_spin_lock();
       }
       update_rq_clock();
       pick_next_task() {
         pick_next_task_fair() {
           update_curr();
           check_cfs_rq_runtime();
           pick_next_entity();
           update_curr();
           check_cfs_rq_runtime();
           pick_next_entity();
           update_curr();
           check_cfs_rq_runtime();
           pick_next_entity();
           put_prev_entity() {
             update_curr();
             check_cfs_rq_runtime();
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
           }
           set_next_entity() {
             clear_buddies();
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
           }
         }
       }
       psi_task_switch() {
         psi_flags_change();
         psi_flags_change();
       }
       __traceiter_sched_switch() {
         _raw_spin_lock_irqsave();
         _raw_spin_unlock_irqrestore();
       }
       switch_mm_irqs_off();
       save_fpregs_to_fpstate() {
         xfd_validate_state();
       }
       finish_task_switch.isra.0() {
         raw_spin_rq_unlock() {
           _raw_spin_unlock();
         }
       }
     } /* schedule */
   } /* exit_to_user_mode_loop */
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 } /* exit_to_user_mode_prepare */
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_write() {
   ksys_write() {
     __fdget_pos() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     vfs_write() {
       rw_verify_area() {
         security_file_permission() {
           apparmor_file_permission() {
             aa_file_perm() {
               __rcu_read_lock();
               __rcu_read_unlock();
             }
           }
         }
       }
       __get_task_ioprio();
       pipe_write() {
         mutex_lock() {
           __cond_resched();
         }
         _raw_spin_lock_irq();
         _raw_spin_unlock_irq();
         mutex_unlock();
         __wake_up_sync_key() {
           __wake_up_common_lock() {
             _raw_spin_lock_irqsave();
             __wake_up_common() {
               ep_poll_callback() {
                 _raw_read_lock_irqsave();
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 __wake_up() {
                   __wake_up_common_lock() {
                     _raw_spin_lock_irqsave();
                     __wake_up_common() {
                       ep_autoremove_wake_function() {
                         default_wake_function() {
                           try_to_wake_up() {
                             _raw_spin_lock_irqsave();
                             ttwu_queue_wakelist();
                             raw_spin_rq_lock_nested() {
                               _raw_spin_lock();
                             }
                             update_rq_clock();
                             ttwu_do_activate() {
                               psi_task_change() {
                                 psi_flags_change();
                                 psi_group_change() {
                                   record_times();
                                 }
                                 psi_group_change() {
                                   record_times();
                                 }
                                 psi_group_change() {
                                   record_times();
                                 }
                               }
                               enqueue_task_fair() {
                                 enqueue_entity() {
                                   update_curr() {
                                     update_min_vruntime();
                                     cpuacct_charge();
                                     __cgroup_account_cputime() {
                                       cgroup_rstat_updated();
                                     }
                                   }
                                   __update_load_avg_se();
                                   __update_load_avg_cfs_rq();
                                   update_cfs_group();
                                   place_entity();
                                 }
                                 __update_load_avg_se();
                                 __update_load_avg_cfs_rq();
                                 update_cfs_group() {
                                   reweight_entity() {
                                     update_curr() {
                                       update_min_vruntime();
                                     }
                                   }
                                 }
                                 __update_load_avg_se();
                                 __update_load_avg_cfs_rq();
                                 update_cfs_group() {
                                   reweight_entity() {
                                     update_curr() {
                                       __calc_delta();
                                       update_min_vruntime();
                                     }
                                   }
                                 }
                                 hrtick_update();
                               }
                               ttwu_do_wakeup() {
                                 check_preempt_curr() {
                                   check_preempt_wakeup() {
                                     update_curr();
                                     set_next_buddy();
                                     resched_curr();
                                   }
                                 }
                               }
                             }
                             raw_spin_rq_unlock() {
                               _raw_spin_unlock();
                             }
                             _raw_spin_unlock_irqrestore();
                           }
                         }
                       }
                     }
                     _raw_spin_unlock_irqrestore();
                   }
                 }
                 _raw_read_unlock_irqrestore();
               }
             }
             _raw_spin_unlock_irqrestore();
           }
         }
         kill_fasync();
         file_update_time() {
           current_time() {
             ktime_get_coarse_real_ts64();
           }
           inode_needs_update_time.part.0();
           __mnt_want_write_file() {
             __mnt_want_write();
           }
           generic_update_time() {
             __mark_inode_dirty();
           }
           __mnt_drop_write_file();
         }
       }
     }
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   exit_to_user_mode_loop() {
     schedule() {
       rcu_note_context_switch();
       raw_spin_rq_lock_nested() {
         _raw_spin_lock();
       }
       update_rq_clock();
       pick_next_task() {
         pick_next_task_fair() {
           update_curr();
           check_cfs_rq_runtime();
           pick_next_entity();
           update_curr();
           check_cfs_rq_runtime();
           pick_next_entity();
           update_curr();
           check_cfs_rq_runtime();
           pick_next_entity();
           put_prev_entity() {
             update_curr();
             check_cfs_rq_runtime();
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
           }
           set_next_entity() {
             clear_buddies();
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
           }
         }
       }
       psi_task_switch() {
         psi_flags_change();
         psi_flags_change();
       }
       __traceiter_sched_switch() {
         _raw_spin_lock_irqsave();
         _raw_spin_unlock_irqrestore();
       }
       switch_mm_irqs_off();
       save_fpregs_to_fpstate() {
         xfd_validate_state();
       }
       finish_task_switch.isra.0() {
         raw_spin_rq_unlock() {
           _raw_spin_unlock();
         }
       }
     } /* schedule */
   } /* exit_to_user_mode_loop */
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 } /* exit_to_user_mode_prepare */
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
       migrate_disable();
       migrate_enable();
       migrate_disable();
       migrate_enable();
     }
   }
 }
 __x64_sys_futex() {
   do_futex() {
     futex_wake() {
       get_futex_key();
       futex_hash();
       _raw_spin_lock();
       futex_wake_mark() {
         __futex_unqueue();
         wake_q_add_safe();
       }
       _raw_spin_unlock();
       wake_up_q() {
         try_to_wake_up() {
           _raw_spin_lock_irqsave();
           ttwu_queue_wakelist();
           raw_spin_rq_lock_nested() {
             _raw_spin_lock();
           }
           update_rq_clock();
           ttwu_do_activate() {
             psi_task_change() {
               psi_flags_change();
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
             }
             enqueue_task_fair() {
               enqueue_entity() {
                 update_curr() {
                   update_min_vruntime();
                   cpuacct_charge();
                   __cgroup_account_cputime() {
                     cgroup_rstat_updated();
                   }
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 update_cfs_group();
                 place_entity();
               }
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
               update_cfs_group() {
                 reweight_entity() {
                   update_curr() {
                     update_min_vruntime();
                   }
                 }
               }
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
               update_cfs_group() {
                 reweight_entity() {
                   update_curr() {
                     __calc_delta();
                     update_min_vruntime();
                   }
                 }
               }
               hrtick_update();
             }
             ttwu_do_wakeup() {
               check_preempt_curr() {
                 check_preempt_wakeup() {
                   update_curr();
                   set_next_buddy();
                   resched_curr();
                 }
               }
             }
           }
           raw_spin_rq_unlock() {
             _raw_spin_unlock();
           }
           _raw_spin_unlock_irqrestore();
         }
       }
     }
   }
 }
 exit_to_user_mode_prepare() {
   exit_to_user_mode_loop() {
     schedule() {
       rcu_note_context_switch();
       raw_spin_rq_lock_nested() {
         _raw_spin_lock();
       }
       update_rq_clock();
       pick_next_task() {
         pick_next_task_fair() {
           update_curr();
           check_cfs_rq_runtime();
           pick_next_entity();
           update_curr();
           check_cfs_rq_runtime();
           pick_next_entity();
           update_curr();
           check_cfs_rq_runtime();
           pick_next_entity();
           put_prev_entity() {
             update_curr();
             check_cfs_rq_runtime();
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
           }
           set_next_entity() {
             clear_buddies();
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
           }
         }
       }
       psi_task_switch() {
         psi_flags_change();
         psi_flags_change();
       }
       __traceiter_sched_switch() {
         _raw_spin_lock_irqsave();
         _raw_spin_unlock_irqrestore();
       }
       switch_mm_irqs_off();
       save_fpregs_to_fpstate() {
         xfd_validate_state();
       }
       finish_task_switch.isra.0() {
         raw_spin_rq_unlock() {
           _raw_spin_unlock();
         }
       }
     } /* schedule */
   } /* exit_to_user_mode_loop */
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 } /* exit_to_user_mode_prepare */
 irq_enter_rcu();
 idle_cpu();
 exit_to_user_mode_prepare() {
   exit_to_user_mode_loop() {
     schedule() {
       rcu_note_context_switch();
       raw_spin_rq_lock_nested() {
         _raw_spin_lock();
       }
       update_rq_clock();
       pick_next_task() {
         pick_next_task_fair() {
           update_curr();
           check_cfs_rq_runtime();
           pick_next_entity();
           update_curr();
           check_cfs_rq_runtime();
           pick_next_entity();
           update_curr();
           check_cfs_rq_runtime();
           pick_next_entity();
           put_prev_entity() {
             update_curr();
             check_cfs_rq_runtime();
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
           }
           set_next_entity() {
             clear_buddies();
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
           }
         }
       }
       psi_task_switch() {
         psi_flags_change();
         psi_flags_change();
       }
       __traceiter_sched_switch() {
         _raw_spin_lock_irqsave();
         _raw_spin_unlock_irqrestore();
       }
       switch_mm_irqs_off();
       save_fpregs_to_fpstate() {
         xfd_validate_state();
       }
       finish_task_switch.isra.0() {
         raw_spin_rq_unlock() {
           _raw_spin_unlock();
         }
       }
     } /* schedule */
   } /* exit_to_user_mode_loop */
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 } /* exit_to_user_mode_prepare */
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_write() {
   ksys_write() {
     __fdget_pos() {
       __fget_light() {
         __rcu_read_lock();
         __rcu_read_unlock();
       }
     }
     vfs_write() {
       rw_verify_area() {
         security_file_permission() {
           apparmor_file_permission() {
             aa_file_perm() {
               __rcu_read_lock();
               __rcu_read_unlock();
             }
           }
         }
       }
       __get_task_ioprio();
       pipe_write() {
         mutex_lock() {
           __cond_resched();
         }
         _raw_spin_lock_irq();
         _raw_spin_unlock_irq();
         mutex_unlock();
         __wake_up_sync_key() {
           __wake_up_common_lock() {
             _raw_spin_lock_irqsave();
             __wake_up_common() {
               ep_poll_callback() {
                 _raw_read_lock_irqsave();
                 __rcu_read_lock();
                 __rcu_read_unlock();
                 __wake_up() {
                   __wake_up_common_lock() {
                     _raw_spin_lock_irqsave();
                     __wake_up_common() {
                       ep_autoremove_wake_function() {
                         default_wake_function() {
                           try_to_wake_up() {
                             _raw_spin_lock_irqsave();
                             ttwu_queue_wakelist();
                             raw_spin_rq_lock_nested() {
                               _raw_spin_lock();
                             }
                             update_rq_clock();
                             ttwu_do_activate() {
                               psi_task_change() {
                                 psi_flags_change();
                                 psi_group_change() {
                                   record_times();
                                 }
                                 psi_group_change() {
                                   record_times();
                                 }
                                 psi_group_change() {
                                   record_times();
                                 }
                               }
                               enqueue_task_fair() {
                                 enqueue_entity() {
                                   update_curr() {
                                     update_min_vruntime();
                                     cpuacct_charge();
                                     __cgroup_account_cputime() {
                                       cgroup_rstat_updated();
                                     }
                                   }
                                   __update_load_avg_se();
                                   __update_load_avg_cfs_rq();
                                   update_cfs_group();
                                   place_entity();
                                 }
                                 __update_load_avg_se();
                                 __update_load_avg_cfs_rq();
                                 update_cfs_group() {
                                   reweight_entity() {
                                     update_curr() {
                                       update_min_vruntime();
                                     }
                                   }
                                 }
                                 __update_load_avg_se();
                                 __update_load_avg_cfs_rq();
                                 update_cfs_group() {
                                   reweight_entity() {
                                     update_curr() {
                                       __calc_delta();
                                       update_min_vruntime();
                                     }
                                   }
                                 }
                                 hrtick_update();
                               }
                               ttwu_do_wakeup() {
                                 check_preempt_curr() {
                                   check_preempt_wakeup() {
                                     update_curr();
                                     set_next_buddy();
                                     resched_curr();
                                   }
                                 }
                               }
                             }
                             raw_spin_rq_unlock() {
                               _raw_spin_unlock();
                             }
                             _raw_spin_unlock_irqrestore();
                           }
                         }
                       }
                     }
                     _raw_spin_unlock_irqrestore();
                   }
                 }
                 _raw_read_unlock_irqrestore();
               }
             }
             _raw_spin_unlock_irqrestore();
           }
         }
         kill_fasync();
         file_update_time() {
           current_time() {
             ktime_get_coarse_real_ts64();
           }
           inode_needs_update_time.part.0();
         }
       }
     }
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   exit_to_user_mode_loop() {
     schedule() {
       rcu_note_context_switch();
       raw_spin_rq_lock_nested() {
         _raw_spin_lock();
       }
       update_rq_clock();
       pick_next_task() {
         pick_next_task_fair() {
           update_curr() {
             __calc_delta();
             update_min_vruntime();
           }
           check_cfs_rq_runtime();
           pick_next_entity();
           update_curr() {
             update_min_vruntime();
           }
           check_cfs_rq_runtime();
           pick_next_entity();
           update_curr() {
             update_min_vruntime();
             cpuacct_charge();
             __cgroup_account_cputime() {
               cgroup_rstat_updated();
             }
           }
           check_cfs_rq_runtime();
           pick_next_entity();
           put_prev_entity() {
             update_curr();
             check_cfs_rq_runtime();
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
           }
           set_next_entity() {
             clear_buddies();
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
           }
         }
       }
       psi_task_switch() {
         psi_flags_change();
         psi_flags_change();
       }
       __traceiter_sched_switch() {
         _raw_spin_lock_irqsave();
         _raw_spin_unlock_irqrestore();
       }
       switch_mm_irqs_off();
       save_fpregs_to_fpstate() {
         xfd_validate_state();
       }
       finish_task_switch.isra.0() {
         raw_spin_rq_unlock() {
           _raw_spin_unlock();
         }
       }
     } /* schedule */
   } /* exit_to_user_mode_loop */
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 } /* exit_to_user_mode_prepare */
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
       migrate_disable();
       migrate_enable();
       migrate_disable();
       migrate_enable();
     }
   }
 }
 __x64_sys_futex() {
   do_futex() {
     futex_wake() {
       get_futex_key();
       futex_hash();
       _raw_spin_lock();
       futex_wake_mark() {
         __futex_unqueue();
         wake_q_add_safe();
       }
       _raw_spin_unlock();
       wake_up_q() {
         try_to_wake_up() {
           _raw_spin_lock_irqsave();
           ttwu_queue_wakelist();
           raw_spin_rq_lock_nested() {
             _raw_spin_lock();
           }
           update_rq_clock();
           ttwu_do_activate() {
             psi_task_change() {
               psi_flags_change();
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
             }
             enqueue_task_fair() {
               enqueue_entity() {
                 update_curr() {
                   update_min_vruntime();
                   cpuacct_charge();
                   __cgroup_account_cputime() {
                     cgroup_rstat_updated();
                   }
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 update_cfs_group();
                 place_entity();
               }
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
               update_cfs_group() {
                 reweight_entity() {
                   update_curr() {
                     update_min_vruntime();
                   }
                 }
               }
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
               update_cfs_group() {
                 reweight_entity() {
                   update_curr() {
                     __calc_delta();
                     update_min_vruntime();
                   }
                 }
               }
               hrtick_update();
             }
             ttwu_do_wakeup() {
               check_preempt_curr() {
                 check_preempt_wakeup() {
                   update_curr();
                   set_next_buddy();
                   resched_curr();
                 }
               }
             }
           }
           raw_spin_rq_unlock() {
             _raw_spin_unlock();
           }
           _raw_spin_unlock_irqrestore();
         }
       }
     }
   }
 }
 exit_to_user_mode_prepare() {
   exit_to_user_mode_loop() {
     schedule() {
       rcu_note_context_switch();
       raw_spin_rq_lock_nested() {
         _raw_spin_lock();
       }
       update_rq_clock();
       pick_next_task() {
         pick_next_task_fair() {
           update_curr();
           check_cfs_rq_runtime();
           pick_next_entity();
           update_curr();
           check_cfs_rq_runtime();
           pick_next_entity();
           update_curr();
           check_cfs_rq_runtime();
           pick_next_entity();
           put_prev_entity() {
             update_curr();
             check_cfs_rq_runtime();
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
           }
           set_next_entity() {
             clear_buddies();
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
           }
         }
       }
       psi_task_switch() {
         psi_flags_change();
         psi_flags_change();
       }
       __traceiter_sched_switch() {
         _raw_spin_lock_irqsave();
         _raw_spin_unlock_irqrestore();
       }
       switch_mm_irqs_off();
       save_fpregs_to_fpstate() {
         xfd_validate_state();
       }
       finish_task_switch.isra.0() {
         raw_spin_rq_unlock() {
           _raw_spin_unlock();
         }
         irq_enter_rcu();
         idle_cpu();
       }
       rcu_note_context_switch();
       raw_spin_rq_lock_nested() {
         _raw_spin_lock();
       }
       update_rq_clock();
       pick_next_task() {
         pick_next_task_fair() {
           update_curr();
           check_cfs_rq_runtime();
           pick_next_entity();
           update_curr();
           check_cfs_rq_runtime();
           pick_next_entity();
           update_curr();
           check_cfs_rq_runtime();
           pick_next_entity();
           put_prev_entity() {
             update_curr();
             check_cfs_rq_runtime();
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
           }
           set_next_entity() {
             clear_buddies();
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
           }
         }
       }
       psi_task_switch() {
         psi_flags_change();
         psi_flags_change();
       }
       __traceiter_sched_switch() {
         _raw_spin_lock_irqsave();
         _raw_spin_unlock_irqrestore();
       }
       switch_mm_irqs_off();
       finish_task_switch.isra.0() {
         raw_spin_rq_unlock() {
           _raw_spin_unlock();
         }
       }
     } /* schedule */
   } /* exit_to_user_mode_loop */
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 } /* exit_to_user_mode_prepare */
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
       migrate_disable();
       migrate_enable();
       migrate_disable();
       migrate_enable();
     }
   }
 }
 __x64_sys_futex() {
   do_futex() {
     futex_wake() {
       get_futex_key();
       futex_hash();
       _raw_spin_lock();
       futex_wake_mark() {
         __futex_unqueue();
         wake_q_add_safe();
       }
       _raw_spin_unlock();
       wake_up_q() {
         try_to_wake_up() {
           _raw_spin_lock_irqsave();
           ttwu_queue_wakelist();
           raw_spin_rq_lock_nested() {
             _raw_spin_lock();
           }
           update_rq_clock();
           ttwu_do_activate() {
             psi_task_change() {
               psi_flags_change();
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
             }
             enqueue_task_fair() {
               enqueue_entity() {
                 update_curr() {
                   update_min_vruntime();
                   cpuacct_charge();
                   __cgroup_account_cputime() {
                     cgroup_rstat_updated();
                   }
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 update_cfs_group();
                 place_entity();
               }
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
               update_cfs_group() {
                 reweight_entity() {
                   update_curr() {
                     update_min_vruntime();
                   }
                 }
               }
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
               update_cfs_group() {
                 reweight_entity() {
                   update_curr() {
                     __calc_delta();
                     update_min_vruntime();
                   }
                 }
               }
               hrtick_update();
             }
             ttwu_do_wakeup() {
               check_preempt_curr() {
                 check_preempt_wakeup() {
                   update_curr();
                   set_next_buddy();
                   resched_curr();
                 }
               }
             }
           }
           raw_spin_rq_unlock() {
             _raw_spin_unlock();
           }
           _raw_spin_unlock_irqrestore();
         }
       }
     }
   }
 }
 exit_to_user_mode_prepare() {
   exit_to_user_mode_loop() {
     schedule() {
       rcu_note_context_switch();
       raw_spin_rq_lock_nested() {
         _raw_spin_lock();
       }
       update_rq_clock();
       pick_next_task() {
         pick_next_task_fair() {
           update_curr();
           check_cfs_rq_runtime();
           pick_next_entity();
           update_curr();
           check_cfs_rq_runtime();
           pick_next_entity();
           update_curr();
           check_cfs_rq_runtime();
           pick_next_entity();
           put_prev_entity() {
             update_curr();
             check_cfs_rq_runtime();
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
           }
           set_next_entity() {
             clear_buddies();
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
           }
         }
       }
       psi_task_switch() {
         psi_flags_change();
         psi_flags_change();
       }
       __traceiter_sched_switch() {
         _raw_spin_lock_irqsave();
         _raw_spin_unlock_irqrestore();
       }
       switch_mm_irqs_off();
       save_fpregs_to_fpstate() {
         xfd_validate_state();
       }
       finish_task_switch.isra.0() {
         raw_spin_rq_unlock() {
           _raw_spin_unlock();
         }
       }
     } /* schedule */
   } /* exit_to_user_mode_loop */
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 } /* exit_to_user_mode_prepare */
 irq_enter_rcu();
 idle_cpu();
 exit_to_user_mode_prepare() {
   exit_to_user_mode_loop() {
     schedule() {
       rcu_note_context_switch();
       raw_spin_rq_lock_nested() {
         _raw_spin_lock();
       }
       update_rq_clock();
       pick_next_task() {
         pick_next_task_fair() {
           update_curr();
           check_cfs_rq_runtime();
           pick_next_entity();
           update_curr();
           check_cfs_rq_runtime();
           pick_next_entity();
           update_curr();
           check_cfs_rq_runtime();
           pick_next_entity();
           put_prev_entity() {
             update_curr();
             check_cfs_rq_runtime();
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
           }
           set_next_entity() {
             clear_buddies();
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
           }
         }
       }
       psi_task_switch() {
         psi_flags_change();
         psi_flags_change();
       }
       __traceiter_sched_switch() {
         _raw_spin_lock_irqsave();
         _raw_spin_unlock_irqrestore();
       }
       switch_mm_irqs_off();
       save_fpregs_to_fpstate() {
         xfd_validate_state();
       }
       finish_task_switch.isra.0() {
         raw_spin_rq_unlock() {
           _raw_spin_unlock();
         }
       }
     } /* schedule */
   } /* exit_to_user_mode_loop */
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 } /* exit_to_user_mode_prepare */
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
       migrate_disable();
       migrate_enable();
       migrate_disable();
       migrate_enable();
     }
   }
 }
 __x64_sys_sendmmsg() {
   __sys_sendmmsg() {
     sockfd_lookup_light() {
       __fdget() {
         __fget_light() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
       }
     }
     ___sys_sendmsg() {
       copy_msghdr_from_user() {
         __copy_msghdr();
         __check_object_size() {
           __check_object_size.part.0() {
             check_stack_object();
           }
         }
       }
       ____sys_sendmsg() {
         sock_sendmsg() {
           security_socket_sendmsg() {
             apparmor_socket_sendmsg() {
               aa_sk_perm() {
                 __cond_resched();
               }
             }
           }
           packet_sendmsg() {
             packet_snd() {
               __rcu_read_lock();
               __rcu_read_unlock();
               sock_alloc_send_pskb() {
                 alloc_skb_with_frags() {
                   __alloc_skb() {
                     kmem_cache_alloc_node() {
                       __cond_resched();
                       should_failslab();
                     }
                     kmalloc_reserve() {
                       kmalloc_size_roundup() {
                         kmalloc_slab();
                       }
                       __kmalloc_node_track_caller() {
                         kmalloc_slab();
                         __kmem_cache_alloc_node() {
                           __cond_resched();
                           should_failslab();
                         }
                       }
                     }
                     __build_skb_around();
                   }
                 }
                 skb_set_owner_w();
               }
               skb_put();
               skb_copy_datagram_from_iter() {
                 __check_object_size() {
                   __check_object_size.part.0() {
                     check_stack_object();
                     is_vmalloc_addr();
                     __virt_addr_valid();
                     __check_heap_object();
                   }
                 }
               }
               packet_parse_headers() {
                 eth_header_parse_protocol();
                 __skb_flow_dissect() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
               }
               __dev_queue_xmit() {
                 qdisc_pkt_len_init();
                 netdev_core_pick_tx();
                 validate_xmit_skb() {
                   netif_skb_features() {
                     passthru_features_check();
                     skb_network_protocol();
                   }
                   validate_xmit_xfrm();
                 }
                 dev_hard_start_xmit() {
                   dev_queue_xmit_nit() {
                     __rcu_read_lock();
                     match_fanout_group();
                     __rcu_read_unlock();
                   }
                   veth_xmit [veth]() {
                     __rcu_read_lock();
                     skb_clone_tx_timestamp();
                     __dev_forward_skb() {
                       __dev_forward_skb2() {
                         skb_scrub_packet();
                         eth_type_trans();
                       }
                     }
                     __netif_rx() {
                       netif_rx_internal() {
                         enqueue_to_backlog() {
                           _raw_spin_lock_irqsave();
                           __raise_softirq_irqoff();
                           _raw_spin_unlock_irqrestore();
                         }
                       }
                     }
                     __rcu_read_unlock();
                   }
                 }
                 __local_bh_enable_ip() {
                   do_softirq.part.0() {
                     __do_softirq() {
                       net_rx_action() {
                         __usecs_to_jiffies();
                         __napi_poll() {
                           process_backlog() {
                             _raw_spin_lock_irq();
                             _raw_spin_unlock_irq();
                             __rcu_read_lock();
                             __netif_receive_skb() {
                               __netif_receive_skb_one_core() {
                                 __netif_receive_skb_core.constprop.0() {
                                   br_handle_frame [bridge]() {
                                     br_nf_pre_routing [br_netfilter]() {
                                       __rcu_read_lock();
                                       __rcu_read_unlock();
                                       __rcu_read_lock();
                                       __rcu_read_unlock();
                                       __rcu_read_lock();
                                       __rcu_read_unlock();
                                       skb_pull_rcsum();
                                       br_validate_ipv4 [br_netfilter]();
                                       skb_ext_add() {
                                         __skb_ext_alloc() {
                                           kmem_cache_alloc() {
                                             should_failslab();
                                           }
                                         }
                                       }
                                       setup_pre_routing [br_netfilter]() {
                                         brnf_get_logical_dev [br_netfilter]() {
                                           __rcu_read_lock();
                                           __rcu_read_unlock();
                                         }
                                         sock_wfree() {
                                           sock_def_write_space() {
                                             __rcu_read_lock();
                                             __wake_up_sync_key() {
                                               __wake_up_common_lock() {
                                                 _raw_spin_lock_irqsave();
                                                 __wake_up_common() {
                                                   pollwake();
                                                 }
                                                 _raw_spin_unlock_irqrestore();
                                               }
                                             }
                                             __rcu_read_unlock();
                                           }
                                         }
                                       }
                                       __rcu_read_lock();
                                       nf_hook_slow() {
                                         ip_sabotage_in [br_netfilter]();
                                         ipv4_conntrack_defrag [nf_defrag_ipv4]();
                                         ipv4_conntrack_in [nf_conntrack]() {
                                           nf_conntrack_in [nf_conntrack]() {
                                             get_l4proto [nf_conntrack]();
                                             resolve_normal_ct [nf_conntrack]() {
                                               nf_ct_get_tuple [nf_conntrack]();
                                               hash_conntrack_raw [nf_conntrack]();
                                               __nf_conntrack_find_get [nf_conntrack]() {
                                                 __rcu_read_lock();
                                                 __rcu_read_unlock();
                                               }
                                             }
                                             nf_conntrack_handle_packet [nf_conntrack]() {
                                               nf_conntrack_tcp_packet [nf_conntrack]() {
                                                 nf_checksum() {
                                                   nf_ip_checksum() {
                                                     __skb_checksum_complete() {
                                                       __skb_checksum() {
                                                         csum_partial();
                                                       }
                                                     }
                                                   }
                                                 }
                                                 _raw_spin_lock_bh();
                                                 tcp_in_window [nf_conntrack]() {
                                                   nf_ct_seq_offset [nf_conntrack]();
                                                   tcp_options [nf_conntrack]();
                                                 }
                                                 _raw_spin_unlock_bh() {
                                                   __local_bh_enable_ip();
                                                 }
                                                 __nf_ct_refresh_acct [nf_conntrack]() {
                                                   nf_ct_acct_add [nf_conntrack]();
                                                 }
                                               }
                                             }
                                           }
                                         }
                                         nf_nat_ipv4_pre_routing [nf_nat]() {
                                           nf_nat_inet_fn [nf_nat]();
                                         }
                                       }
                                       __rcu_read_unlock();
                                       br_nf_pre_routing_finish [br_netfilter]() {
                                         skb_push();
                                         br_nf_hook_thresh [br_netfilter]() {
                                           nf_hook_slow();
                                           br_handle_frame_finish [bridge]() {
                                             br_allowed_ingress [bridge]();
                                             nbp_switchdev_frame_mark [bridge]();
                                             br_fdb_update [bridge]() {
                                               fdb_find_rcu [bridge]();
                                             }
                                             br_fdb_find_rcu [bridge]() {
                                               fdb_find_rcu [bridge]();
                                             }
                                             br_pass_frame_up [bridge]() {
                                               br_allowed_egress [bridge]();
                                               br_handle_vlan [bridge]();
                                               br_multicast_count [bridge]();
                                               netif_receive_skb() {
                                                 skb_defer_rx_timestamp();
                                                 __rcu_read_lock();
                                                 __netif_receive_skb() {
                                                   __netif_receive_skb_one_core() {
                                                     __netif_receive_skb_core.constprop.0();
                                                     ip_rcv() {
                                                       ip_rcv_core();
                                                       __rcu_read_lock();
                                                       nf_hook_slow() {
                                                         ip_sabotage_in [br_netfilter]() {
                                                           ip_rcv_finish() {
                                                             ip_rcv_finish_core.constprop.0() {
                                                               tcp_v4_early_demux() {
                                                                 __inet_lookup_established() {
                                                                   inet_ehashfn();
                                                                 }
                                                               }
                                                               ip_route_input_noref() {
                                                                 __rcu_read_lock();
                                                                 ip_route_input_slow() {
                                                                   make_kuid() {
                                                                     map_id_range_down();
                                                                   }
                                                                   __rcu_read_lock();
                                                                   fib_table_lookup() {
                                                                     fib_lookup_good_nhc();
                                                                   }
                                                                   __rcu_read_unlock();
                                                                   fib_validate_source() {
                                                                     __fib_validate_source() {
                                                                       l3mdev_master_ifindex_rcu();
                                                                       make_kuid() {
                                                                         map_id_range_down();
                                                                       }
                                                                       __rcu_read_lock();
                                                                       fib_table_lookup() {
                                                                         fib_lookup_good_nhc();
                                                                       }
                                                                       __rcu_read_unlock();
                                                                       fib_info_nh_uses_dev();
                                                                     }
                                                                   }
                                                                 }
                                                                 __rcu_read_unlock();
                                                               }
                                                             }
                                                             ip_local_deliver() {
                                                               __rcu_read_lock();
                                                               nf_hook_slow() {
                                                                 nft_do_chain_ipv4 [nf_tables]() {
                                                                   nft_do_chain [nf_tables]() {
                                                                     expr_call_ops_eval [nf_tables]() {
                                                                       nft_counter_eval [nf_tables]() {
                                                                         __local_bh_enable_ip();
                                                                       }
                                                                     }
                                                                     expr_call_ops_eval [nf_tables]() {
                                                                       nft_immediate_eval [nf_tables]();
                                                                     }
                                                                     expr_call_ops_eval [nf_tables]() {
                                                                       nft_meta_get_eval [nf_tables]();
                                                                     }
                                                                     expr_call_ops_eval [nf_tables]() {
                                                                       nft_meta_get_eval [nf_tables]();
                                                                     }
                                                                     expr_call_ops_eval [nf_tables]() {
                                                                       nft_meta_get_eval [nf_tables]();
                                                                     }
                                                                     expr_call_ops_eval [nf_tables]() {
                                                                       nft_meta_get_eval [nf_tables]();
                                                                     }
                                                                   }
                                                                 }
                                                                 nf_nat_ipv4_local_in [nf_nat]() {
                                                                   nf_nat_inet_fn [nf_nat]();
                                                                 }
                                                                 nf_confirm [nf_conntrack]();
                                                               }
                                                               __rcu_read_unlock();
                                                               ip_local_deliver_finish() {
                                                                 __rcu_read_lock();
                                                                 ip_protocol_deliver_rcu() {
                                                                   raw_local_deliver() {
                                                                     raw_v4_input() {
                                                                       __rcu_read_lock();
                                                                       __rcu_read_unlock();
                                                                     }
                                                                   }
                                                                   tcp_v4_rcv() {
                                                                     tcp_inbound_md5_hash() {
                                                                       tcp_parse_md5sig_option();
                                                                     }
                                                                     tcp_filter() {
                                                                       sk_filter_trim_cap() {
                                                                         security_sock_rcv_skb() {
                                                                           apparmor_socket_sock_rcv_skb();
                                                                         }
                                                                         __rcu_read_lock();
                                                                         __rcu_read_unlock();
                                                                       }
                                                                     }
                                                                     tcp_v4_fill_cb();
                                                                     _raw_spin_lock();
                                                                     tcp_v4_do_rcv() {
                                                                       tcp_rcv_state_process() {
                                                                         tcp_mstamp_refresh() {
                                                                           ktime_get();
                                                                         }
                                                                         tcp_rcv_synsent_state_process() {
                                                                           tcp_parse_options();
                                                                           tcp_ack() {
                                                                             tcp_sync_mss();
                                                                             tcp_clean_rtx_queue.constprop.0() {
                                                                               tcp_rack_advance();
                                                                               tcp_rate_skb_delivered();
                                                                               tcp_ack_tstamp();
                                                                               __sk_mem_reclaim() {
                                                                                 __sk_mem_reduce_allocated() {
                                                                                   mem_cgroup_uncharge_skmem() {
                                                                                     __mod_memcg_state() {
                                                                                       cgroup_rstat_updated();
                                                                                     }
                                                                                     refill_stock() {
                                                                                       __refill_stock() {
                                                                                         drain_stock() {
                                                                                           page_counter_uncharge() {
                                                                                             page_counter_cancel() {
                                                                                               propagate_protected_usage();
                                                                                             }
                                                                                             page_counter_cancel() {
                                                                                               propagate_protected_usage();
                                                                                             }
                                                                                             page_counter_cancel() {
                                                                                               propagate_protected_usage();
                                                                                             }
                                                                                           }
                                                                                           __rcu_read_lock();
                                                                                           __rcu_read_unlock();
                                                                                         }
                                                                                         __rcu_read_lock();
                                                                                         __rcu_read_unlock();
                                                                                       }
                                                                                     }
                                                                                   }
                                                                                 }
                                                                               }
                                                                               __kfree_skb() {
                                                                                 skb_release_head_state();
                                                                                 skb_release_data() {
                                                                                   skb_free_head() {
                                                                                     kfree() {
                                                                                       __kmem_cache_free() {
                                                                                         __slab_free();
                                                                                       }
                                                                                     }
                                                                                   }
                                                                                 }
                                                                                 kfree_skbmem() {
                                                                                   kmem_cache_free() {
                                                                                     __slab_free();
                                                                                   }
                                                                                 }
                                                                               }
                                                                               tcp_chrono_stop();
                                                                               tcp_ack_update_rtt() {
                                                                                 tcp_rtt_estimator() {
                                                                                   jiffies_to_usecs();
                                                                                 }
                                                                                 __usecs_to_jiffies();
                                                                               }
                                                                               cubictcp_acked();
                                                                             }
                                                                             tcp_rack_update_reo_wnd();
                                                                             tcp_schedule_loss_probe() {
                                                                               tcp_schedule_loss_probe.part.0();
                                                                             }
                                                                             tcp_rearm_rto();
                                                                             tcp_newly_delivered();
                                                                             tcp_rate_gen();
                                                                             tcp_update_pacing_rate();
                                                                             tcp_xmit_recovery();
                                                                           }
                                                                           ktime_get_seconds();
                                                                           tcp_sync_mss();
                                                                           tcp_finish_connect() {
                                                                             tcp_set_state() {
                                                                               inet_sk_state_store();
                                                                             }
                                                                             inet_sk_rx_dst_set();
                                                                             security_inet_conn_established();
                                                                             tcp_init_transfer() {
                                                                               tcp_mtup_init();
                                                                               inet_sk_rebuild_header() {
                                                                                 __sk_dst_check() {
                                                                                   ipv4_dst_check();
                                                                                 }
                                                                               }
                                                                               tcp_init_metrics() {
                                                                                 __rcu_read_lock();
                                                                                 tcp_get_metrics() {
                                                                                   __tcp_get_metrics();
                                                                                 }
                                                                                 __rcu_read_unlock();
                                                                               }
                                                                               tcp_init_congestion_control() {
                                                                                 cubictcp_init();
                                                                               }
                                                                               tcp_sndbuf_expand();
                                                                               tcp_mstamp_refresh() {
                                                                                 ktime_get();
                                                                               }
                                                                             }
                                                                           }
                                                                           sock_def_wakeup() {
                                                                             __rcu_read_lock();
                                                                             __wake_up() {
                                                                               __wake_up_common_lock() {
                                                                                 _raw_spin_lock_irqsave();
                                                                                 __wake_up_common() {
                                                                                   pollwake() {
                                                                                     default_wake_function() {
                                                                                       try_to_wake_up() {
                                                                                         _raw_spin_lock_irqsave();
                                                                                         select_task_rq_fair() {
                                                                                           __rcu_read_lock();
                                                                                           wake_affine() {
                                                                                             available_idle_cpu();
                                                                                             available_idle_cpu();
                                                                                           }
                                                                                           select_idle_sibling() {
                                                                                             available_idle_cpu();
                                                                                           }
                                                                                           __rcu_read_unlock();
                                                                                         }
                                                                                         ttwu_queue_wakelist() {
                                                                                           __smp_call_single_queue() {
                                                                                             send_call_function_single_ipi();
                                                                                           }
                                                                                         }
                                                                                         _raw_spin_unlock_irqrestore();
                                                                                       }
                                                                                     }
                                                                                   }
                                                                                 }
                                                                                 _raw_spin_unlock_irqrestore();
                                                                               }
                                                                             }
                                                                             __rcu_read_unlock();
                                                                           }
                                                                           tcp_send_ack() {
                                                                             __tcp_send_ack.part.0() {
                                                                               __alloc_skb() {
                                                                                 kmem_cache_alloc_node() {
                                                                                   should_failslab();
                                                                                 }
                                                                                 kmalloc_reserve() {
                                                                                   kmalloc_size_roundup() {
                                                                                     kmalloc_slab();
                                                                                   }
                                                                                   __kmalloc_node_track_caller() {
                                                                                     kmalloc_slab();
                                                                                     __kmem_cache_alloc_node() {
                                                                                       should_failslab();
                                                                                     }
                                                                                   }
                                                                                 }
                                                                                 __build_skb_around();
                                                                               }
                                                                               __tcp_transmit_skb() {
                                                                                 tcp_established_options();
                                                                                 skb_push();
                                                                                 __tcp_select_window();
                                                                                 tcp_options_write();
                                                                                 bpf_skops_write_hdr_opt.isra.0();
                                                                                 tcp_v4_send_check();
                                                                                 ip_queue_xmit() {
                                                                                   __ip_queue_xmit() {
                                                                                     __rcu_read_lock();
                                                                                     __sk_dst_check() {
                                                                                       ipv4_dst_check();
                                                                                     }
                                                                                     skb_push();
                                                                                     ip_local_out() {
                                                                                       __ip_local_out() {
                                                                                         ip_send_check();
                                                                                         __rcu_read_lock();
                                                                                         nf_hook_slow() {
                                                                                           ipv4_conntrack_defrag [nf_defrag_ipv4]();
                                                                                           ipv4_conntrack_local [nf_conntrack]() {
                                                                                             nf_conntrack_in [nf_conntrack]() {
                                                                                               get_l4proto [nf_conntrack]();
                                                                                               resolve_normal_ct [nf_conntrack]() {
                                                                                                 nf_ct_get_tuple [nf_conntrack]();
                                                                                                 hash_conntrack_raw [nf_conntrack]();
                                                                                                 __nf_conntrack_find_get [nf_conntrack]() {
                                                                                                   __rcu_read_lock();
                                                                                                   __rcu_read_unlock();
                                                                                                 }
                                                                                               }
                                                                                               nf_conntrack_handle_packet [nf_conntrack]() {
                                                                                                 nf_conntrack_tcp_packet [nf_conntrack]() {
                                                                                                   _raw_spin_lock_bh();
                                                                                                   tcp_in_window [nf_conntrack]();
                                                                                                   _raw_spin_unlock_bh();
                                                                                                   __nf_ct_refresh_acct [nf_conntrack]();
                                                                                                 }
                                                                                               }
                                                                                             }
                                                                                           }
                                                                                           nf_nat_ipv4_local_fn [nf_nat]() {
                                                                                             nf_nat_inet_fn [nf_nat]();
                                                                                           }
                                                                                           nft_do_chain_ipv4 [nf_tables]() {
                                                                                             nft_do_chain [nf_tables]() {
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_counter_eval [nf_tables]() {
                                                                                                   __local_bh_enable_ip();
                                                                                                 }
                                                                                               }
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_immediate_eval [nf_tables]();
                                                                                               }
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_meta_get_eval [nf_tables]();
                                                                                               }
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_meta_get_eval [nf_tables]();
                                                                                               }
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_meta_get_eval [nf_tables]();
                                                                                               }
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_meta_get_eval [nf_tables]();
                                                                                               }
                                                                                             }
                                                                                           }
                                                                                         }
                                                                                         __rcu_read_unlock();
                                                                                       }
                                                                                       ip_output() {
                                                                                         __rcu_read_lock();
                                                                                         nf_hook_slow() {
                                                                                           apparmor_ip_postroute();
                                                                                           nft_do_chain_ipv4 [nf_tables]() {
                                                                                             nft_do_chain [nf_tables]() {
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_counter_eval [nf_tables]() {
                                                                                                   __local_bh_enable_ip();
                                                                                                 }
                                                                                               }
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_immediate_eval [nf_tables]();
                                                                                               }
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_meta_get_eval [nf_tables]();
                                                                                               }
                                                                                             }
                                                                                           }
                                                                                           nf_nat_ipv4_out [nf_nat]() {
                                                                                             nf_nat_inet_fn [nf_nat]();
                                                                                           }
                                                                                           nf_confirm [nf_conntrack]();
                                                                                         }
                                                                                         __rcu_read_unlock();
                                                                                         ip_finish_output() {
                                                                                           __ip_finish_output() {
                                                                                             ip_finish_output2() {
                                                                                               __dev_queue_xmit() {
                                                                                                 qdisc_pkt_len_init();
                                                                                                 netdev_core_pick_tx();
                                                                                                 validate_xmit_skb() {
                                                                                                   netif_skb_features();
                                                                                                   skb_csum_hwoffload_help();
                                                                                                   validate_xmit_xfrm();
                                                                                                 }
                                                                                                 dev_hard_start_xmit() {
                                                                                                   br_dev_xmit [bridge]();
                                                                                                 }
                                                                                                 __local_bh_enable_ip();
                                                                                               }
                                                                                               __local_bh_enable_ip();
                                                                                             }
                                                                                           }
                                                                                         }
                                                                                       }
                                                                                     }
                                                                                     __rcu_read_unlock();
                                                                                   }
                                                                                 }
                                                                               }
                                                                             }
                                                                           }
                                                                         }
                                                                         tcp_urg();
                                                                         __kfree_skb() {
                                                                           skb_release_head_state() {
                                                                             __skb_ext_put() {
                                                                               kmem_cache_free();
                                                                             }
                                                                           }
                                                                           skb_release_data() {
                                                                             skb_free_head() {
                                                                               kfree() {
                                                                                 __kmem_cache_free();
                                                                               }
                                                                             }
                                                                           }
                                                                           kfree_skbmem() {
                                                                             kmem_cache_free();
                                                                           }
                                                                         }
                                                                         tcp_check_space();
                                                                       }
                                                                     }
                                                                     _raw_spin_unlock();
                                                                   }
                                                                 }
                                                                 __rcu_read_unlock();
                                                               }
                                                             }
                                                           }
                                                         }
                                                       }
                                                       __rcu_read_unlock();
                                                     }
                                                   }
                                                 }
                                                 __rcu_read_unlock();
                                               }
                                             }
                                           }
                                         }
                                       }
                                     }
                                   }
                                 }
                               }
                             }
                             __rcu_read_unlock();
                             _raw_spin_lock_irq();
                             _raw_spin_unlock_irq();
                             __rcu_read_lock();
                             __netif_receive_skb() {
                               __netif_receive_skb_one_core() {
                                 __netif_receive_skb_core.constprop.0() {
                                   packet_rcv_fanout() {
                                     __skb_get_hash_symmetric() {
                                       __skb_flow_dissect() {
                                         __rcu_read_lock();
                                         __rcu_read_unlock();
                                         __skb_flow_get_ports();
                                       }
                                     }
                                     tpacket_rcv() {
                                       skb_push();
                                       __rcu_read_lock();
                                       __rcu_read_unlock();
                                       __packet_rcv_has_room() {
                                         packet_lookup_frame.isra.0();
                                       }
                                       _raw_spin_lock();
                                       packet_lookup_frame.isra.0();
                                       _raw_spin_unlock();
                                       skb_copy_bits();
                                       tpacket_get_timestamp();
                                       ktime_get_real_ts64();
                                       eth_header_parse();
                                       _raw_spin_lock();
                                       _raw_spin_unlock();
                                       sock_def_readable() {
                                         __rcu_read_lock();
                                         __wake_up_sync_key() {
                                           __wake_up_common_lock() {
                                             _raw_spin_lock_irqsave();
                                             __wake_up_common() {
                                               pollwake() {
                                                 default_wake_function() {
                                                   try_to_wake_up() {
                                                     _raw_spin_lock_irqsave();
                                                     ttwu_queue_wakelist();
                                                     raw_spin_rq_lock_nested() {
                                                       _raw_spin_lock();
                                                     }
                                                     update_rq_clock();
                                                     ttwu_do_activate() {
                                                       psi_task_change() {
                                                         psi_flags_change();
                                                         psi_group_change() {
                                                           record_times();
                                                         }
                                                         psi_group_change() {
                                                           record_times();
                                                         }
                                                         psi_group_change() {
                                                           record_times();
                                                         }
                                                       }
                                                       enqueue_task_fair() {
                                                         enqueue_entity() {
                                                           update_curr() {
                                                             update_min_vruntime();
                                                             cpuacct_charge();
                                                             __cgroup_account_cputime() {
                                                               cgroup_rstat_updated();
                                                             }
                                                           }
                                                           __update_load_avg_se();
                                                           __update_load_avg_cfs_rq();
                                                           update_cfs_group();
                                                           place_entity();
                                                         }
                                                         __update_load_avg_se();
                                                         __update_load_avg_cfs_rq();
                                                         update_cfs_group() {
                                                           reweight_entity() {
                                                             update_curr() {
                                                               update_min_vruntime();
                                                             }
                                                           }
                                                         }
                                                         __update_load_avg_se();
                                                         __update_load_avg_cfs_rq();
                                                         update_cfs_group() {
                                                           reweight_entity() {
                                                             update_curr() {
                                                               __calc_delta();
                                                               update_min_vruntime();
                                                             }
                                                           }
                                                         }
                                                         hrtick_update();
                                                       }
                                                       ttwu_do_wakeup() {
                                                         check_preempt_curr() {
                                                           check_preempt_wakeup() {
                                                             update_curr();
                                                             set_next_buddy();
                                                             resched_curr();
                                                           }
                                                         }
                                                       }
                                                     }
                                                     raw_spin_rq_unlock() {
                                                       _raw_spin_unlock();
                                                     }
                                                     _raw_spin_unlock_irqrestore();
                                                   }
                                                 }
                                               }
                                             }
                                             _raw_spin_unlock_irqrestore();
                                           }
                                         }
                                         __rcu_read_unlock();
                                       }
                                       consume_skb();
                                     }
                                   }
                                 }
                                 ip_rcv() {
                                   ip_rcv_core() {
                                     __sock_wfree();
                                   }
                                   __rcu_read_lock();
                                   __rcu_read_unlock();
                                   ip_rcv_finish_core.constprop.0() {
                                     tcp_v4_early_demux() {
                                       __inet_lookup_established() {
                                         inet_ehashfn();
                                       }
                                     }
                                     ip_route_input_noref() {
                                       __rcu_read_lock();
                                       ip_route_input_slow() {
                                         make_kuid() {
                                           map_id_range_down();
                                         }
                                         __rcu_read_lock();
                                         fib_table_lookup();
                                         __rcu_read_unlock();
                                         rt_dst_alloc() {
                                           dst_alloc() {
                                             kmem_cache_alloc() {
                                               should_failslab();
                                             }
                                           }
                                         }
                                       }
                                       __rcu_read_unlock();
                                     }
                                   }
                                   ip_error() {
                                     __rcu_read_lock();
                                     l3mdev_master_ifindex_rcu();
                                     __rcu_read_unlock();
                                     inet_getpeer() {
                                       __rcu_read_lock();
                                       lookup();
                                       __rcu_read_unlock();
                                     }
                                     inet_putpeer();
                                     kfree_skb_reason() {
                                       skb_release_head_state() {
                                         dst_release() {
                                           call_rcu() {
                                             __call_rcu_common.constprop.0() {
                                               rcu_segcblist_enqueue();
                                             }
                                           }
                                         }
                                       }
                                       skb_release_data() {
                                         skb_free_head() {
                                           kfree() {
                                             __kmem_cache_free();
                                           }
                                         }
                                       }
                                       kfree_skbmem() {
                                         kmem_cache_free();
                                       }
                                     }
                                   }
                                 }
                               }
                             }
                             __rcu_read_unlock();
                             _raw_spin_lock_irq();
                             _raw_spin_unlock_irq();
                           }
                         }
                       }
                     }
                   }
                 }
               }
             }
           }
         }
       }
       kfree();
     }
     __cond_resched() {
       rcu_note_context_switch();
       raw_spin_rq_lock_nested() {
         _raw_spin_lock();
       }
       update_rq_clock();
       pick_next_task() {
         pick_next_task_fair() {
           update_curr();
           check_cfs_rq_runtime();
           pick_next_entity();
           update_curr();
           check_cfs_rq_runtime();
           pick_next_entity();
           update_curr();
           check_cfs_rq_runtime();
           pick_next_entity();
           put_prev_entity() {
             update_curr();
             check_cfs_rq_runtime();
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
           }
           set_next_entity() {
             clear_buddies();
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
           }
         }
       }
       psi_task_switch() {
         psi_flags_change();
         psi_flags_change();
       }
       __traceiter_sched_switch() {
         _raw_spin_lock_irqsave();
         _raw_spin_unlock_irqrestore();
       }
       switch_mm_irqs_off();
       save_fpregs_to_fpstate() {
         xfd_validate_state();
       }
       finish_task_switch.isra.0() {
         raw_spin_rq_unlock() {
           _raw_spin_unlock();
         }
       }
     } /* __cond_resched */
     fput();
   } /* __sys_sendmmsg */
 } /* __x64_sys_sendmmsg */
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
       migrate_disable();
       migrate_enable();
       migrate_disable();
       migrate_enable();
     }
   }
 }
 __x64_sys_sendmmsg() {
   __sys_sendmmsg() {
     sockfd_lookup_light() {
       __fdget() {
         __fget_light() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
       }
     }
     ___sys_sendmsg() {
       copy_msghdr_from_user() {
         __copy_msghdr();
         __check_object_size() {
           __check_object_size.part.0() {
             check_stack_object();
           }
         }
       }
       ____sys_sendmsg() {
         sock_sendmsg() {
           security_socket_sendmsg() {
             apparmor_socket_sendmsg() {
               aa_sk_perm() {
                 __cond_resched();
               }
             }
           }
           packet_sendmsg() {
             packet_snd() {
               __rcu_read_lock();
               __rcu_read_unlock();
               sock_alloc_send_pskb() {
                 alloc_skb_with_frags() {
                   __alloc_skb() {
                     kmem_cache_alloc_node() {
                       __cond_resched();
                       should_failslab();
                     }
                     kmalloc_reserve() {
                       kmalloc_size_roundup() {
                         kmalloc_slab();
                       }
                       __kmalloc_node_track_caller() {
                         kmalloc_slab();
                         __kmem_cache_alloc_node() {
                           __cond_resched();
                           should_failslab();
                         }
                       }
                     }
                     __build_skb_around();
                   }
                 }
                 skb_set_owner_w();
               }
               skb_put();
               skb_copy_datagram_from_iter() {
                 __check_object_size() {
                   __check_object_size.part.0() {
                     check_stack_object();
                     is_vmalloc_addr();
                     __virt_addr_valid();
                     __check_heap_object();
                   }
                 }
               }
               packet_parse_headers() {
                 eth_header_parse_protocol();
                 __skb_flow_dissect() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
               }
               skb_partial_csum_set();
               __dev_queue_xmit() {
                 qdisc_pkt_len_init();
                 netdev_core_pick_tx();
                 validate_xmit_skb() {
                   netif_skb_features() {
                     passthru_features_check();
                     skb_network_protocol();
                   }
                   skb_csum_hwoffload_help();
                   validate_xmit_xfrm();
                 }
                 dev_hard_start_xmit() {
                   dev_queue_xmit_nit() {
                     __rcu_read_lock();
                     match_fanout_group();
                     __rcu_read_unlock();
                   }
                   veth_xmit [veth]() {
                     __rcu_read_lock();
                     skb_clone_tx_timestamp();
                     __dev_forward_skb() {
                       __dev_forward_skb2() {
                         skb_scrub_packet();
                         eth_type_trans();
                       }
                     }
                     __netif_rx() {
                       netif_rx_internal() {
                         enqueue_to_backlog() {
                           _raw_spin_lock_irqsave();
                           __raise_softirq_irqoff();
                           _raw_spin_unlock_irqrestore();
                         }
                       }
                     }
                     __rcu_read_unlock();
                   }
                 }
                 __local_bh_enable_ip() {
                   do_softirq.part.0() {
                     __do_softirq() {
                       net_rx_action() {
                         __usecs_to_jiffies();
                         __napi_poll() {
                           process_backlog() {
                             _raw_spin_lock_irq();
                             _raw_spin_unlock_irq();
                             __rcu_read_lock();
                             __netif_receive_skb() {
                               __netif_receive_skb_one_core() {
                                 __netif_receive_skb_core.constprop.0() {
                                   br_handle_frame [bridge]() {
                                     br_nf_pre_routing [br_netfilter]() {
                                       __rcu_read_lock();
                                       __rcu_read_unlock();
                                       __rcu_read_lock();
                                       __rcu_read_unlock();
                                       __rcu_read_lock();
                                       __rcu_read_unlock();
                                       skb_pull_rcsum();
                                       br_validate_ipv4 [br_netfilter]();
                                       skb_ext_add() {
                                         __skb_ext_alloc() {
                                           kmem_cache_alloc() {
                                             should_failslab();
                                           }
                                         }
                                       }
                                       setup_pre_routing [br_netfilter]() {
                                         brnf_get_logical_dev [br_netfilter]() {
                                           __rcu_read_lock();
                                           __rcu_read_unlock();
                                         }
                                         sock_wfree() {
                                           sock_def_write_space() {
                                             __rcu_read_lock();
                                             __wake_up_sync_key() {
                                               __wake_up_common_lock() {
                                                 _raw_spin_lock_irqsave();
                                                 __wake_up_common() {
                                                   pollwake();
                                                 }
                                                 _raw_spin_unlock_irqrestore();
                                               }
                                             }
                                             __rcu_read_unlock();
                                           }
                                         }
                                       }
                                       __rcu_read_lock();
                                       nf_hook_slow() {
                                         ip_sabotage_in [br_netfilter]();
                                         ipv4_conntrack_defrag [nf_defrag_ipv4]();
                                         ipv4_conntrack_in [nf_conntrack]() {
                                           nf_conntrack_in [nf_conntrack]() {
                                             get_l4proto [nf_conntrack]();
                                             resolve_normal_ct [nf_conntrack]() {
                                               nf_ct_get_tuple [nf_conntrack]();
                                               hash_conntrack_raw [nf_conntrack]();
                                               __nf_conntrack_find_get [nf_conntrack]() {
                                                 __rcu_read_lock();
                                                 __rcu_read_unlock();
                                               }
                                             }
                                             nf_conntrack_handle_packet [nf_conntrack]() {
                                               nf_conntrack_tcp_packet [nf_conntrack]() {
                                                 nf_checksum() {
                                                   nf_ip_checksum();
                                                 }
                                                 _raw_spin_lock_bh();
                                                 tcp_in_window [nf_conntrack]() {
                                                   nf_ct_seq_offset [nf_conntrack]();
                                                 }
                                                 _raw_spin_unlock_bh() {
                                                   __local_bh_enable_ip();
                                                 }
                                                 __nf_ct_refresh_acct [nf_conntrack]() {
                                                   nf_ct_acct_add [nf_conntrack]();
                                                 }
                                               }
                                             }
                                           }
                                         }
                                         nf_nat_ipv4_pre_routing [nf_nat]() {
                                           nf_nat_inet_fn [nf_nat]();
                                         }
                                       }
                                       __rcu_read_unlock();
                                       br_nf_pre_routing_finish [br_netfilter]() {
                                         skb_push();
                                         br_nf_hook_thresh [br_netfilter]() {
                                           nf_hook_slow();
                                           br_handle_frame_finish [bridge]() {
                                             br_allowed_ingress [bridge]();
                                             nbp_switchdev_frame_mark [bridge]();
                                             br_fdb_update [bridge]() {
                                               fdb_find_rcu [bridge]();
                                             }
                                             br_fdb_find_rcu [bridge]() {
                                               fdb_find_rcu [bridge]();
                                             }
                                             br_pass_frame_up [bridge]() {
                                               br_allowed_egress [bridge]();
                                               br_handle_vlan [bridge]();
                                               br_multicast_count [bridge]();
                                               netif_receive_skb() {
                                                 skb_defer_rx_timestamp();
                                                 __rcu_read_lock();
                                                 __netif_receive_skb() {
                                                   __netif_receive_skb_one_core() {
                                                     __netif_receive_skb_core.constprop.0();
                                                     ip_rcv() {
                                                       ip_rcv_core();
                                                       __rcu_read_lock();
                                                       nf_hook_slow() {
                                                         ip_sabotage_in [br_netfilter]() {
                                                           ip_rcv_finish() {
                                                             ip_rcv_finish_core.constprop.0() {
                                                               tcp_v4_early_demux() {
                                                                 __inet_lookup_established() {
                                                                   inet_ehashfn();
                                                                 }
                                                                 ipv4_dst_check();
                                                               }
                                                             }
                                                             ip_local_deliver() {
                                                               __rcu_read_lock();
                                                               nf_hook_slow() {
                                                                 nft_do_chain_ipv4 [nf_tables]() {
                                                                   nft_do_chain [nf_tables]() {
                                                                     expr_call_ops_eval [nf_tables]() {
                                                                       nft_counter_eval [nf_tables]() {
                                                                         __local_bh_enable_ip();
                                                                       }
                                                                     }
                                                                     expr_call_ops_eval [nf_tables]() {
                                                                       nft_immediate_eval [nf_tables]();
                                                                     }
                                                                     expr_call_ops_eval [nf_tables]() {
                                                                       nft_meta_get_eval [nf_tables]();
                                                                     }
                                                                     expr_call_ops_eval [nf_tables]() {
                                                                       nft_meta_get_eval [nf_tables]();
                                                                     }
                                                                     expr_call_ops_eval [nf_tables]() {
                                                                       nft_meta_get_eval [nf_tables]();
                                                                     }
                                                                     expr_call_ops_eval [nf_tables]() {
                                                                       nft_meta_get_eval [nf_tables]();
                                                                     }
                                                                   }
                                                                 }
                                                                 nf_nat_ipv4_local_in [nf_nat]() {
                                                                   nf_nat_inet_fn [nf_nat]();
                                                                 }
                                                                 nf_confirm [nf_conntrack]();
                                                               }
                                                               __rcu_read_unlock();
                                                               ip_local_deliver_finish() {
                                                                 __rcu_read_lock();
                                                                 ip_protocol_deliver_rcu() {
                                                                   raw_local_deliver() {
                                                                     raw_v4_input() {
                                                                       __rcu_read_lock();
                                                                       __rcu_read_unlock();
                                                                     }
                                                                   }
                                                                   tcp_v4_rcv() {
                                                                     tcp_inbound_md5_hash() {
                                                                       tcp_parse_md5sig_option();
                                                                     }
                                                                     tcp_filter() {
                                                                       sk_filter_trim_cap() {
                                                                         security_sock_rcv_skb() {
                                                                           apparmor_socket_sock_rcv_skb();
                                                                         }
                                                                         __rcu_read_lock();
                                                                         __rcu_read_unlock();
                                                                       }
                                                                     }
                                                                     tcp_v4_fill_cb();
                                                                     _raw_spin_lock();
                                                                     tcp_v4_do_rcv() {
                                                                       ipv4_dst_check();
                                                                       tcp_rcv_established() {
                                                                         tcp_mstamp_refresh() {
                                                                           ktime_get();
                                                                         }
                                                                         tcp_validate_incoming();
                                                                         tcp_ack() {
                                                                           ktime_get_seconds();
                                                                           tcp_clean_rtx_queue.constprop.0() {
                                                                             tcp_rack_advance();
                                                                             tcp_rate_skb_delivered();
                                                                             tcp_ack_tstamp();
                                                                             __sk_mem_reclaim() {
                                                                               __sk_mem_reduce_allocated() {
                                                                                 mem_cgroup_uncharge_skmem() {
                                                                                   __mod_memcg_state() {
                                                                                     cgroup_rstat_updated();
                                                                                   }
                                                                                   refill_stock() {
                                                                                     __refill_stock() {
                                                                                       drain_stock() {
                                                                                         page_counter_uncharge() {
                                                                                           page_counter_cancel() {
                                                                                             propagate_protected_usage();
                                                                                           }
                                                                                           page_counter_cancel() {
                                                                                             propagate_protected_usage();
                                                                                           }
                                                                                           page_counter_cancel() {
                                                                                             propagate_protected_usage();
                                                                                           }
                                                                                         }
                                                                                         __rcu_read_lock();
                                                                                         __rcu_read_unlock();
                                                                                       }
                                                                                       __rcu_read_lock();
                                                                                       __rcu_read_unlock();
                                                                                     }
                                                                                   }
                                                                                 }
                                                                               }
                                                                             }
                                                                             __kfree_skb() {
                                                                               skb_release_head_state();
                                                                               skb_release_data() {
                                                                                 skb_free_head() {
                                                                                   kfree() {
                                                                                     __kmem_cache_free() {
                                                                                       __slab_free();
                                                                                     }
                                                                                   }
                                                                                 }
                                                                               }
                                                                               kfree_skbmem() {
                                                                                 kmem_cache_free() {
                                                                                   __slab_free();
                                                                                 }
                                                                               }
                                                                             }
                                                                             tcp_chrono_stop();
                                                                             tcp_ack_update_rtt() {
                                                                               tcp_rtt_estimator() {
                                                                                 jiffies_to_usecs();
                                                                               }
                                                                               __usecs_to_jiffies();
                                                                             }
                                                                             cubictcp_acked();
                                                                           }
                                                                           tcp_rack_update_reo_wnd();
                                                                           tcp_schedule_loss_probe() {
                                                                             tcp_schedule_loss_probe.part.0();
                                                                           }
                                                                           tcp_rearm_rto();
                                                                           tcp_newly_delivered();
                                                                           tcp_rate_gen();
                                                                           cubictcp_cong_avoid();
                                                                           tcp_update_pacing_rate();
                                                                           tcp_xmit_recovery();
                                                                         }
                                                                         tcp_urg();
                                                                         tcp_data_queue() {
                                                                           __kfree_skb() {
                                                                             skb_release_head_state() {
                                                                               __skb_ext_put() {
                                                                                 kmem_cache_free();
                                                                               }
                                                                             }
                                                                             skb_release_data() {
                                                                               skb_free_head() {
                                                                                 kfree() {
                                                                                   __kmem_cache_free();
                                                                                 }
                                                                               }
                                                                             }
                                                                             kfree_skbmem() {
                                                                               kmem_cache_free();
                                                                             }
                                                                           }
                                                                         }
                                                                         tcp_check_space();
                                                                       }
                                                                     }
                                                                     _raw_spin_unlock();
                                                                   }
                                                                 }
                                                                 __rcu_read_unlock();
                                                               }
                                                             }
                                                           }
                                                         }
                                                       }
                                                       __rcu_read_unlock();
                                                     }
                                                   }
                                                 }
                                                 __rcu_read_unlock();
                                               }
                                             }
                                           }
                                         }
                                       }
                                     }
                                   }
                                 }
                               }
                             }
                             __rcu_read_unlock();
                             _raw_spin_lock_irq();
                             _raw_spin_unlock_irq();
                           }
                         }
                       }
                     }
                   }
                 }
               }
             }
           }
         }
       }
       kfree();
     }
     __cond_resched();
     ___sys_sendmsg() {
       copy_msghdr_from_user() {
         __copy_msghdr();
         __check_object_size() {
           __check_object_size.part.0() {
             check_stack_object();
           }
         }
       }
       ____sys_sendmsg() {
         sock_sendmsg() {
           security_socket_sendmsg() {
             apparmor_socket_sendmsg() {
               aa_sk_perm() {
                 __cond_resched();
               }
             }
           }
           packet_sendmsg() {
             packet_snd() {
               __rcu_read_lock();
               __rcu_read_unlock();
               sock_alloc_send_pskb() {
                 alloc_skb_with_frags() {
                   __alloc_skb() {
                     kmem_cache_alloc_node() {
                       __cond_resched();
                       should_failslab();
                     }
                     kmalloc_reserve() {
                       kmalloc_size_roundup() {
                         kmalloc_slab();
                       }
                       __kmalloc_node_track_caller() {
                         kmalloc_slab();
                         __kmem_cache_alloc_node() {
                           __cond_resched();
                           should_failslab();
                         }
                       }
                     }
                     __build_skb_around();
                   }
                 }
                 skb_set_owner_w();
               }
               skb_put();
               skb_copy_datagram_from_iter() {
                 __check_object_size() {
                   __check_object_size.part.0() {
                     check_stack_object();
                     is_vmalloc_addr();
                     __virt_addr_valid();
                     __check_heap_object();
                   }
                 }
               }
               packet_parse_headers() {
                 eth_header_parse_protocol();
                 __skb_flow_dissect() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
               }
               skb_partial_csum_set();
               __dev_queue_xmit() {
                 qdisc_pkt_len_init();
                 netdev_core_pick_tx();
                 validate_xmit_skb() {
                   netif_skb_features() {
                     passthru_features_check();
                     skb_network_protocol();
                   }
                   skb_csum_hwoffload_help();
                   validate_xmit_xfrm();
                 }
                 dev_hard_start_xmit() {
                   dev_queue_xmit_nit() {
                     __rcu_read_lock();
                     match_fanout_group();
                     __rcu_read_unlock();
                   }
                   veth_xmit [veth]() {
                     __rcu_read_lock();
                     skb_clone_tx_timestamp();
                     __dev_forward_skb() {
                       __dev_forward_skb2() {
                         skb_scrub_packet();
                         eth_type_trans();
                       }
                     }
                     __netif_rx() {
                       netif_rx_internal() {
                         enqueue_to_backlog() {
                           _raw_spin_lock_irqsave();
                           __raise_softirq_irqoff();
                           _raw_spin_unlock_irqrestore();
                         }
                       }
                     }
                     __rcu_read_unlock();
                   }
                 }
                 __local_bh_enable_ip() {
                   do_softirq.part.0() {
                     __do_softirq() {
                       net_rx_action() {
                         __usecs_to_jiffies();
                         __napi_poll() {
                           process_backlog() {
                             _raw_spin_lock_irq();
                             _raw_spin_unlock_irq();
                             __rcu_read_lock();
                             __netif_receive_skb() {
                               __netif_receive_skb_one_core() {
                                 __netif_receive_skb_core.constprop.0() {
                                   br_handle_frame [bridge]() {
                                     br_nf_pre_routing [br_netfilter]() {
                                       __rcu_read_lock();
                                       __rcu_read_unlock();
                                       __rcu_read_lock();
                                       __rcu_read_unlock();
                                       __rcu_read_lock();
                                       __rcu_read_unlock();
                                       skb_pull_rcsum();
                                       br_validate_ipv4 [br_netfilter]();
                                       skb_ext_add() {
                                         __skb_ext_alloc() {
                                           kmem_cache_alloc() {
                                             should_failslab();
                                           }
                                         }
                                       }
                                       setup_pre_routing [br_netfilter]() {
                                         brnf_get_logical_dev [br_netfilter]() {
                                           __rcu_read_lock();
                                           __rcu_read_unlock();
                                         }
                                         sock_wfree() {
                                           sock_def_write_space() {
                                             __rcu_read_lock();
                                             __wake_up_sync_key() {
                                               __wake_up_common_lock() {
                                                 _raw_spin_lock_irqsave();
                                                 __wake_up_common() {
                                                   pollwake();
                                                 }
                                                 _raw_spin_unlock_irqrestore();
                                               }
                                             }
                                             __rcu_read_unlock();
                                           }
                                         }
                                       }
                                       __rcu_read_lock();
                                       nf_hook_slow() {
                                         ip_sabotage_in [br_netfilter]();
                                         ipv4_conntrack_defrag [nf_defrag_ipv4]();
                                         ipv4_conntrack_in [nf_conntrack]() {
                                           nf_conntrack_in [nf_conntrack]() {
                                             get_l4proto [nf_conntrack]();
                                             resolve_normal_ct [nf_conntrack]() {
                                               nf_ct_get_tuple [nf_conntrack]();
                                               hash_conntrack_raw [nf_conntrack]();
                                               __nf_conntrack_find_get [nf_conntrack]() {
                                                 __rcu_read_lock();
                                                 __rcu_read_unlock();
                                               }
                                             }
                                             nf_conntrack_handle_packet [nf_conntrack]() {
                                               nf_conntrack_tcp_packet [nf_conntrack]() {
                                                 nf_checksum() {
                                                   nf_ip_checksum();
                                                 }
                                                 _raw_spin_lock_bh();
                                                 tcp_in_window [nf_conntrack]() {
                                                   nf_ct_seq_offset [nf_conntrack]();
                                                 }
                                                 _raw_spin_unlock_bh() {
                                                   __local_bh_enable_ip();
                                                 }
                                                 __nf_ct_refresh_acct [nf_conntrack]() {
                                                   nf_ct_acct_add [nf_conntrack]();
                                                 }
                                               }
                                             }
                                           }
                                         }
                                         nf_nat_ipv4_pre_routing [nf_nat]() {
                                           nf_nat_inet_fn [nf_nat]();
                                         }
                                       }
                                       __rcu_read_unlock();
                                       br_nf_pre_routing_finish [br_netfilter]() {
                                         skb_push();
                                         br_nf_hook_thresh [br_netfilter]() {
                                           nf_hook_slow();
                                           br_handle_frame_finish [bridge]() {
                                             br_allowed_ingress [bridge]();
                                             nbp_switchdev_frame_mark [bridge]();
                                             br_fdb_update [bridge]() {
                                               fdb_find_rcu [bridge]();
                                             }
                                             br_fdb_find_rcu [bridge]() {
                                               fdb_find_rcu [bridge]();
                                             }
                                             br_pass_frame_up [bridge]() {
                                               br_allowed_egress [bridge]();
                                               br_handle_vlan [bridge]();
                                               br_multicast_count [bridge]();
                                               netif_receive_skb() {
                                                 skb_defer_rx_timestamp();
                                                 __rcu_read_lock();
                                                 __netif_receive_skb() {
                                                   __netif_receive_skb_one_core() {
                                                     __netif_receive_skb_core.constprop.0();
                                                     ip_rcv() {
                                                       ip_rcv_core();
                                                       __rcu_read_lock();
                                                       nf_hook_slow() {
                                                         ip_sabotage_in [br_netfilter]() {
                                                           ip_rcv_finish() {
                                                             ip_rcv_finish_core.constprop.0() {
                                                               tcp_v4_early_demux() {
                                                                 __inet_lookup_established() {
                                                                   inet_ehashfn();
                                                                 }
                                                                 ipv4_dst_check();
                                                               }
                                                             }
                                                             ip_local_deliver() {
                                                               __rcu_read_lock();
                                                               nf_hook_slow() {
                                                                 nft_do_chain_ipv4 [nf_tables]() {
                                                                   nft_do_chain [nf_tables]() {
                                                                     expr_call_ops_eval [nf_tables]() {
                                                                       nft_counter_eval [nf_tables]() {
                                                                         __local_bh_enable_ip();
                                                                       }
                                                                     }
                                                                     expr_call_ops_eval [nf_tables]() {
                                                                       nft_immediate_eval [nf_tables]();
                                                                     }
                                                                     expr_call_ops_eval [nf_tables]() {
                                                                       nft_meta_get_eval [nf_tables]();
                                                                     }
                                                                     expr_call_ops_eval [nf_tables]() {
                                                                       nft_meta_get_eval [nf_tables]();
                                                                     }
                                                                     expr_call_ops_eval [nf_tables]() {
                                                                       nft_meta_get_eval [nf_tables]();
                                                                     }
                                                                     expr_call_ops_eval [nf_tables]() {
                                                                       nft_meta_get_eval [nf_tables]();
                                                                     }
                                                                   }
                                                                 }
                                                                 nf_nat_ipv4_local_in [nf_nat]() {
                                                                   nf_nat_inet_fn [nf_nat]();
                                                                 }
                                                                 nf_confirm [nf_conntrack]();
                                                               }
                                                               __rcu_read_unlock();
                                                               ip_local_deliver_finish() {
                                                                 __rcu_read_lock();
                                                                 ip_protocol_deliver_rcu() {
                                                                   raw_local_deliver() {
                                                                     raw_v4_input() {
                                                                       __rcu_read_lock();
                                                                       __rcu_read_unlock();
                                                                     }
                                                                   }
                                                                   tcp_v4_rcv() {
                                                                     tcp_inbound_md5_hash() {
                                                                       tcp_parse_md5sig_option();
                                                                     }
                                                                     tcp_filter() {
                                                                       sk_filter_trim_cap() {
                                                                         security_sock_rcv_skb() {
                                                                           apparmor_socket_sock_rcv_skb();
                                                                         }
                                                                         __rcu_read_lock();
                                                                         __rcu_read_unlock();
                                                                       }
                                                                     }
                                                                     tcp_v4_fill_cb();
                                                                     _raw_spin_lock();
                                                                     tcp_v4_do_rcv() {
                                                                       ipv4_dst_check();
                                                                       tcp_rcv_established() {
                                                                         tcp_mstamp_refresh() {
                                                                           ktime_get();
                                                                         }
                                                                         tcp_validate_incoming();
                                                                         tcp_ack() {
                                                                           ktime_get_seconds();
                                                                           tcp_sync_mss();
                                                                         }
                                                                         tcp_urg();
                                                                         tcp_data_queue() {
                                                                           sk_forced_mem_schedule() {
                                                                             mem_cgroup_charge_skmem() {
                                                                               try_charge_memcg() {
                                                                                 consume_stock();
                                                                               }
                                                                               __mod_memcg_state() {
                                                                                 cgroup_rstat_updated();
                                                                               }
                                                                             }
                                                                           }
                                                                           tcp_queue_rcv();
                                                                           tcp_event_data_recv();
                                                                           tcp_data_ready() {
                                                                             sock_def_readable() {
                                                                               __rcu_read_lock();
                                                                               __wake_up_sync_key() {
                                                                                 __wake_up_common_lock() {
                                                                                   _raw_spin_lock_irqsave();
                                                                                   __wake_up_common() {
                                                                                     woken_wake_function() {
                                                                                       default_wake_function() {
                                                                                         try_to_wake_up() {
                                                                                           _raw_spin_lock_irqsave();
                                                                                           select_task_rq_fair() {
                                                                                             __rcu_read_lock();
                                                                                             wake_affine() {
                                                                                               available_idle_cpu();
                                                                                               available_idle_cpu();
                                                                                             }
                                                                                             select_idle_sibling() {
                                                                                               available_idle_cpu();
                                                                                             }
                                                                                             __rcu_read_unlock();
                                                                                           }
                                                                                           ttwu_queue_wakelist() {
                                                                                             __smp_call_single_queue() {
                                                                                               send_call_function_single_ipi();
                                                                                             }
                                                                                           }
                                                                                           _raw_spin_unlock_irqrestore();
                                                                                         }
                                                                                       }
                                                                                     }
                                                                                   }
                                                                                   _raw_spin_unlock_irqrestore();
                                                                                 }
                                                                               }
                                                                               __rcu_read_unlock();
                                                                             }
                                                                           }
                                                                         }
                                                                         tcp_check_space();
                                                                         __tcp_ack_snd_check() {
                                                                           tcp_send_ack() {
                                                                             __tcp_send_ack.part.0() {
                                                                               __alloc_skb() {
                                                                                 kmem_cache_alloc_node() {
                                                                                   should_failslab();
                                                                                 }
                                                                                 kmalloc_reserve() {
                                                                                   kmalloc_size_roundup() {
                                                                                     kmalloc_slab();
                                                                                   }
                                                                                   __kmalloc_node_track_caller() {
                                                                                     kmalloc_slab();
                                                                                     __kmem_cache_alloc_node() {
                                                                                       should_failslab();
                                                                                     }
                                                                                   }
                                                                                 }
                                                                                 __build_skb_around();
                                                                               }
                                                                               __tcp_transmit_skb() {
                                                                                 tcp_established_options();
                                                                                 skb_push();
                                                                                 __tcp_select_window();
                                                                                 tcp_options_write();
                                                                                 bpf_skops_write_hdr_opt.isra.0();
                                                                                 tcp_v4_send_check();
                                                                                 ip_queue_xmit() {
                                                                                   __ip_queue_xmit() {
                                                                                     __rcu_read_lock();
                                                                                     __sk_dst_check() {
                                                                                       ipv4_dst_check();
                                                                                     }
                                                                                     skb_push();
                                                                                     ip_local_out() {
                                                                                       __ip_local_out() {
                                                                                         ip_send_check();
                                                                                         __rcu_read_lock();
                                                                                         nf_hook_slow() {
                                                                                           ipv4_conntrack_defrag [nf_defrag_ipv4]();
                                                                                           ipv4_conntrack_local [nf_conntrack]() {
                                                                                             nf_conntrack_in [nf_conntrack]() {
                                                                                               get_l4proto [nf_conntrack]();
                                                                                               resolve_normal_ct [nf_conntrack]() {
                                                                                                 nf_ct_get_tuple [nf_conntrack]();
                                                                                                 hash_conntrack_raw [nf_conntrack]();
                                                                                                 __nf_conntrack_find_get [nf_conntrack]() {
                                                                                                   __rcu_read_lock();
                                                                                                   __rcu_read_unlock();
                                                                                                 }
                                                                                               }
                                                                                               nf_conntrack_handle_packet [nf_conntrack]() {
                                                                                                 nf_conntrack_tcp_packet [nf_conntrack]() {
                                                                                                   _raw_spin_lock_bh();
                                                                                                   tcp_in_window [nf_conntrack]();
                                                                                                   _raw_spin_unlock_bh();
                                                                                                   __nf_ct_refresh_acct [nf_conntrack]();
                                                                                                 }
                                                                                               }
                                                                                             }
                                                                                           }
                                                                                           nf_nat_ipv4_local_fn [nf_nat]() {
                                                                                             nf_nat_inet_fn [nf_nat]();
                                                                                           }
                                                                                           nft_do_chain_ipv4 [nf_tables]() {
                                                                                             nft_do_chain [nf_tables]() {
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_counter_eval [nf_tables]() {
                                                                                                   __local_bh_enable_ip();
                                                                                                 }
                                                                                               }
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_immediate_eval [nf_tables]();
                                                                                               }
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_meta_get_eval [nf_tables]();
                                                                                               }
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_meta_get_eval [nf_tables]();
                                                                                               }
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_meta_get_eval [nf_tables]();
                                                                                               }
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_meta_get_eval [nf_tables]();
                                                                                               }
                                                                                             }
                                                                                           }
                                                                                         }
                                                                                         __rcu_read_unlock();
                                                                                       }
                                                                                       ip_output() {
                                                                                         __rcu_read_lock();
                                                                                         nf_hook_slow() {
                                                                                           apparmor_ip_postroute();
                                                                                           nft_do_chain_ipv4 [nf_tables]() {
                                                                                             nft_do_chain [nf_tables]() {
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_counter_eval [nf_tables]() {
                                                                                                   __local_bh_enable_ip();
                                                                                                 }
                                                                                               }
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_immediate_eval [nf_tables]();
                                                                                               }
                                                                                               expr_call_ops_eval [nf_tables]() {
                                                                                                 nft_meta_get_eval [nf_tables]();
                                                                                               }
                                                                                             }
                                                                                           }
                                                                                           nf_nat_ipv4_out [nf_nat]() {
                                                                                             nf_nat_inet_fn [nf_nat]();
                                                                                           }
                                                                                           nf_confirm [nf_conntrack]();
                                                                                         }
                                                                                         __rcu_read_unlock();
                                                                                         ip_finish_output() {
                                                                                           __ip_finish_output() {
                                                                                             ip_finish_output2() {
                                                                                               __dev_queue_xmit() {
                                                                                                 qdisc_pkt_len_init();
                                                                                                 netdev_core_pick_tx();
                                                                                                 validate_xmit_skb() {
                                                                                                   netif_skb_features();
                                                                                                   skb_csum_hwoffload_help();
                                                                                                   validate_xmit_xfrm();
                                                                                                 }
                                                                                                 dev_hard_start_xmit() {
                                                                                                   br_dev_xmit [bridge]();
                                                                                                 }
                                                                                                 __local_bh_enable_ip();
                                                                                               }
                                                                                               __local_bh_enable_ip();
                                                                                             }
                                                                                           }
                                                                                         }
                                                                                       }
                                                                                     }
                                                                                     __rcu_read_unlock();
                                                                                   }
                                                                                 }
                                                                               }
                                                                             }
                                                                           }
                                                                         }
                                                                       }
                                                                     }
                                                                     _raw_spin_unlock();
                                                                   }
                                                                 }
                                                                 __rcu_read_unlock();
                                                               }
                                                             }
                                                           }
                                                         }
                                                       }
                                                       __rcu_read_unlock();
                                                     }
                                                   }
                                                 }
                                                 __rcu_read_unlock();
                                               }
                                             }
                                           }
                                         }
                                       }
                                     }
                                   }
                                 }
                               }
                             }
                             __rcu_read_unlock();
                             _raw_spin_lock_irq();
                             _raw_spin_unlock_irq();
                             __rcu_read_lock();
                             __netif_receive_skb() {
                               __netif_receive_skb_one_core() {
                                 __netif_receive_skb_core.constprop.0() {
                                   packet_rcv_fanout() {
                                     __skb_get_hash_symmetric() {
                                       __skb_flow_dissect() {
                                         __rcu_read_lock();
                                         __rcu_read_unlock();
                                         __skb_flow_get_ports();
                                       }
                                     }
                                     tpacket_rcv() {
                                       skb_push();
                                       __rcu_read_lock();
                                       __rcu_read_unlock();
                                       __packet_rcv_has_room() {
                                         packet_lookup_frame.isra.0();
                                       }
                                       _raw_spin_lock();
                                       packet_lookup_frame.isra.0();
                                       _raw_spin_unlock();
                                       skb_copy_bits();
                                       tpacket_get_timestamp();
                                       ktime_get_real_ts64();
                                       eth_header_parse();
                                       _raw_spin_lock();
                                       _raw_spin_unlock();
                                       sock_def_readable() {
                                         __rcu_read_lock();
                                         __wake_up_sync_key() {
                                           __wake_up_common_lock() {
                                             _raw_spin_lock_irqsave();
                                             __wake_up_common() {
                                               pollwake() {
                                                 default_wake_function() {
                                                   try_to_wake_up() {
                                                     _raw_spin_lock_irqsave();
                                                     ttwu_queue_wakelist();
                                                     raw_spin_rq_lock_nested() {
                                                       _raw_spin_lock();
                                                     }
                                                     update_rq_clock();
                                                     ttwu_do_activate() {
                                                       psi_task_change() {
                                                         psi_flags_change();
                                                         psi_group_change() {
                                                           record_times();
                                                         }
                                                         psi_group_change() {
                                                           record_times();
                                                         }
                                                         psi_group_change() {
                                                           record_times();
                                                         }
                                                       }
                                                       enqueue_task_fair() {
                                                         enqueue_entity() {
                                                           update_curr() {
                                                             update_min_vruntime();
                                                             cpuacct_charge();
                                                             __cgroup_account_cputime() {
                                                               cgroup_rstat_updated();
                                                             }
                                                           }
                                                           __update_load_avg_se();
                                                           __update_load_avg_cfs_rq();
                                                           update_cfs_group();
                                                           place_entity();
                                                         }
                                                         __update_load_avg_se();
                                                         __update_load_avg_cfs_rq();
                                                         update_cfs_group() {
                                                           reweight_entity() {
                                                             update_curr() {
                                                               update_min_vruntime();
                                                             }
                                                           }
                                                         }
                                                         __update_load_avg_se();
                                                         __update_load_avg_cfs_rq();
                                                         update_cfs_group() {
                                                           reweight_entity() {
                                                             update_curr() {
                                                               __calc_delta();
                                                               update_min_vruntime();
                                                             }
                                                           }
                                                         }
                                                         hrtick_update();
                                                       }
                                                       ttwu_do_wakeup() {
                                                         check_preempt_curr() {
                                                           check_preempt_wakeup() {
                                                             update_curr();
                                                             set_next_buddy();
                                                             resched_curr();
                                                           }
                                                         }
                                                       }
                                                     }
                                                     raw_spin_rq_unlock() {
                                                       _raw_spin_unlock();
                                                     }
                                                     _raw_spin_unlock_irqrestore();
                                                   }
                                                 }
                                               }
                                             }
                                             _raw_spin_unlock_irqrestore();
                                           }
                                         }
                                         __rcu_read_unlock();
                                       }
                                       consume_skb();
                                     }
                                   }
                                 }
                                 ip_rcv() {
                                   ip_rcv_core() {
                                     __sock_wfree();
                                   }
                                   __rcu_read_lock();
                                   __rcu_read_unlock();
                                   ip_rcv_finish_core.constprop.0() {
                                     tcp_v4_early_demux() {
                                       __inet_lookup_established() {
                                         inet_ehashfn();
                                       }
                                     }
                                     ip_route_input_noref() {
                                       __rcu_read_lock();
                                       ip_route_input_slow() {
                                         make_kuid() {
                                           map_id_range_down();
                                         }
                                         __rcu_read_lock();
                                         fib_table_lookup();
                                         __rcu_read_unlock();
                                         rt_dst_alloc() {
                                           dst_alloc() {
                                             kmem_cache_alloc() {
                                               should_failslab();
                                             }
                                           }
                                         }
                                       }
                                       __rcu_read_unlock();
                                     }
                                   }
                                   ip_error() {
                                     __rcu_read_lock();
                                     l3mdev_master_ifindex_rcu();
                                     __rcu_read_unlock();
                                     inet_getpeer() {
                                       __rcu_read_lock();
                                       lookup();
                                       __rcu_read_unlock();
                                     }
                                     inet_putpeer();
                                     kfree_skb_reason() {
                                       skb_release_head_state() {
                                         dst_release() {
                                           call_rcu() {
                                             __call_rcu_common.constprop.0() {
                                               rcu_segcblist_enqueue();
                                             }
                                           }
                                         }
                                       }
                                       skb_release_data() {
                                         skb_free_head() {
                                           kfree() {
                                             __kmem_cache_free();
                                           }
                                         }
                                       }
                                       kfree_skbmem() {
                                         kmem_cache_free();
                                       }
                                     }
                                   }
                                 }
                               }
                             }
                             __rcu_read_unlock();
                             _raw_spin_lock_irq();
                             _raw_spin_unlock_irq();
                           }
                         }
                         _raw_spin_lock_irqsave();
                         _raw_spin_unlock_irqrestore();
                         napi_consume_skb() {
                           skb_release_head_state() {
                             __skb_ext_put() {
                               kmem_cache_free();
                             }
                           }
                           skb_release_data() {
                             skb_free_head() {
                               kfree() {
                                 __kmem_cache_free();
                               }
                             }
                           }
                         }
                       }
                     }
                   }
                 }
               }
             }
           }
         }
       }
       kfree();
     }
     __cond_resched() {
       rcu_note_context_switch();
       raw_spin_rq_lock_nested() {
         _raw_spin_lock();
       }
       update_rq_clock();
       pick_next_task() {
         pick_next_task_fair() {
           update_curr();
           check_cfs_rq_runtime();
           pick_next_entity();
           update_curr();
           check_cfs_rq_runtime();
           pick_next_entity();
           update_curr();
           check_cfs_rq_runtime();
           pick_next_entity();
           put_prev_entity() {
             update_curr();
             check_cfs_rq_runtime();
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
           }
           set_next_entity() {
             clear_buddies();
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
           }
         }
       }
       psi_task_switch() {
         psi_flags_change();
         psi_flags_change();
       }
       __traceiter_sched_switch() {
         _raw_spin_lock_irqsave();
         _raw_spin_unlock_irqrestore();
       }
       switch_mm_irqs_off();
       save_fpregs_to_fpstate() {
         xfd_validate_state();
       }
       finish_task_switch.isra.0() {
         raw_spin_rq_unlock() {
           _raw_spin_unlock();
         }
         irq_enter_rcu();
         idle_cpu();
       }
     } /* __cond_resched */
     fput();
   } /* __sys_sendmmsg */
 } /* __x64_sys_sendmmsg */
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
       migrate_disable();
       migrate_enable();
       migrate_disable();
       migrate_enable();
     }
   }
 }
 __x64_sys_futex() {
   do_futex() {
     futex_wait() {
       futex_setup_timer();
       futex_wait_setup() {
         get_futex_key();
         futex_q_lock() {
           futex_hash();
           _raw_spin_lock();
         }
         futex_get_value_locked();
       }
       futex_wait_queue() {
         __futex_queue();
         _raw_spin_unlock();
         schedule() {
           rcu_note_context_switch();
           raw_spin_rq_lock_nested() {
             _raw_spin_lock();
           }
           update_rq_clock();
           dequeue_task_fair() {
             dequeue_entity() {
               update_curr() {
                 update_min_vruntime();
                 cpuacct_charge();
                 __cgroup_account_cputime() {
                   cgroup_rstat_updated();
                 }
               }
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
               clear_buddies();
               update_cfs_group();
               update_min_vruntime();
             }
             set_next_buddy();
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
             update_cfs_group() {
               reweight_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
               }
             }
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
             update_cfs_group() {
               reweight_entity() {
                 update_curr() {
                   __calc_delta();
                   update_min_vruntime();
                 }
               }
             }
             hrtick_update();
           }
           pick_next_task() {
             pick_next_task_fair() {
               update_curr();
               check_cfs_rq_runtime();
               pick_next_entity();
               update_curr();
               check_cfs_rq_runtime();
               pick_next_entity();
               check_cfs_rq_runtime();
               pick_next_entity();
               put_prev_entity() {
                 check_cfs_rq_runtime();
               }
               set_next_entity() {
                 clear_buddies();
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
               }
             }
           }
           psi_task_switch() {
             psi_flags_change();
             psi_flags_change();
             psi_group_change() {
               record_times();
             }
             psi_group_change() {
               record_times();
             }
             psi_group_change() {
               record_times();
             }
           }
           __traceiter_sched_switch() {
             _raw_spin_lock_irqsave();
             _raw_spin_unlock_irqrestore();
           }
           switch_mm_irqs_off();
           save_fpregs_to_fpstate() {
             xfd_validate_state();
           }
