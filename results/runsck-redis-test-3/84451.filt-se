 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
       migrate_disable();
       migrate_enable();
       migrate_disable();
       migrate_enable();
     }
   }
 }
 __x64_sys_futex() {
   do_futex() {
     futex_wait() {
       futex_setup_timer();
       futex_wait_setup() {
         get_futex_key();
         futex_q_lock() {
           futex_hash();
           _raw_spin_lock();
         }
         futex_get_value_locked();
       }
       futex_wait_queue() {
         __futex_queue();
         _raw_spin_unlock();
         schedule() {
           rcu_note_context_switch();
           raw_spin_rq_lock_nested() {
             _raw_spin_lock();
           }
           update_rq_clock();
           dequeue_task_fair() {
             dequeue_entity() {
               update_curr() {
                 update_min_vruntime();
                 cpuacct_charge();
                 __cgroup_account_cputime() {
                   cgroup_rstat_updated();
                 }
               }
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
               clear_buddies();
               update_cfs_group();
               update_min_vruntime();
             }
             set_next_buddy();
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
             update_cfs_group() {
               reweight_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
               }
             }
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
             update_cfs_group() {
               reweight_entity() {
                 update_curr() {
                   __calc_delta();
                   update_min_vruntime();
                 }
               }
             }
             hrtick_update();
           }
           pick_next_task() {
             pick_next_task_fair() {
               update_curr();
               check_cfs_rq_runtime();
               pick_next_entity();
               update_curr();
               check_cfs_rq_runtime();
               pick_next_entity();
               check_cfs_rq_runtime();
               pick_next_entity();
               put_prev_entity() {
                 check_cfs_rq_runtime();
               }
               set_next_entity() {
                 clear_buddies();
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
               }
             }
           }
           psi_task_switch() {
             psi_flags_change();
             psi_flags_change();
             psi_group_change() {
               record_times();
             }
             psi_group_change() {
               record_times();
             }
             psi_group_change() {
               record_times();
             }
           }
           __traceiter_sched_switch() {
             _raw_spin_lock_irqsave();
             _raw_spin_unlock_irqrestore();
           }
           switch_mm_irqs_off();
           save_fpregs_to_fpstate() {
             xfd_validate_state();
           }
           finish_task_switch.isra.0() {
             raw_spin_rq_unlock() {
               _raw_spin_unlock();
             }
           }
         } /* schedule */
       } /* futex_wait_queue */
       futex_unqueue();
     } /* futex_wait */
   } /* do_futex */
 } /* __x64_sys_futex */
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
       migrate_disable();
       migrate_enable();
       migrate_disable();
       migrate_enable();
     }
   }
 }
 __x64_sys_futex() {
   do_futex() {
     futex_wait() {
       futex_setup_timer();
       futex_wait_setup() {
         get_futex_key();
         futex_q_lock() {
           futex_hash();
           _raw_spin_lock();
         }
         futex_get_value_locked();
       }
       futex_wait_queue() {
         __futex_queue();
         _raw_spin_unlock();
         schedule() {
           rcu_note_context_switch();
           raw_spin_rq_lock_nested() {
             _raw_spin_lock();
           }
           update_rq_clock();
           dequeue_task_fair() {
             dequeue_entity() {
               update_curr() {
                 update_min_vruntime();
                 cpuacct_charge();
                 __cgroup_account_cputime() {
                   cgroup_rstat_updated();
                 }
               }
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
               clear_buddies();
               update_cfs_group();
               update_min_vruntime();
             }
             set_next_buddy();
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
             update_cfs_group() {
               reweight_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
               }
             }
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
             update_cfs_group() {
               reweight_entity() {
                 update_curr() {
                   __calc_delta();
                   update_min_vruntime();
                 }
               }
             }
             hrtick_update();
           }
           pick_next_task() {
             pick_next_task_fair() {
               update_curr();
               check_cfs_rq_runtime();
               pick_next_entity();
               update_curr();
               check_cfs_rq_runtime();
               pick_next_entity();
               check_cfs_rq_runtime();
               pick_next_entity();
               put_prev_entity() {
                 check_cfs_rq_runtime();
               }
               set_next_entity() {
                 clear_buddies();
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
               }
             }
           }
           psi_task_switch() {
             psi_flags_change();
             psi_flags_change();
             psi_group_change() {
               record_times();
             }
             psi_group_change() {
               record_times();
             }
             psi_group_change() {
               record_times();
             }
           }
           __traceiter_sched_switch() {
             _raw_spin_lock_irqsave();
             _raw_spin_unlock_irqrestore();
           }
           switch_mm_irqs_off();
           save_fpregs_to_fpstate() {
             xfd_validate_state();
           }
           finish_task_switch.isra.0() {
             raw_spin_rq_unlock() {
               _raw_spin_unlock();
             }
           }
         } /* schedule */
       } /* futex_wait_queue */
       futex_unqueue();
     } /* futex_wait */
   } /* do_futex */
 } /* __x64_sys_futex */
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_nanosleep() {
   get_timespec64();
   hrtimer_nanosleep() {
     __hrtimer_init();
     do_nanosleep() {
       hrtimer_start_range_ns() {
         _raw_spin_lock_irqsave();
         __hrtimer_start_range_ns() {
           ktime_get();
           get_nohz_timer_target();
           enqueue_hrtimer();
         }
         hrtimer_reprogram() {
           tick_program_event() {
             clockevents_program_event() {
               ktime_get();
               lapic_next_deadline();
             }
           }
         }
         _raw_spin_unlock_irqrestore();
       }
       schedule() {
         rcu_note_context_switch();
         raw_spin_rq_lock_nested() {
           _raw_spin_lock();
         }
         update_rq_clock();
         dequeue_task_fair() {
           dequeue_entity() {
             update_curr() {
               update_min_vruntime();
               cpuacct_charge();
               __cgroup_account_cputime() {
                 cgroup_rstat_updated();
               }
             }
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
             clear_buddies();
             update_cfs_group();
             update_min_vruntime();
           }
           set_next_buddy();
           __update_load_avg_se();
           __update_load_avg_cfs_rq();
           update_cfs_group() {
             reweight_entity() {
               update_curr() {
                 update_min_vruntime();
               }
             }
           }
           __update_load_avg_se();
           __update_load_avg_cfs_rq();
           update_cfs_group() {
             reweight_entity() {
               update_curr() {
                 __calc_delta();
                 update_min_vruntime();
               }
             }
           }
           hrtick_update();
         }
         pick_next_task() {
           pick_next_task_fair() {
             update_curr();
             check_cfs_rq_runtime();
             pick_next_entity();
             update_curr();
             check_cfs_rq_runtime();
             pick_next_entity();
             check_cfs_rq_runtime();
             pick_next_entity();
             put_prev_entity() {
               check_cfs_rq_runtime();
             }
             set_next_entity() {
               clear_buddies();
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
             }
           }
         }
         psi_task_switch() {
           psi_flags_change();
           psi_flags_change();
           psi_group_change() {
             record_times();
           }
           psi_group_change() {
             record_times();
           }
           psi_group_change() {
             record_times();
           }
         }
         __traceiter_sched_switch() {
           _raw_spin_lock_irqsave();
           _raw_spin_unlock_irqrestore();
         }
         switch_mm_irqs_off();
         save_fpregs_to_fpstate() {
           xfd_validate_state();
         }
         finish_task_switch.isra.0() {
           raw_spin_rq_unlock() {
             _raw_spin_unlock();
           }
         }
       } /* schedule */
       hrtimer_active();
     }
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
   switch_fpu_return();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
       migrate_disable();
       migrate_enable();
       migrate_disable();
       migrate_enable();
     }
   }
 }
 __x64_sys_futex() {
   do_futex() {
     futex_wake() {
       get_futex_key();
       futex_hash();
       _raw_spin_lock();
       futex_wake_mark() {
         __futex_unqueue();
         wake_q_add_safe();
       }
       _raw_spin_unlock();
       wake_up_q() {
         try_to_wake_up() {
           _raw_spin_lock_irqsave();
           ttwu_queue_wakelist();
           raw_spin_rq_lock_nested() {
             _raw_spin_lock();
           }
           update_rq_clock();
           ttwu_do_activate() {
             psi_task_change() {
               psi_flags_change();
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
             }
             enqueue_task_fair() {
               enqueue_entity() {
                 update_curr() {
                   update_min_vruntime();
                   cpuacct_charge();
                   __cgroup_account_cputime() {
                     cgroup_rstat_updated();
                   }
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 update_cfs_group();
                 place_entity();
               }
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
               update_cfs_group() {
                 reweight_entity() {
                   update_curr() {
                     update_min_vruntime();
                   }
                 }
               }
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
               update_cfs_group() {
                 reweight_entity() {
                   update_curr() {
                     __calc_delta();
                     update_min_vruntime();
                   }
                 }
               }
               hrtick_update();
             }
             ttwu_do_wakeup() {
               check_preempt_curr() {
                 check_preempt_wakeup() {
                   update_curr();
                 }
               }
             }
           }
           raw_spin_rq_unlock() {
             _raw_spin_unlock();
           }
           _raw_spin_unlock_irqrestore();
         }
       }
     }
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
       migrate_disable();
       migrate_enable();
       migrate_disable();
       migrate_enable();
     }
   }
 }
 __x64_sys_sendmmsg() {
   __sys_sendmmsg() {
     sockfd_lookup_light() {
       __fdget() {
         __fget_light() {
           __rcu_read_lock();
           __rcu_read_unlock();
         }
       }
     }
     ___sys_sendmsg() {
       copy_msghdr_from_user() {
         __copy_msghdr();
         __check_object_size() {
           __check_object_size.part.0() {
             check_stack_object();
           }
         }
       }
       ____sys_sendmsg() {
         sock_sendmsg() {
           security_socket_sendmsg() {
             apparmor_socket_sendmsg() {
               aa_sk_perm() {
                 __cond_resched();
               }
             }
           }
           packet_sendmsg() {
             packet_snd() {
               __rcu_read_lock();
               __rcu_read_unlock();
               sock_alloc_send_pskb() {
                 alloc_skb_with_frags() {
                   __alloc_skb() {
                     kmem_cache_alloc_node() {
                       __cond_resched();
                       should_failslab();
                     }
                     kmalloc_reserve() {
                       kmalloc_size_roundup() {
                         kmalloc_slab();
                       }
                       __kmalloc_node_track_caller() {
                         kmalloc_slab();
                         __kmem_cache_alloc_node() {
                           __cond_resched();
                           should_failslab();
                         }
                       }
                     }
                     __build_skb_around();
                   }
                 }
                 skb_set_owner_w();
               }
               skb_put();
               skb_copy_datagram_from_iter() {
                 __check_object_size() {
                   __check_object_size.part.0() {
                     check_stack_object();
                     is_vmalloc_addr();
                     __virt_addr_valid();
                     __check_heap_object();
                   }
                 }
               }
               packet_parse_headers() {
                 eth_header_parse_protocol();
                 __skb_flow_dissect() {
                   __rcu_read_lock();
                   __rcu_read_unlock();
                 }
               }
               skb_partial_csum_set();
               __dev_queue_xmit() {
                 qdisc_pkt_len_init();
                 netdev_core_pick_tx();
                 validate_xmit_skb() {
                   netif_skb_features() {
                     passthru_features_check();
                     skb_network_protocol();
                   }
                   skb_csum_hwoffload_help();
                   validate_xmit_xfrm();
                 }
                 dev_hard_start_xmit() {
                   dev_queue_xmit_nit() {
                     __rcu_read_lock();
                     match_fanout_group();
                     __rcu_read_unlock();
                   }
                   veth_xmit [veth]() {
                     __rcu_read_lock();
                     skb_clone_tx_timestamp();
                     __dev_forward_skb() {
                       __dev_forward_skb2() {
                         skb_scrub_packet();
                         eth_type_trans();
                       }
                     }
                     __netif_rx() {
                       netif_rx_internal() {
                         enqueue_to_backlog() {
                           _raw_spin_lock_irqsave();
                           __raise_softirq_irqoff();
                           _raw_spin_unlock_irqrestore();
                         }
                       }
                     }
                     __rcu_read_unlock();
                   }
                 }
                 __local_bh_enable_ip() {
                   do_softirq.part.0() {
                     __do_softirq() {
                       net_rx_action() {
                         __usecs_to_jiffies();
                         __napi_poll() {
                           process_backlog() {
                             _raw_spin_lock_irq();
                             _raw_spin_unlock_irq();
                             __rcu_read_lock();
                             __netif_receive_skb() {
                               __netif_receive_skb_one_core() {
                                 __netif_receive_skb_core.constprop.0() {
                                   br_handle_frame [bridge]() {
                                     br_nf_pre_routing [br_netfilter]() {
                                       __rcu_read_lock();
                                       __rcu_read_unlock();
                                       __rcu_read_lock();
                                       __rcu_read_unlock();
                                       __rcu_read_lock();
                                       __rcu_read_unlock();
                                       skb_pull_rcsum();
                                       br_validate_ipv4 [br_netfilter]();
                                       skb_ext_add() {
                                         __skb_ext_alloc() {
                                           kmem_cache_alloc() {
                                             should_failslab();
                                           }
                                         }
                                       }
                                       setup_pre_routing [br_netfilter]() {
                                         brnf_get_logical_dev [br_netfilter]() {
                                           __rcu_read_lock();
                                           __rcu_read_unlock();
                                         }
                                         sock_wfree() {
                                           sock_def_write_space() {
                                             __rcu_read_lock();
                                             __wake_up_sync_key() {
                                               __wake_up_common_lock() {
                                                 _raw_spin_lock_irqsave();
                                                 __wake_up_common() {
                                                   pollwake();
                                                 }
                                                 _raw_spin_unlock_irqrestore();
                                               }
                                             }
                                             __rcu_read_unlock();
                                           }
                                         }
                                       }
                                       __rcu_read_lock();
                                       nf_hook_slow() {
                                         ip_sabotage_in [br_netfilter]();
                                         ipv4_conntrack_defrag [nf_defrag_ipv4]();
                                         ipv4_conntrack_in [nf_conntrack]() {
                                           nf_conntrack_in [nf_conntrack]() {
                                             get_l4proto [nf_conntrack]();
                                             resolve_normal_ct [nf_conntrack]() {
                                               nf_ct_get_tuple [nf_conntrack]();
                                               hash_conntrack_raw [nf_conntrack]();
                                               __nf_conntrack_find_get [nf_conntrack]() {
                                                 __rcu_read_lock();
                                                 __rcu_read_unlock();
                                               }
                                             }
                                             nf_conntrack_handle_packet [nf_conntrack]() {
                                               nf_conntrack_tcp_packet [nf_conntrack]() {
                                                 nf_checksum() {
                                                   nf_ip_checksum();
                                                 }
                                                 _raw_spin_lock_bh();
                                                 tcp_in_window [nf_conntrack]() {
                                                   nf_ct_seq_offset [nf_conntrack]();
                                                 }
                                                 _raw_spin_unlock_bh() {
                                                   __local_bh_enable_ip();
                                                 }
                                                 __nf_ct_refresh_acct [nf_conntrack]() {
                                                   nf_ct_acct_add [nf_conntrack]();
                                                 }
                                               }
                                             }
                                           }
                                         }
                                         nf_nat_ipv4_pre_routing [nf_nat]() {
                                           nf_nat_inet_fn [nf_nat]();
                                         }
                                       }
                                       __rcu_read_unlock();
                                       br_nf_pre_routing_finish [br_netfilter]() {
                                         skb_push();
                                         br_nf_hook_thresh [br_netfilter]() {
                                           nf_hook_slow();
                                           br_handle_frame_finish [bridge]() {
                                             br_allowed_ingress [bridge]();
                                             nbp_switchdev_frame_mark [bridge]();
                                             br_fdb_update [bridge]() {
                                               fdb_find_rcu [bridge]();
                                             }
                                             br_fdb_find_rcu [bridge]() {
                                               fdb_find_rcu [bridge]();
                                             }
                                             br_pass_frame_up [bridge]() {
                                               br_allowed_egress [bridge]();
                                               br_handle_vlan [bridge]();
                                               br_multicast_count [bridge]();
                                               netif_receive_skb() {
                                                 skb_defer_rx_timestamp();
                                                 __rcu_read_lock();
                                                 __netif_receive_skb() {
                                                   __netif_receive_skb_one_core() {
                                                     __netif_receive_skb_core.constprop.0();
                                                     ip_rcv() {
                                                       ip_rcv_core();
                                                       __rcu_read_lock();
                                                       nf_hook_slow() {
                                                         ip_sabotage_in [br_netfilter]() {
                                                           ip_rcv_finish() {
                                                             ip_rcv_finish_core.constprop.0() {
                                                               tcp_v4_early_demux() {
                                                                 __inet_lookup_established() {
                                                                   inet_ehashfn();
                                                                 }
                                                                 ipv4_dst_check();
                                                               }
                                                             }
                                                             ip_local_deliver() {
                                                               __rcu_read_lock();
                                                               nf_hook_slow() {
                                                                 nft_do_chain_ipv4 [nf_tables]() {
                                                                   nft_do_chain [nf_tables]() {
                                                                     expr_call_ops_eval [nf_tables]() {
                                                                       nft_counter_eval [nf_tables]() {
                                                                         __local_bh_enable_ip();
                                                                       }
                                                                     }
                                                                     expr_call_ops_eval [nf_tables]() {
                                                                       nft_immediate_eval [nf_tables]();
                                                                     }
                                                                     expr_call_ops_eval [nf_tables]() {
                                                                       nft_meta_get_eval [nf_tables]();
                                                                     }
                                                                     expr_call_ops_eval [nf_tables]() {
                                                                       nft_meta_get_eval [nf_tables]();
                                                                     }
                                                                     expr_call_ops_eval [nf_tables]() {
                                                                       nft_meta_get_eval [nf_tables]();
                                                                     }
                                                                     expr_call_ops_eval [nf_tables]() {
                                                                       nft_meta_get_eval [nf_tables]();
                                                                     }
                                                                   }
                                                                 }
                                                                 nf_nat_ipv4_local_in [nf_nat]() {
                                                                   nf_nat_inet_fn [nf_nat]();
                                                                 }
                                                                 nf_confirm [nf_conntrack]();
                                                               }
                                                               __rcu_read_unlock();
                                                               ip_local_deliver_finish() {
                                                                 __rcu_read_lock();
                                                                 ip_protocol_deliver_rcu() {
                                                                   raw_local_deliver() {
                                                                     raw_v4_input() {
                                                                       __rcu_read_lock();
                                                                       __rcu_read_unlock();
                                                                     }
                                                                   }
                                                                   tcp_v4_rcv() {
                                                                     tcp_inbound_md5_hash() {
                                                                       tcp_parse_md5sig_option();
                                                                     }
                                                                     tcp_filter() {
                                                                       sk_filter_trim_cap() {
                                                                         security_sock_rcv_skb() {
                                                                           apparmor_socket_sock_rcv_skb();
                                                                         }
                                                                         __rcu_read_lock();
                                                                         __rcu_read_unlock();
                                                                       }
                                                                     }
                                                                     tcp_v4_fill_cb();
                                                                     _raw_spin_lock();
                                                                     tcp_v4_do_rcv() {
                                                                       tcp_rcv_state_process() {
                                                                         tcp_mstamp_refresh() {
                                                                           ktime_get();
                                                                         }
                                                                         tcp_validate_incoming();
                                                                         tcp_ack() {
                                                                           ktime_get_seconds();
                                                                           tcp_clean_rtx_queue.constprop.0() {
                                                                             tcp_rack_advance();
                                                                             tcp_rate_skb_delivered();
                                                                             tcp_ack_tstamp();
                                                                             __sk_mem_reclaim() {
                                                                               __sk_mem_reduce_allocated() {
                                                                                 mem_cgroup_uncharge_skmem() {
                                                                                   __mod_memcg_state() {
                                                                                     cgroup_rstat_updated();
                                                                                   }
                                                                                   refill_stock() {
                                                                                     __refill_stock();
                                                                                   }
                                                                                 }
                                                                               }
                                                                             }
                                                                             __kfree_skb() {
                                                                               skb_release_head_state();
                                                                               skb_release_data() {
                                                                                 skb_free_head() {
                                                                                   kfree() {
                                                                                     __kmem_cache_free() {
                                                                                       __slab_free();
                                                                                     }
                                                                                   }
                                                                                 }
                                                                               }
                                                                               kfree_skbmem() {
                                                                                 kmem_cache_free() {
                                                                                   __slab_free();
                                                                                 }
                                                                               }
                                                                             }
                                                                             tcp_chrono_stop();
                                                                             tcp_ack_update_rtt() {
                                                                               tcp_rtt_estimator() {
                                                                                 jiffies_to_usecs();
                                                                               }
                                                                               __usecs_to_jiffies();
                                                                             }
                                                                             cubictcp_acked();
                                                                           }
                                                                           tcp_rack_update_reo_wnd();
                                                                           tcp_schedule_loss_probe() {
                                                                             tcp_schedule_loss_probe.part.0();
                                                                           }
                                                                           tcp_rearm_rto();
                                                                           tcp_newly_delivered();
                                                                           tcp_rate_gen();
                                                                           cubictcp_cong_avoid();
                                                                           tcp_update_pacing_rate();
                                                                           tcp_xmit_recovery();
                                                                         }
                                                                         tcp_set_state() {
                                                                           inet_sk_state_store();
                                                                         }
                                                                         tcp_time_wait() {
                                                                           inet_twsk_alloc() {
                                                                             kmem_cache_alloc() {
                                                                               should_failslab();
                                                                             }
                                                                             init_timer_key();
                                                                             __module_get();
                                                                           }
                                                                           __inet_twsk_schedule() {
                                                                             mod_timer() {
                                                                               lock_timer_base() {
                                                                                 _raw_spin_lock_irqsave();
                                                                               }
                                                                               detach_if_pending();
                                                                               calc_wheel_index();
                                                                               enqueue_timer();
                                                                               _raw_spin_unlock_irqrestore();
                                                                             }
                                                                           }
                                                                           inet_twsk_hashdance() {
                                                                             _raw_spin_lock();
                                                                             _raw_spin_lock();
                                                                             _raw_spin_unlock();
                                                                             _raw_spin_unlock();
                                                                             _raw_spin_lock();
                                                                             _raw_spin_unlock();
                                                                           }
                                                                           __local_bh_enable_ip();
                                                                           tcp_update_metrics() {
                                                                             __rcu_read_lock();
                                                                             tcp_get_metrics() {
                                                                               __tcp_get_metrics();
                                                                             }
                                                                             __rcu_read_unlock();
                                                                           }
                                                                           tcp_done() {
                                                                             tcp_set_state() {
                                                                               inet_unhash();
                                                                               inet_put_port() {
                                                                                 _raw_spin_lock();
                                                                                 _raw_spin_lock();
                                                                                 _raw_spin_unlock();
                                                                                 _raw_spin_unlock();
                                                                                 __local_bh_enable_ip();
                                                                               }
                                                                               inet_sk_state_store();
                                                                             }
                                                                             hrtimer_try_to_cancel() {
                                                                               hrtimer_active();
                                                                             }
                                                                             hrtimer_try_to_cancel() {
                                                                               hrtimer_active();
                                                                             }
                                                                             inet_csk_clear_xmit_timers() {
                                                                               sk_stop_timer() {
                                                                                 timer_delete() {
                                                                                   lock_timer_base() {
                                                                                     _raw_spin_lock_irqsave();
                                                                                   }
                                                                                   detach_if_pending();
                                                                                   _raw_spin_unlock_irqrestore();
                                                                                 }
                                                                               }
                                                                               sk_stop_timer() {
                                                                                 timer_delete();
                                                                               }
                                                                               sk_stop_timer() {
                                                                                 timer_delete() {
                                                                                   lock_timer_base() {
                                                                                     _raw_spin_lock_irqsave();
                                                                                   }
                                                                                   detach_if_pending();
                                                                                   _raw_spin_unlock_irqrestore();
                                                                                 }
                                                                               }
                                                                             }
                                                                             inet_csk_destroy_sock() {
                                                                               tcp_v4_destroy_sock() {
                                                                                 hrtimer_try_to_cancel() {
                                                                                   hrtimer_active();
                                                                                 }
                                                                                 hrtimer_try_to_cancel() {
                                                                                   hrtimer_active();
                                                                                 }
                                                                                 inet_csk_clear_xmit_timers() {
                                                                                   sk_stop_timer() {
                                                                                     timer_delete();
                                                                                   }
                                                                                   sk_stop_timer() {
                                                                                     timer_delete();
                                                                                   }
                                                                                   sk_stop_timer() {
                                                                                     timer_delete();
                                                                                   }
                                                                                 }
                                                                                 tcp_cleanup_congestion_control() {
                                                                                   module_put();
                                                                                 }
                                                                                 tcp_cleanup_ulp();
                                                                                 tcp_write_queue_purge() {
                                                                                   tcp_chrono_stop();
                                                                                 }
                                                                                 tcp_fastopen_active_disable_ofo_check();
                                                                                 skb_rbtree_purge();
                                                                                 tcp_free_fastopen_req();
                                                                                 tcp_fastopen_destroy_cipher();
                                                                                 kfree();
                                                                               }
                                                                               sk_stream_kill_queues() {
                                                                                 skb_queue_purge() {
                                                                                   skb_dequeue() {
                                                                                     _raw_spin_lock_irqsave();
                                                                                     _raw_spin_unlock_irqrestore();
                                                                                   }
                                                                                 }
                                                                               }
                                                                             }
                                                                           }
                                                                         }
                                                                         __kfree_skb() {
                                                                           skb_release_head_state() {
                                                                             __skb_ext_put() {
                                                                               kmem_cache_free();
                                                                             }
                                                                           }
                                                                           skb_release_data() {
                                                                             skb_free_head() {
                                                                               kfree() {
                                                                                 __kmem_cache_free();
                                                                               }
                                                                             }
                                                                           }
                                                                           kfree_skbmem() {
                                                                             kmem_cache_free();
                                                                           }
                                                                         }
                                                                       }
                                                                     }
                                                                     _raw_spin_unlock();
                                                                     sk_free() {
                                                                       __sk_free() {
                                                                         netlink_has_listeners() {
                                                                           __rcu_read_lock();
                                                                           __rcu_read_unlock();
                                                                         }
                                                                         sk_destruct() {
                                                                           __sk_destruct() {
                                                                             inet_sock_destruct() {
                                                                               kfree();
                                                                               dst_release();
                                                                               dst_release();
                                                                             }
                                                                             bpf_sk_storage_free() {
                                                                               __rcu_read_lock();
                                                                               __rcu_read_unlock();
                                                                             }
                                                                             put_pid();
                                                                             cgroup_sk_free() {
                                                                               __rcu_read_lock();
                                                                               __rcu_read_unlock();
                                                                               __rcu_read_lock();
                                                                               __rcu_read_unlock();
                                                                             }
                                                                             mem_cgroup_sk_free() {
                                                                               __rcu_read_lock();
                                                                               __rcu_read_unlock();
                                                                             }
                                                                             security_sk_free() {
                                                                               apparmor_sk_free_security() {
                                                                                 path_put() {
                                                                                   dput();
                                                                                   mntput();
                                                                                 }
                                                                               }
                                                                               kfree() {
                                                                                 __kmem_cache_free() {
                                                                                   __slab_free();
                                                                                 }
                                                                               }
                                                                             }
                                                                             kmem_cache_free() {
                                                                               obj_cgroup_uncharge() {
                                                                                 refill_obj_stock() {
                                                                                   drain_obj_stock();
                                                                                   __rcu_read_lock();
                                                                                   __rcu_read_unlock();
                                                                                   __rcu_read_lock();
                                                                                   __rcu_read_unlock();
                                                                                 }
                                                                               }
                                                                               mod_objcg_state();
                                                                               __rcu_read_lock();
                                                                               __rcu_read_unlock();
                                                                               __slab_free();
                                                                             }
                                                                             module_put();
                                                                           }
                                                                         }
                                                                       }
                                                                     }
                                                                   }
                                                                 }
                                                                 __rcu_read_unlock();
                                                               }
                                                             }
                                                           }
                                                         }
                                                       }
                                                       __rcu_read_unlock();
                                                     }
                                                   }
                                                 }
                                                 __rcu_read_unlock();
                                               }
                                             }
                                           }
                                         }
                                       }
                                     }
                                   }
                                 }
                               }
                             }
                             __rcu_read_unlock();
                             _raw_spin_lock_irq();
                             _raw_spin_unlock_irq();
                           }
                         }
                       }
                     }
                   }
                 }
               }
             }
           }
         }
       }
       kfree();
     }
     __cond_resched();
     fput();
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
       migrate_disable();
       migrate_enable();
       migrate_disable();
       migrate_enable();
     }
   }
 }
 __x64_sys_futex() {
   do_futex() {
     futex_wait() {
       futex_setup_timer();
       futex_wait_setup() {
         get_futex_key();
         futex_q_lock() {
           futex_hash();
           _raw_spin_lock();
         }
         futex_get_value_locked();
       }
       futex_wait_queue() {
         __futex_queue();
         _raw_spin_unlock();
         schedule() {
           rcu_note_context_switch();
           raw_spin_rq_lock_nested() {
             _raw_spin_lock();
           }
           update_rq_clock();
           dequeue_task_fair() {
             dequeue_entity() {
               update_curr() {
                 update_min_vruntime();
                 cpuacct_charge();
                 __cgroup_account_cputime() {
                   cgroup_rstat_updated();
                 }
               }
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
               clear_buddies();
               update_cfs_group();
               update_min_vruntime();
             }
             set_next_buddy();
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
             update_cfs_group() {
               reweight_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
               }
             }
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
             update_cfs_group() {
               reweight_entity() {
                 update_curr() {
                   __calc_delta();
                   update_min_vruntime();
                 }
               }
             }
             hrtick_update();
           }
           pick_next_task() {
             pick_next_task_fair() {
               update_curr();
               check_cfs_rq_runtime();
               pick_next_entity();
               update_curr();
               check_cfs_rq_runtime();
               pick_next_entity();
               check_cfs_rq_runtime();
               pick_next_entity();
               put_prev_entity() {
                 check_cfs_rq_runtime();
               }
               set_next_entity() {
                 clear_buddies();
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
               }
             }
           }
           psi_task_switch() {
             psi_flags_change();
             psi_flags_change();
             psi_group_change() {
               record_times();
             }
             psi_group_change() {
               record_times();
             }
             psi_group_change() {
               record_times();
             }
           }
           __traceiter_sched_switch() {
             _raw_spin_lock_irqsave();
             _raw_spin_unlock_irqrestore();
           }
           switch_mm_irqs_off();
           save_fpregs_to_fpstate() {
             xfd_validate_state();
           }
           finish_task_switch.isra.0() {
             raw_spin_rq_unlock() {
               _raw_spin_unlock();
             }
           }
         } /* schedule */
       } /* futex_wait_queue */
       futex_unqueue();
     } /* futex_wait */
   } /* do_futex */
 } /* __x64_sys_futex */
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
       migrate_disable();
       migrate_enable();
       migrate_disable();
       migrate_enable();
     }
   }
 }
 __x64_sys_futex() {
   do_futex() {
     futex_wait() {
       futex_setup_timer();
       futex_wait_setup() {
         get_futex_key();
         futex_q_lock() {
           futex_hash();
           _raw_spin_lock();
         }
         futex_get_value_locked();
       }
       futex_wait_queue() {
         __futex_queue();
         _raw_spin_unlock();
         schedule() {
           rcu_note_context_switch();
           raw_spin_rq_lock_nested() {
             _raw_spin_lock();
           }
           update_rq_clock();
           dequeue_task_fair() {
             dequeue_entity() {
               update_curr() {
                 update_min_vruntime();
                 cpuacct_charge();
                 __cgroup_account_cputime() {
                   cgroup_rstat_updated();
                 }
               }
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
               clear_buddies();
               update_cfs_group();
               update_min_vruntime();
             }
             set_next_buddy();
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
             update_cfs_group() {
               reweight_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
               }
             }
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
             update_cfs_group() {
               reweight_entity() {
                 update_curr() {
                   __calc_delta();
                   update_min_vruntime();
                 }
               }
             }
             hrtick_update();
           }
           pick_next_task() {
             pick_next_task_fair() {
               update_curr();
               check_cfs_rq_runtime();
               pick_next_entity();
               update_curr();
               check_cfs_rq_runtime();
               pick_next_entity();
               check_cfs_rq_runtime();
               pick_next_entity();
               put_prev_entity() {
                 check_cfs_rq_runtime();
               }
               set_next_entity() {
                 clear_buddies();
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
               }
             }
           }
           psi_task_switch() {
             psi_flags_change();
             psi_flags_change();
             psi_group_change() {
               record_times();
             }
             psi_group_change() {
               record_times();
             }
             psi_group_change() {
               record_times();
             }
           }
           __traceiter_sched_switch() {
             _raw_spin_lock_irqsave();
             _raw_spin_unlock_irqrestore();
           }
           switch_mm_irqs_off();
           save_fpregs_to_fpstate() {
             xfd_validate_state();
           }
           finish_task_switch.isra.0() {
             raw_spin_rq_unlock() {
               _raw_spin_unlock();
             }
           }
         } /* schedule */
       } /* futex_wait_queue */
       futex_unqueue();
     } /* futex_wait */
   } /* do_futex */
 } /* __x64_sys_futex */
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_nanosleep() {
   get_timespec64();
   hrtimer_nanosleep() {
     __hrtimer_init();
     do_nanosleep() {
       hrtimer_start_range_ns() {
         _raw_spin_lock_irqsave();
         __hrtimer_start_range_ns() {
           ktime_get();
           get_nohz_timer_target();
           enqueue_hrtimer();
         }
         hrtimer_reprogram() {
           tick_program_event() {
             clockevents_program_event() {
               ktime_get();
               lapic_next_deadline();
             }
           }
         }
         _raw_spin_unlock_irqrestore();
       }
       schedule() {
         rcu_note_context_switch();
         raw_spin_rq_lock_nested() {
           _raw_spin_lock();
         }
         update_rq_clock();
         dequeue_task_fair() {
           dequeue_entity() {
             update_curr() {
               update_min_vruntime();
               cpuacct_charge();
               __cgroup_account_cputime() {
                 cgroup_rstat_updated();
               }
             }
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
             clear_buddies();
             update_cfs_group();
             update_min_vruntime();
           }
           set_next_buddy();
           __update_load_avg_se();
           __update_load_avg_cfs_rq();
           update_cfs_group() {
             reweight_entity() {
               update_curr() {
                 update_min_vruntime();
               }
             }
           }
           __update_load_avg_se();
           __update_load_avg_cfs_rq();
           update_cfs_group() {
             reweight_entity() {
               update_curr() {
                 __calc_delta();
                 update_min_vruntime();
               }
             }
           }
           hrtick_update();
         }
         pick_next_task() {
           pick_next_task_fair() {
             update_curr();
             check_cfs_rq_runtime();
             pick_next_entity();
             update_curr();
             check_cfs_rq_runtime();
             pick_next_entity();
             check_cfs_rq_runtime();
             pick_next_entity();
             put_prev_entity() {
               check_cfs_rq_runtime();
             }
             set_next_entity() {
               clear_buddies();
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
             }
           }
         }
         psi_task_switch() {
           psi_flags_change();
           psi_flags_change();
           psi_group_change() {
             record_times();
           }
           psi_group_change() {
             record_times();
           }
           psi_group_change() {
             record_times();
           }
         }
         __traceiter_sched_switch() {
           _raw_spin_lock_irqsave();
           _raw_spin_unlock_irqrestore();
         }
         switch_mm_irqs_off();
         save_fpregs_to_fpstate() {
           xfd_validate_state();
         }
         finish_task_switch.isra.0() {
           raw_spin_rq_unlock() {
             _raw_spin_unlock();
           }
         }
       } /* schedule */
       hrtimer_active();
     }
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
       migrate_disable();
       migrate_enable();
       migrate_disable();
       migrate_enable();
     }
   }
 }
 __x64_sys_futex() {
   do_futex() {
     futex_wake() {
       get_futex_key();
       futex_hash();
       _raw_spin_lock();
       futex_wake_mark() {
         __futex_unqueue();
         wake_q_add_safe();
       }
       _raw_spin_unlock();
       wake_up_q() {
         try_to_wake_up() {
           _raw_spin_lock_irqsave();
           ttwu_queue_wakelist();
           raw_spin_rq_lock_nested() {
             _raw_spin_lock();
           }
           update_rq_clock();
           ttwu_do_activate() {
             psi_task_change() {
               psi_flags_change();
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
             }
             enqueue_task_fair() {
               enqueue_entity() {
                 update_curr() {
                   update_min_vruntime();
                   cpuacct_charge();
                   __cgroup_account_cputime() {
                     cgroup_rstat_updated();
                   }
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 update_cfs_group();
                 place_entity();
               }
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
               update_cfs_group() {
                 reweight_entity() {
                   update_curr() {
                     update_min_vruntime();
                   }
                 }
               }
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
               update_cfs_group() {
                 reweight_entity() {
                   update_curr() {
                     __calc_delta();
                     update_min_vruntime();
                   }
                 }
               }
               hrtick_update();
             }
             ttwu_do_wakeup() {
               check_preempt_curr() {
                 check_preempt_wakeup() {
                   update_curr();
                 }
               }
             }
           }
           raw_spin_rq_unlock() {
             _raw_spin_unlock();
           }
           _raw_spin_unlock_irqrestore();
         }
       }
     }
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
       migrate_disable();
       migrate_enable();
       migrate_disable();
       migrate_enable();
     }
   }
 }
 __x64_sys_futex() {
   do_futex() {
     futex_wait() {
       futex_setup_timer();
       futex_wait_setup() {
         get_futex_key();
         futex_q_lock() {
           futex_hash();
           _raw_spin_lock();
         }
         futex_get_value_locked();
       }
       futex_wait_queue() {
         __futex_queue();
         _raw_spin_unlock();
         schedule() {
           rcu_note_context_switch();
           raw_spin_rq_lock_nested() {
             _raw_spin_lock();
           }
           update_rq_clock();
           dequeue_task_fair() {
             dequeue_entity() {
               update_curr() {
                 update_min_vruntime();
                 cpuacct_charge();
                 __cgroup_account_cputime() {
                   cgroup_rstat_updated();
                 }
               }
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
               clear_buddies();
               update_cfs_group();
               update_min_vruntime();
             }
             set_next_buddy();
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
             update_cfs_group() {
               reweight_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
               }
             }
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
             update_cfs_group() {
               reweight_entity() {
                 update_curr() {
                   __calc_delta();
                   update_min_vruntime();
                 }
               }
             }
             hrtick_update();
           }
           pick_next_task() {
             pick_next_task_fair() {
               update_curr();
               check_cfs_rq_runtime();
               pick_next_entity();
               update_curr();
               check_cfs_rq_runtime();
               pick_next_entity();
               check_cfs_rq_runtime();
               pick_next_entity();
               put_prev_entity() {
                 check_cfs_rq_runtime();
               }
               set_next_entity() {
                 clear_buddies();
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
               }
             }
           }
           psi_task_switch() {
             psi_flags_change();
             psi_flags_change();
             psi_group_change() {
               record_times();
             }
             psi_group_change() {
               record_times();
             }
             psi_group_change() {
               record_times();
             }
           }
           __traceiter_sched_switch() {
             _raw_spin_lock_irqsave();
             _raw_spin_unlock_irqrestore();
           }
           switch_mm_irqs_off();
           save_fpregs_to_fpstate() {
             xfd_validate_state();
           }
           finish_task_switch.isra.0() {
             raw_spin_rq_unlock() {
               _raw_spin_unlock();
             }
           }
         }
       }
       futex_unqueue();
     }
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
       migrate_disable();
       migrate_enable();
       migrate_disable();
       migrate_enable();
     }
   }
 }
 __x64_sys_futex() {
   do_futex() {
     futex_wait() {
       futex_setup_timer();
       futex_wait_setup() {
         get_futex_key();
         futex_q_lock() {
           futex_hash();
           _raw_spin_lock();
         }
         futex_get_value_locked();
       }
       futex_wait_queue() {
         __futex_queue();
         _raw_spin_unlock();
         schedule() {
           rcu_note_context_switch();
           raw_spin_rq_lock_nested() {
             _raw_spin_lock();
           }
           update_rq_clock();
           dequeue_task_fair() {
             dequeue_entity() {
               update_curr() {
                 update_min_vruntime();
                 cpuacct_charge();
                 __cgroup_account_cputime() {
                   cgroup_rstat_updated();
                 }
               }
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
               clear_buddies();
               update_cfs_group();
               update_min_vruntime();
             }
             set_next_buddy();
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
             update_cfs_group() {
               reweight_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
               }
             }
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
             update_cfs_group() {
               reweight_entity() {
                 update_curr() {
                   __calc_delta();
                   update_min_vruntime();
                 }
               }
             }
             hrtick_update();
           }
           pick_next_task() {
             pick_next_task_fair() {
               update_curr();
               check_cfs_rq_runtime();
               pick_next_entity();
               update_curr();
               check_cfs_rq_runtime();
               pick_next_entity();
               check_cfs_rq_runtime();
               pick_next_entity();
               put_prev_entity() {
                 check_cfs_rq_runtime();
               }
               set_next_entity() {
                 clear_buddies();
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
               }
             }
           }
           psi_task_switch() {
             psi_flags_change();
             psi_flags_change();
             psi_group_change() {
               record_times();
             }
             psi_group_change() {
               record_times();
             }
             psi_group_change() {
               record_times();
             }
           }
           __traceiter_sched_switch() {
             _raw_spin_lock_irqsave();
             _raw_spin_unlock_irqrestore();
           }
           switch_mm_irqs_off();
           save_fpregs_to_fpstate() {
             xfd_validate_state();
           }
           finish_task_switch.isra.0() {
             raw_spin_rq_unlock() {
               _raw_spin_unlock();
             }
           }
         } /* schedule */
       } /* futex_wait_queue */
       futex_unqueue();
     } /* futex_wait */
   } /* do_futex */
 } /* __x64_sys_futex */
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
     }
   }
 }
 __x64_sys_nanosleep() {
   get_timespec64();
   hrtimer_nanosleep() {
     __hrtimer_init();
     do_nanosleep() {
       hrtimer_start_range_ns() {
         _raw_spin_lock_irqsave();
         __hrtimer_start_range_ns() {
           ktime_get();
           get_nohz_timer_target();
           enqueue_hrtimer();
         }
         hrtimer_reprogram() {
           tick_program_event() {
             clockevents_program_event() {
               ktime_get();
               lapic_next_deadline();
             }
           }
         }
         _raw_spin_unlock_irqrestore();
       }
       schedule() {
         rcu_note_context_switch();
         raw_spin_rq_lock_nested() {
           _raw_spin_lock();
         }
         update_rq_clock();
         dequeue_task_fair() {
           dequeue_entity() {
             update_curr() {
               update_min_vruntime();
               cpuacct_charge();
               __cgroup_account_cputime() {
                 cgroup_rstat_updated();
               }
             }
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
             clear_buddies();
             update_cfs_group();
             update_min_vruntime();
           }
           set_next_buddy();
           __update_load_avg_se();
           __update_load_avg_cfs_rq();
           update_cfs_group() {
             reweight_entity() {
               update_curr() {
                 update_min_vruntime();
               }
             }
           }
           __update_load_avg_se();
           __update_load_avg_cfs_rq();
           update_cfs_group() {
             reweight_entity() {
               update_curr() {
                 __calc_delta();
                 update_min_vruntime();
               }
             }
           }
           hrtick_update();
         }
         pick_next_task() {
           pick_next_task_fair() {
             update_curr();
             check_cfs_rq_runtime();
             pick_next_entity();
             update_curr();
             check_cfs_rq_runtime();
             pick_next_entity();
             check_cfs_rq_runtime();
             pick_next_entity();
             put_prev_entity() {
               check_cfs_rq_runtime();
             }
             set_next_entity() {
               clear_buddies();
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
             }
           }
         }
         psi_task_switch() {
           psi_flags_change();
           psi_flags_change();
           psi_group_change() {
             record_times();
           }
           psi_group_change() {
             record_times();
           }
           psi_group_change() {
             record_times();
           }
         }
         __traceiter_sched_switch() {
           _raw_spin_lock_irqsave();
           _raw_spin_unlock_irqrestore();
         }
         switch_mm_irqs_off();
         save_fpregs_to_fpstate() {
           xfd_validate_state();
         }
         finish_task_switch.isra.0() {
           raw_spin_rq_unlock() {
             _raw_spin_unlock();
           }
         }
       } /* schedule */
       hrtimer_active();
     } /* do_nanosleep */
   } /* hrtimer_nanosleep */
 } /* __x64_sys_nanosleep */
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
       migrate_disable();
       migrate_enable();
       migrate_disable();
       migrate_enable();
     }
   }
 }
 __x64_sys_futex() {
   do_futex() {
     futex_wake() {
       get_futex_key();
       futex_hash();
       _raw_spin_lock();
       futex_wake_mark() {
         __futex_unqueue();
         wake_q_add_safe();
       }
       _raw_spin_unlock();
       wake_up_q() {
         try_to_wake_up() {
           _raw_spin_lock_irqsave();
           ttwu_queue_wakelist();
           raw_spin_rq_lock_nested() {
             _raw_spin_lock();
           }
           update_rq_clock();
           ttwu_do_activate() {
             psi_task_change() {
               psi_flags_change();
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
             }
             enqueue_task_fair() {
               enqueue_entity() {
                 update_curr() {
                   update_min_vruntime();
                   cpuacct_charge();
                   __cgroup_account_cputime() {
                     cgroup_rstat_updated();
                   }
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 update_cfs_group();
                 place_entity();
               }
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
               update_cfs_group() {
                 reweight_entity() {
                   update_curr() {
                     update_min_vruntime();
                   }
                 }
               }
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
               update_cfs_group() {
                 reweight_entity() {
                   update_curr() {
                     __calc_delta();
                     update_min_vruntime();
                   }
                 }
               }
               hrtick_update();
             }
             ttwu_do_wakeup() {
               check_preempt_curr() {
                 check_preempt_wakeup() {
                   update_curr();
                 }
               }
             }
           }
           raw_spin_rq_unlock() {
             _raw_spin_unlock();
           }
           _raw_spin_unlock_irqrestore();
         }
       }
     }
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
       migrate_disable();
       migrate_enable();
       migrate_disable();
       migrate_enable();
     }
   }
 }
 __x64_sys_futex() {
   do_futex() {
     futex_wait() {
       futex_setup_timer();
       futex_wait_setup() {
         get_futex_key();
         futex_q_lock() {
           futex_hash();
           _raw_spin_lock();
         }
         futex_get_value_locked();
       }
       futex_wait_queue() {
         __futex_queue();
         _raw_spin_unlock();
         schedule() {
           rcu_note_context_switch();
           raw_spin_rq_lock_nested() {
             _raw_spin_lock();
           }
           update_rq_clock();
           dequeue_task_fair() {
             dequeue_entity() {
               update_curr() {
                 update_min_vruntime();
                 cpuacct_charge();
                 __cgroup_account_cputime() {
                   cgroup_rstat_updated();
                 }
               }
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
               clear_buddies();
               update_cfs_group();
               update_min_vruntime();
             }
             set_next_buddy();
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
             update_cfs_group() {
               reweight_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
               }
             }
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
             update_cfs_group() {
               reweight_entity() {
                 update_curr() {
                   __calc_delta();
                   update_min_vruntime();
                 }
               }
             }
             hrtick_update();
           }
           pick_next_task() {
             pick_next_task_fair() {
               update_curr();
               check_cfs_rq_runtime();
               pick_next_entity();
               update_curr();
               check_cfs_rq_runtime();
               pick_next_entity();
               check_cfs_rq_runtime();
               pick_next_entity();
               put_prev_entity() {
                 check_cfs_rq_runtime();
               }
               set_next_entity() {
                 clear_buddies();
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
               }
             }
           }
           psi_task_switch() {
             psi_flags_change();
             psi_flags_change();
             psi_group_change() {
               record_times();
             }
             psi_group_change() {
               record_times();
             }
             psi_group_change() {
               record_times();
             }
           }
           __traceiter_sched_switch() {
             _raw_spin_lock_irqsave();
             _raw_spin_unlock_irqrestore();
           }
           switch_mm_irqs_off();
           save_fpregs_to_fpstate() {
             xfd_validate_state();
           }
           finish_task_switch.isra.0() {
             raw_spin_rq_unlock() {
               _raw_spin_unlock();
             }
           }
         }
       }
       futex_unqueue();
     }
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
       migrate_disable();
       migrate_enable();
       migrate_disable();
       migrate_enable();
     }
   }
 }
 __x64_sys_futex() {
   do_futex() {
     futex_wait() {
       futex_setup_timer();
       futex_wait_setup() {
         get_futex_key();
         futex_q_lock() {
           futex_hash();
           _raw_spin_lock();
         }
         futex_get_value_locked();
       }
       futex_wait_queue() {
         __futex_queue();
         _raw_spin_unlock();
         schedule() {
           rcu_note_context_switch();
           raw_spin_rq_lock_nested() {
             _raw_spin_lock();
           }
           update_rq_clock();
           dequeue_task_fair() {
             dequeue_entity() {
               update_curr() {
                 update_min_vruntime();
                 cpuacct_charge();
                 __cgroup_account_cputime() {
                   cgroup_rstat_updated();
                 }
               }
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
               clear_buddies();
               update_cfs_group();
               update_min_vruntime();
             }
             set_next_buddy();
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
             update_cfs_group() {
               reweight_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
               }
             }
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
             update_cfs_group() {
               reweight_entity() {
                 update_curr() {
                   __calc_delta();
                   update_min_vruntime();
                 }
               }
             }
             hrtick_update();
           }
           pick_next_task() {
             pick_next_task_fair() {
               update_curr();
               check_cfs_rq_runtime();
               pick_next_entity();
               update_curr();
               check_cfs_rq_runtime();
               pick_next_entity();
               check_cfs_rq_runtime();
               pick_next_entity();
               put_prev_entity() {
                 check_cfs_rq_runtime();
               }
               set_next_entity() {
                 clear_buddies();
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
               }
             }
           }
           psi_task_switch() {
             psi_flags_change();
             psi_flags_change();
             psi_group_change() {
               record_times();
             }
             psi_group_change() {
               record_times();
             }
             psi_group_change() {
               record_times();
             }
           }
           __traceiter_sched_switch() {
             _raw_spin_lock_irqsave();
             _raw_spin_unlock_irqrestore();
           }
           switch_mm_irqs_off();
           save_fpregs_to_fpstate() {
             xfd_validate_state();
           }
           finish_task_switch.isra.0() {
             raw_spin_rq_unlock() {
               _raw_spin_unlock();
             }
           }
         } /* schedule */
       } /* futex_wait_queue */
       futex_unqueue();
     } /* futex_wait */
   } /* do_futex */
 } /* __x64_sys_futex */
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
   switch_fpu_return() {
     restore_fpregs_from_fpstate() {
       xfd_validate_state();
     }
   }
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
       migrate_disable();
       migrate_enable();
       migrate_disable();
       migrate_enable();
     }
   }
 }
 __x64_sys_futex() {
   do_futex() {
     futex_wake() {
       get_futex_key();
       futex_hash();
       _raw_spin_lock();
       futex_wake_mark() {
         __futex_unqueue();
         wake_q_add_safe();
       }
       _raw_spin_unlock();
       wake_up_q() {
         try_to_wake_up() {
           _raw_spin_lock_irqsave();
           ttwu_queue_wakelist();
           raw_spin_rq_lock_nested() {
             _raw_spin_lock();
           }
           update_rq_clock();
           ttwu_do_activate() {
             psi_task_change() {
               psi_flags_change();
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
               psi_group_change() {
                 record_times();
               }
             }
             enqueue_task_fair() {
               enqueue_entity() {
                 update_curr() {
                   update_min_vruntime();
                   cpuacct_charge();
                   __cgroup_account_cputime() {
                     cgroup_rstat_updated();
                   }
                 }
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
                 update_cfs_group();
                 place_entity();
               }
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
               update_cfs_group() {
                 reweight_entity() {
                   update_curr() {
                     update_min_vruntime();
                   }
                 }
               }
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
               update_cfs_group() {
                 reweight_entity() {
                   update_curr() {
                     __calc_delta();
                     update_min_vruntime();
                   }
                 }
               }
               hrtick_update();
             }
             ttwu_do_wakeup() {
               check_preempt_curr() {
                 check_preempt_wakeup() {
                   update_curr();
                 }
               }
             }
           }
           raw_spin_rq_unlock() {
             _raw_spin_unlock();
           }
           _raw_spin_unlock_irqrestore();
         }
       }
     }
   }
 }
 exit_to_user_mode_prepare() {
   fpregs_assert_state_consistent();
 }
 syscall_trace_enter.constprop.0() {
   __secure_computing() {
     __seccomp_filter() {
       populate_seccomp_data();
       migrate_disable();
       migrate_enable();
       migrate_disable();
       migrate_enable();
     }
   }
 }
 __x64_sys_futex() {
   do_futex() {
     futex_wait() {
       futex_setup_timer();
       futex_wait_setup() {
         get_futex_key();
         futex_q_lock() {
           futex_hash();
           _raw_spin_lock();
         }
         futex_get_value_locked();
       }
       futex_wait_queue() {
         __futex_queue();
         _raw_spin_unlock();
         schedule() {
           rcu_note_context_switch();
           raw_spin_rq_lock_nested() {
             _raw_spin_lock();
           }
           update_rq_clock();
           dequeue_task_fair() {
             dequeue_entity() {
               update_curr() {
                 update_min_vruntime();
                 cpuacct_charge();
                 __cgroup_account_cputime() {
                   cgroup_rstat_updated();
                 }
               }
               __update_load_avg_se();
               __update_load_avg_cfs_rq();
               clear_buddies();
               update_cfs_group();
               update_min_vruntime();
             }
             set_next_buddy();
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
             update_cfs_group() {
               reweight_entity() {
                 update_curr() {
                   update_min_vruntime();
                 }
               }
             }
             __update_load_avg_se();
             __update_load_avg_cfs_rq();
             update_cfs_group() {
               reweight_entity() {
                 update_curr() {
                   __calc_delta();
                   update_min_vruntime();
                 }
               }
             }
             hrtick_update();
           }
           pick_next_task() {
             pick_next_task_fair() {
               update_curr();
               check_cfs_rq_runtime();
               pick_next_entity();
               update_curr();
               check_cfs_rq_runtime();
               pick_next_entity();
               check_cfs_rq_runtime();
               pick_next_entity();
               put_prev_entity() {
                 check_cfs_rq_runtime();
               }
               set_next_entity() {
                 clear_buddies();
                 __update_load_avg_se();
                 __update_load_avg_cfs_rq();
               }
             }
           }
           psi_task_switch() {
             psi_flags_change();
             psi_flags_change();
             psi_group_change() {
               record_times();
             }
             psi_group_change() {
               record_times();
             }
             psi_group_change() {
               record_times();
             }
           }
           __traceiter_sched_switch() {
             _raw_spin_lock_irqsave();
             _raw_spin_unlock_irqrestore();
           }
           switch_mm_irqs_off();
           save_fpregs_to_fpstate() {
             xfd_validate_state();
           }
